"use strict";

require("source-map-support/register");

const path = require('path');

const Util = require('rk-utils');

const _ = Util._;
const Promise = Util.Promise;

const Literal = require('../enum/Literal');

const Router = require('@koa/router');

const Controller = require('../patterns/Controller');

const {
  InvalidConfiguration
} = require('../utils/Errors');

module.exports = function (app, baseRoute, moduleItem) {
  let controllerPath = path.join(app.backendPath, Literal.CONTROLLERS_PATH);

  if (typeof moduleItem === 'string') {
    moduleItem = {
      controller: moduleItem
    };
  }

  let currentPrefix = Util.urlJoin(baseRoute, moduleItem.route || '/');
  let router = currentPrefix === '/' ? new Router() : new Router({
    prefix: currentPrefix
  });

  if (moduleItem.middlewares) {
    app.useMiddlewares(router, moduleItem.middlewares);
  }

  let controllerFile = path.join(controllerPath, moduleItem.controller + '.js');
  let controller;
  controller = require(controllerFile);

  if (controller.prototype instanceof Controller) {
    controller = new controller(app);
  }

  for (let actionName in controller) {
    let action = controller[actionName];
    if (typeof action !== 'function') continue;

    let httpMethod = _.castArray(action.__metaHttpMethod || 'get');

    let subRoute = Util.ensureLeftSlash(action.__metaRoute || actionName);

    _.each(httpMethod, method => {
      if (!Literal.ALLOWED_HTTP_METHODS.has(method)) {
        throw new InvalidConfiguration('Unsupported http method: ' + method, app, `routing.${baseRoute}.modules ${moduleItem.controller}.${actionName}`);
      }

      app.addRoute(router, method, subRoute, action.__metaMiddlewares ? action.__metaMiddlewares.concat([app.wrapAction(action)]) : app.wrapAction(action));
    });
  }

  ;
  app.addRouter(router);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXJzL21vZHVsZS5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIlV0aWwiLCJfIiwiUHJvbWlzZSIsIkxpdGVyYWwiLCJSb3V0ZXIiLCJDb250cm9sbGVyIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwiYXBwIiwiYmFzZVJvdXRlIiwibW9kdWxlSXRlbSIsImNvbnRyb2xsZXJQYXRoIiwiam9pbiIsImJhY2tlbmRQYXRoIiwiQ09OVFJPTExFUlNfUEFUSCIsImNvbnRyb2xsZXIiLCJjdXJyZW50UHJlZml4IiwidXJsSm9pbiIsInJvdXRlIiwicm91dGVyIiwicHJlZml4IiwibWlkZGxld2FyZXMiLCJ1c2VNaWRkbGV3YXJlcyIsImNvbnRyb2xsZXJGaWxlIiwicHJvdG90eXBlIiwiYWN0aW9uTmFtZSIsImFjdGlvbiIsImh0dHBNZXRob2QiLCJjYXN0QXJyYXkiLCJfX21ldGFIdHRwTWV0aG9kIiwic3ViUm91dGUiLCJlbnN1cmVMZWZ0U2xhc2giLCJfX21ldGFSb3V0ZSIsImVhY2giLCJtZXRob2QiLCJBTExPV0VEX0hUVFBfTUVUSE9EUyIsImhhcyIsImFkZFJvdXRlIiwiX19tZXRhTWlkZGxld2FyZXMiLCJjb25jYXQiLCJ3cmFwQWN0aW9uIiwiYWRkUm91dGVyIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsVUFBRCxDQUFwQjs7QUFDQSxNQUFNRSxDQUFDLEdBQUdELElBQUksQ0FBQ0MsQ0FBZjtBQUNBLE1BQU1DLE9BQU8sR0FBR0YsSUFBSSxDQUFDRSxPQUFyQjs7QUFDQSxNQUFNQyxPQUFPLEdBQUdKLE9BQU8sQ0FBQyxpQkFBRCxDQUF2Qjs7QUFDQSxNQUFNSyxNQUFNLEdBQUdMLE9BQU8sQ0FBQyxhQUFELENBQXRCOztBQUNBLE1BQU1NLFVBQVUs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IHN0cmljdFwiO1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgVXRpbCA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCBfID0gVXRpbC5fO1xuY29uc3QgUHJvbWlzZSA9IFV0aWwuUHJvbWlzZTtcbmNvbnN0IExpdGVyYWwgPSByZXF1aXJlKCcuLi9lbnVtL0xpdGVyYWwnKTtcbmNvbnN0IFJvdXRlciA9IHJlcXVpcmUoJ0Brb2Evcm91dGVyJyk7XG5jb25zdCBDb250cm9sbGVyID0gcmVxdWlyZSgnLi4vcGF0dGVybnMvQ29udHJvbGxlcicpO1xuY29uc3QgeyBJbnZhbGlkQ29uZmlndXJhdGlvbiB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvRXJyb3JzJyk7XG5cbi8qKlxuICogTW9kdWxlIHJvdXRlciBmb3IgbW91bnRpbmcgYSBzcGVjaWZpYyBjb250cm9sbGVyLlxuICogQG1vZHVsZSBSb3V0ZXJfTW9kdWxlXG4gKi9cblxuLyoqXG4gKiBDcmVhdGUgYSBtb2R1bGUtYmFzZWQgcm91dGVyLiBcbiAqIEBwYXJhbSB7Um91dGFibGV9IGFwcFxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VSb3V0ZSBcbiAqIEBwYXJhbSB7Kn0gbW9kdWxlSXRlbSBcbiAqIEBleGFtcGxlXG4gKiAgICc8YmFzZSBwYXRoPic6IHsgICAgXG4gKiAgICAgICBtb2R1bGU6IHtcbiAqICAgICAgICAgICBtaWRkbGV3YXJlczogXG4gKiAgICAgICAgICAgY29udHJvbGxlcjogXG4gKiAgICAgICB9XG4gKiAgIH1cbiAqXG4gKiAgICc8YmFzZSBwYXRoPic6IHsgICAgXG4gKiAgICAgICBtb2R1bGU6IFwiY29udHJvbGxlclwiXG4gKiAgIH1cbiAgKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwcCwgYmFzZVJvdXRlLCBtb2R1bGVJdGVtKSB7XG4gICAgbGV0IGNvbnRyb2xsZXJQYXRoID0gcGF0aC5qb2luKGFwcC5iYWNrZW5kUGF0aCwgTGl0ZXJhbC5DT05UUk9MTEVSU19QQVRIKTsgICBcblxuICAgIGlmICh0eXBlb2YgbW9kdWxlSXRlbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gWyAnY29udHJvbGxlck5hbWUnIF1cbiAgICAgICAgbW9kdWxlSXRlbSA9IHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBjb250cm9sbGVyOiBtb2R1bGVJdGVtXG4gICAgICAgIH07XG4gICAgfSAgICBcblxuICAgIGxldCBjdXJyZW50UHJlZml4ID0gVXRpbC51cmxKb2luKGJhc2VSb3V0ZSwgbW9kdWxlSXRlbS5yb3V0ZSB8fCAnLycpO1xuICAgIGxldCByb3V0ZXIgPSBjdXJyZW50UHJlZml4ID09PSAnLycgPyBuZXcgUm91dGVyKCkgOiBuZXcgUm91dGVyKHtwcmVmaXg6IGN1cnJlbnRQcmVmaXh9KTtcbiAgICBcblxuICAgIGlmIChtb2R1bGVJdGVtLm1pZGRsZXdhcmVzKSB7ICAgICAgICAgICAgXG4gICAgICAgIC8vbW9kdWxlLXdpZGUgbWlkZGxld2FyZXMgICAgICAgXG4gICAgICAgIGFwcC51c2VNaWRkbGV3YXJlcyhyb3V0ZXIsIG1vZHVsZUl0ZW0ubWlkZGxld2FyZXMpO1xuICAgIH0gXG5cbiAgICBsZXQgY29udHJvbGxlckZpbGUgPSBwYXRoLmpvaW4oY29udHJvbGxlclBhdGgsIG1vZHVsZUl0ZW0uY29udHJvbGxlciArICcuanMnKTtcbiAgICBsZXQgY29udHJvbGxlcjtcblxuICAgIGNvbnRyb2xsZXIgPSByZXF1aXJlKGNvbnRyb2xsZXJGaWxlKTtcblxuICAgIGlmIChjb250cm9sbGVyLnByb3RvdHlwZSBpbnN0YW5jZW9mIENvbnRyb2xsZXIpIHtcbiAgICAgICAgY29udHJvbGxlciA9IG5ldyBjb250cm9sbGVyKGFwcCk7XG4gICAgfVxuICAgICAgICAgICAgXG4gICAgZm9yIChsZXQgYWN0aW9uTmFtZSBpbiBjb250cm9sbGVyKSB7ICAgICAgICBcbiAgICAgICAgbGV0IGFjdGlvbiA9IGNvbnRyb2xsZXJbYWN0aW9uTmFtZV07ICAgIFxuICAgICAgICBpZiAodHlwZW9mIGFjdGlvbiAhPT0gJ2Z1bmN0aW9uJykgY29udGludWU7XG5cbiAgICAgICAgbGV0IGh0dHBNZXRob2QgPSBfLmNhc3RBcnJheShhY3Rpb24uX19tZXRhSHR0cE1ldGhvZCB8fCAnZ2V0Jyk7ICAgICAgICAgICAgXG4gICAgICAgIGxldCBzdWJSb3V0ZSA9IFV0aWwuZW5zdXJlTGVmdFNsYXNoKGFjdGlvbi5fX21ldGFSb3V0ZSB8fCBhY3Rpb25OYW1lKTtcblxuICAgICAgICBfLmVhY2goaHR0cE1ldGhvZCwgbWV0aG9kID0+IHtcbiAgICAgICAgICAgIGlmICghTGl0ZXJhbC5BTExPV0VEX0hUVFBfTUVUSE9EUy5oYXMobWV0aG9kKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgJ1Vuc3VwcG9ydGVkIGh0dHAgbWV0aG9kOiAnICsgbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICAgICAgICAgIGByb3V0aW5nLiR7YmFzZVJvdXRlfS5tb2R1bGVzICR7bW9kdWxlSXRlbS5jb250cm9sbGVyfS4ke2FjdGlvbk5hbWV9YCk7XG4gICAgICAgICAgICB9ICAgICAgICAgICBcblxuICAgICAgICAgICAgYXBwLmFkZFJvdXRlKHJvdXRlciwgbWV0aG9kLCBzdWJSb3V0ZSwgYWN0aW9uLl9fbWV0YU1pZGRsZXdhcmVzID8gXG4gICAgICAgICAgICAgICAgYWN0aW9uLl9fbWV0YU1pZGRsZXdhcmVzLmNvbmNhdChbYXBwLndyYXBBY3Rpb24oYWN0aW9uKV0pIDogXG4gICAgICAgICAgICAgICAgYXBwLndyYXBBY3Rpb24oYWN0aW9uKSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBhcHAuYWRkUm91dGVyKHJvdXRlcik7XG59OyJdfQ==