{"version":3,"file":"ModuleBase.js","names":["path","require","Literal","defaultBackendPath","ModuleBase","Base","constructor","server","name","appPath","options","Object","assign","workingPath","configPath","join","DEFAULT_CONFIG_PATH","isServer","backendPath","toAbsolutePath","getService","currentModuleOnly","enabled","feature","relativePath","modPath","requireFromLib","libName","log","level","message","rest","logWithAppName","logger","_getFeatureFallbackPath","pathArray","splice","resolve","FEATURES_PATH","module","exports"],"sources":["../src/ModuleBase.js"],"sourcesContent":["\"use strict\";\n\nconst path = require(\"path\");\nconst Literal = require(\"./enum/Literal\");\nconst { defaultBackendPath } = require(\"./utils/Helpers\");\n\nconst ModuleBase = (Base) =>\n    class extends Base {\n        /**\n         * @param {WebServer} server\n         * @param {string} name - The name of the app module.\n         * @param {string} route - The base route of the app module.\n         * @param {string} appPath - The path to load the app's module files\n         * @param {object} [options] - The app module's extra options defined in its parent's configuration.\n         * @property {bool} [options.logWithAppName=false] - Flag to include app name in log message.\n         */\n        constructor(server, name, appPath, options) {\n            super(\n                name,\n                Object.assign(\n                    {\n                        workingPath: appPath,\n                        configPath: path.join(appPath, Literal.DEFAULT_CONFIG_PATH),\n                    },\n                    options\n                )\n            );\n\n            /**\n             * Hosting server.\n             * @member {WebServer}\n             **/\n            this.server = server;\n\n            /**\n             * Whether it is a server.\n             * @member {boolean}\n             **/\n            this.isServer = false;\n\n            /**\n             * Backend files path.\n             * @member {string}\n             **/\n            this.backendPath = this.toAbsolutePath(this.options.backendPath || defaultBackendPath);\n        }\n\n        /**\n         * Get a service from module hierarchy\n         * @param name\n         * @returns {object}\n         */\n        getService(name, currentModuleOnly) {\n            return super.getService(name) || (!currentModuleOnly && this.server.getService(name));\n        }\n\n        /**\n         * Check whether a feature is enabled in the app or its hosting server.\n         * @param {string} feature\n         * @returns {bool}\n         */\n        enabled(feature, currentModuleOnly) {\n            return super.enabled(feature) || (!currentModuleOnly && this.server.enabled(feature));\n        }\n\n        /**\n         * Require a js module from backend path\n         * @param {*} relativePath\n         */\n        require(relativePath) {\n            let modPath = path.join(this.backendPath, relativePath);\n            return require(modPath);\n        }\n\n        /**\n         * Require a module from the source path of a library module\n         * @param {*} relativePath\n         */\n        requireFromLib(libName, relativePath) {\n            return this.server.requireFromLib(libName, relativePath);\n        }\n\n        /**\n         * Default log method, may be override by loggers feature\n         * @param {string} level - Log level\n         * @param {string} message - Log message\n         * @param {...object} rest - Extra meta data\n         * @returns {Routable}\n         */\n        log(level, message, ...rest) {\n            if (this.options.logWithAppName) {\n                message = \"[\" + this.name + \"] \" + message;\n            }\n\n            if (this.logger) {\n                this.logger.log(level, message, ...rest);\n            } else {\n                this.server.log(level, message, ...rest);\n            }\n\n            return this;\n        }\n\n        _getFeatureFallbackPath() {\n            let pathArray = super._getFeatureFallbackPath();\n            pathArray.splice(1, 0, path.resolve(this.backendPath, Literal.FEATURES_PATH));\n            return pathArray;\n        }\n    };\n\nmodule.exports = ModuleBase;\n"],"mappings":"AAAA;;;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,gBAAD,CAAvB;;AACA,MAAM;EAAEE;AAAF,IAAyBF,OAAO,CAAC,iBAAD,CAAtC;;AAEA,MAAMG,UAAU,GAAIC,IAAD,IACf,cAAcA,IAAd,CAAmB;EASfC,WAAW,CAACC,MAAD,EAASC,IAAT,EAAeC,OAAf,EAAwBC,OAAxB,EAAiC;IACxC,MACIF,IADJ,EAEIG,MAAM,CAACC,MAAP,CACI;MACIC,WAAW,EAAEJ,OADjB;MAEIK,UAAU,EAAEd,IAAI,CAACe,IAAL,CAAUN,OAAV,EAAmBP,OAAO,CAACc,mBAA3B;IAFhB,CADJ,EAKIN,OALJ,CAFJ;IAeA,KAAKH,MAAL,GAAcA,MAAd;IAMA,KAAKU,QAAL,GAAgB,KAAhB;IAMA,KAAKC,WAAL,GAAmB,KAAKC,cAAL,CAAoB,KAAKT,OAAL,CAAaQ,WAAb,IAA4Bf,kBAAhD,CAAnB;EACH;;EAODiB,UAAU,CAACZ,IAAD,EAAOa,iBAAP,EAA0B;IAChC,OAAO,MAAMD,UAAN,CAAiBZ,IAAjB,KAA2B,CAACa,iBAAD,IAAsB,KAAKd,MAAL,CAAYa,UAAZ,CAAuBZ,IAAvB,CAAxD;EACH;;EAODc,OAAO,CAACC,OAAD,EAAUF,iBAAV,EAA6B;IAChC,OAAO,MAAMC,OAAN,CAAcC,OAAd,KAA2B,CAACF,iBAAD,IAAsB,KAAKd,MAAL,CAAYe,OAAZ,CAAoBC,OAApB,CAAxD;EACH;;EAMDtB,OAAO,CAACuB,YAAD,EAAe;IAClB,IAAIC,OAAO,GAAGzB,IAAI,CAACe,IAAL,CAAU,KAAKG,WAAf,EAA4BM,YAA5B,CAAd;IACA,OAAOvB,OAAO,CAACwB,OAAD,CAAd;EACH;;EAMDC,cAAc,CAACC,OAAD,EAAUH,YAAV,EAAwB;IAClC,OAAO,KAAKjB,MAAL,CAAYmB,cAAZ,CAA2BC,OAA3B,EAAoCH,YAApC,CAAP;EACH;;EASDI,GAAG,CAACC,KAAD,EAAQC,OAAR,EAAiB,GAAGC,IAApB,EAA0B;IACzB,IAAI,KAAKrB,OAAL,CAAasB,cAAjB,EAAiC;MAC7BF,OAAO,GAAG,MAAM,KAAKtB,IAAX,GAAkB,IAAlB,GAAyBsB,OAAnC;IACH;;IAED,IAAI,KAAKG,MAAT,EAAiB;MACb,KAAKA,MAAL,CAAYL,GAAZ,CAAgBC,KAAhB,EAAuBC,OAAvB,EAAgC,GAAGC,IAAnC;IACH,CAFD,MAEO;MACH,KAAKxB,MAAL,CAAYqB,GAAZ,CAAgBC,KAAhB,EAAuBC,OAAvB,EAAgC,GAAGC,IAAnC;IACH;;IAED,OAAO,IAAP;EACH;;EAEDG,uBAAuB,GAAG;IACtB,IAAIC,SAAS,GAAG,MAAMD,uBAAN,EAAhB;;IACAC,SAAS,CAACC,MAAV,CAAiB,CAAjB,EAAoB,CAApB,EAAuBpC,IAAI,CAACqC,OAAL,CAAa,KAAKnB,WAAlB,EAA+BhB,OAAO,CAACoC,aAAvC,CAAvB;IACA,OAAOH,SAAP;EACH;;AApGc,CADvB;;AAwGAI,MAAM,CAACC,OAAP,GAAiBpC,UAAjB"}