{"version":3,"sources":["../../src/appFeatures/socketServer.js"],"names":["path","require","_","url","urlUtil","text","Feature","Enums","InvalidConfiguration","DEFAULT_CONTROLLER_PATH","loadEventHandler","appModule","namespace","controllerBasePath","handlerName","isMiddleware","pos","lastIndexOf","controller","substr","action","controllerPath","resolve","ctrl","middlewareHandler","startSocketServer","config","SocketServer","tryRequire","port","logger","wsPath","options","getService","log","args","io","standalone","endpointPath","join","route","ensureStartsWith","serviceTag","hasService","i","server","httpServer","on","socket","endpoint","id","handshake","controllersPath","backendPath","middlewares","use","middlewareName","isEmpty","routes","forOwn","info","name","namespaceChannel","of","m","Array","isArray","forEach","eventHandlers","rpcControllerPath","events","handler","event","Object","keys","ctx","onDisconnect","catch","error","message","data","cb","then","onConnect","listen","registerService","module","exports","type","PLUGIN","load_","servers"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/**\n * Socket based Rpc Server\n * @module Feature_SocketServer\n * \n * middleware: (packet, next) => {}\n */\n\nconst path = require('path');\nconst { _, url: urlUtil, text } = require('@genx/july');\nconst { Feature } = require('..').Enums;\nconst { InvalidConfiguration } = require('@genx/error');\n\nconst DEFAULT_CONTROLLER_PATH = 'events';\n\nfunction loadEventHandler(appModule, namespace, controllerBasePath, handlerName, isMiddleware = false) {\n    let pos = handlerName.lastIndexOf('.');\n    if (pos < 0) {\n        if (isMiddleware) {\n            throw new InvalidConfiguration(\n                `Invalid middleware reference: ${handlerName}`,\n                appModule,\n                namespace ? `socketServer.routes[\"${namespace}\"].middlewares` : 'socketServer.middlewares'\n            );\n        } else {\n            throw new InvalidConfiguration(\n                `Invalid event handler reference: ${handlerName}`,\n                appModule,\n                `socketServer.routes[\"${namespace}\"].events`\n            );\n        }\n    }\n\n    let controller = handlerName.substr(0, pos);\n    let action = handlerName.substr(pos + 1);\n\n    let controllerPath = path.resolve(controllerBasePath, controller + '.js');\n    let ctrl = require(controllerPath);\n    \n    let middlewareHandler = ctrl[action];\n    if (typeof middlewareHandler !== 'function') {\n        if (isMiddleware) {\n            throw new InvalidConfiguration(\n                `Middleware function not found: ${handlerName}`,\n                appModule,\n                namespace ? `socketServer.routes[\"${namespace}\"].middlewares` : 'socketServer.middlewares'\n            );\n        } else {\n            throw new InvalidConfiguration(\n                `Event handler function not found: ${handlerName}`,\n                appModule,\n                `socketServer.routes[\"${namespace}\"].events`\n            );\n        }\n    }\n\n    return middlewareHandler;\n}\n\nfunction startSocketServer(appModule, config) {\n    const SocketServer = appModule.tryRequire('socket.io');\n\n    let { port, logger, path: wsPath, ...options } = config;\n\n    if (logger && typeof logger === 'string') {\n        logger = appModule.getService('logger.' + logger);\n    }\n\n    function log(...args) {\n        logger && logger.log(...args);\n    }\n\n    let io, standalone = false;\n\n    let endpointPath = wsPath ? urlUtil.join(appModule.route, wsPath) : appModule.route;\n    endpointPath = text.ensureStartsWith(endpointPath, '/');\n\n    let serviceTag = port ? `socketServer:${port}${endpointPath}` : `socketServer:${endpointPath}`;\n\n    if (appModule.hasService(serviceTag)) {\n        throw new InvalidConfiguration(\n            'Socket server path or port conflict.',\n            appModule,\n            `socketServer[${i}].(path|port)`\n        );\n    }            \n\n    options.path = endpointPath;\n\n    if (port) {\n        io = new SocketServer(options);\n        standalone = true;\n        appModule.log('verbose', `A standalone socket server is listening at [port=${port}, path=${endpointPath}].`);        \n    } else {\n        io = new SocketServer(appModule.server.httpServer, options);\n        port = appModule.server.port;\n        appModule.log('verbose', `A socket server is listening at [path=${endpointPath}].`);        \n    }\n\n    io.on('connection', socket => {\n        log('info', 'client connect', {\n            endpoint: endpointPath,\n            port,\n            id: socket.id,\n            ...socket.handshake\n        });\n    });\n\n    let controllersPath = path.resolve(appModule.backendPath, config.controllersPath || DEFAULT_CONTROLLER_PATH);\n\n    if (config.middlewares) {\n        io.use(loadEventHandler(appModule, null, controllersPath, middlewareName, true));\n    }\n\n    if (_.isEmpty(config.routes)) {\n        throw new InvalidConfiguration(\n            'Missing routes config.',\n            appModule,\n            'socketServer.routes'\n        );\n    }        \n\n    _.forOwn(config.routes, (info, name) => {\n        name = text.ensureStartsWith(name, '/');\n\n        let namespaceChannel = io.of(name);\n\n        if (info.middlewares) {\n            let m = Array.isArray(info.middlewares) ? info.middlewares : [ info.middlewares ];\n            m.forEach(middlewareName => {\n                namespaceChannel.use(loadEventHandler(appModule, name, controllersPath, middlewareName, true));\n            });\n        }\n\n        let eventHandlers;\n\n        if (info.controller) {                \n            let rpcControllerPath = path.resolve(controllersPath, info.controller + '.js');\n            eventHandlers = require(rpcControllerPath);\n\n            appModule.log('verbose', `[${serviceTag}]Controller \"${info.controller}\" is attached for namespace \"${name}\".`);\n        } \n        \n        if (info.events) {\n            eventHandlers = {};\n\n            _.forOwn(info.events, (handler, event) => {\n                eventHandlers[event] = loadEventHandler(appModule, name, controllersPath, handler);                    \n            });\n\n            appModule.log('verbose', `[${serviceTag}]Event handlers are attached for namespace \"${name}\".`, {\n                events: Object.keys(eventHandlers)\n            });\n        }\n\n        namespaceChannel.on('connect', function (socket) {\n            let ctx = { appModule, socket };\n\n            socket.on('disconnect', () => {\n                log('verbose', 'namespace disconnect', { \n                    endpoint: endpointPath,\n                    port,\n                    id: socket.id, \n                    namespace: name \n                });\n\n                if (info.onDisconnect) {\n                    loadEventHandler(appModule, name, controllersPath, info.onDisconnect)(ctx).catch(error => log('error', error.message));            \n                }     \n            });\n\n            log('verbose', 'namespace connect', { \n                endpoint: endpointPath,\n                port,\n                id: socket.id, \n                namespace: name \n            });           \n\n            //Register event handlers\n            eventHandlers && _.forOwn(eventHandlers, (handler, event) => {\n                socket.on(event, (data, cb) => handler(ctx, data).then(cb));\n            });                \n\n            if (info.onConnect) {\n                loadEventHandler(appModule, name, controllersPath, info.onConnect)(ctx).catch(error => log('error', error.message));            \n            }            \n        });\n    });\n\n    if (standalone) {\n        io.listen(config.port);\n    }\n\n    appModule.registerService(serviceTag, io);\n\n    return io;\n}\n\nmodule.exports = {\n\n    /**\n     * This feature is loaded at plugin stage\n     * @member {string}\n     */\n    type: Feature.PLUGIN,\n\n    /**\n     * The socket server options.\n     * @typedef {Object} ServerOptions\n     * @property {string} [path=/socket.io] - name of the path to capture\n     * @property {boolean} [serveClient=true] - whether to serve the client files\n     * @property {Adapter} adapter - the adapter to use. Defaults to an instance of the Adapter that ships with socket.io which is memory based. See socket.io-adapter\n     * @property {string} origins - the allowed origins\n     * @property {Parser} parser - the parser to use. Defaults to an instance of the Parser that ships with socket.io. See socket.io-parser\n     * @see {@link https://socket.io/docs/server-api/} for more options\n     */\n\n    /**\n     * Load the rpc Server\n     * @param {AppModule} appModule - The app module object\n     * @param {ServerOptions[]} servers - Rpc server config\n     */\n    load_: (appModule, servers) => {        \n\n        if (Array.isArray(servers)) {\n            return servers.forEach(server => startSocketServer(appModule, server));            \n        }\n\n        let io = startSocketServer(appModule, servers);\n\n        //default socket server\n        appModule.registerService('socketServer', io);\n    }\n};"],"file":"socketServer.js"}