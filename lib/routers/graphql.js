"use strict";

require("source-map-support/register");

const path = require('path');

const {
  InvalidConfiguration
} = require('@genx/error');

const Koa = require('koa');

const mount = require('koa-mount');

module.exports = async (app, baseRoute, options) => {
  const graphqlHTTP = app.tryRequire('koa-graphql');
  const {
    middlewares,
    schemaProvider,
    ...graphqlOpts
  } = options;

  if (!schemaProvider) {
    throw new InvalidConfiguration('Missing schemaProvider config.', app, `routing.${baseRoute}.graphql.schemaProvider`);
  }

  const schemaFactory = require(path.resolve(app.backendPath, schemaProvider));

  const schemaObj = await schemaFactory(app);

  if (!schemaObj.schema) {
    throw new InvalidConfiguration('The object returned from schemaProvider doesnot contain the schema body.', app, `routing.${baseRoute}.graphql.schemaProvider`);
  }

  graphqlOpts.schema = schemaObj.schema;

  if (schemaObj.rootValue) {
    graphqlOpts.rootValue = schemaObj.rootValue;
  }

  let router = new Koa();

  if (middlewares) {
    app.useMiddlewares(router, middlewares);
  }

  router.use(mount('/', graphqlHTTP(graphqlOpts)));
  app.mountRouter(baseRoute, router);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXJzL2dyYXBocWwuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJJbnZhbGlkQ29uZmlndXJhdGlvbiIsIktvYSIsIm1vdW50IiwibW9kdWxlIiwiZXhwb3J0cyIsImFwcCIsImJhc2VSb3V0ZSIsIm9wdGlvbnMiLCJncmFwaHFsSFRUUCIsInRyeVJlcXVpcmUiLCJtaWRkbGV3YXJlcyIsInNjaGVtYVByb3ZpZGVyIiwiZ3JhcGhxbE9wdHMiLCJzY2hlbWFGYWN0b3J5IiwicmVzb2x2ZSIsImJhY2tlbmRQYXRoIiwic2NoZW1hT2JqIiwic2NoZW1hIiwicm9vdFZhbHVlIiwicm91dGVyIiwidXNlTWlkZGxld2FyZXMiLCJ1c2UiLCJtb3VudFJvdXRlciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUEyQkQsT0FBTyxDQUFDLGFBQUQsQ0FBeEM7O0FBQ0EsTUFBTUUsR0FBRyxHQUFHRixPQUFPLENBQUMsS0FBRCxDQUFuQjs7QUFDQSxNQUFNRyxLQUFLLEdBQUdILE9BQU8sQ0FBQyxXQUFELENBQXJCOztBQXlCQUksTUFBTSxDQUFDQyxPQUFQLEdBQWlCLE9BQU9DLEdBQVAsRUFBWUMsU0FBWixFQUF1QkMsT0FBdkIsS0FBbUM7QUFDaEQsUUFBTUMsV0FBVyxHQUFHSCxHQUFHLENBQUNJLFVBQUosQ0FBZSxhQUFmLENBQXBCO0FBRUEsUUFBTTtBQUFFQyxJQUFBQSxXQUFGO0FBQWVDLElBQUFBLGNBQWY7QUFBK0IsT0FBR0M7QUFBbEMsTUFBa0RMLE9BQXhEOztBQUVBLE1BQUksQ0FBQ0ksY0FBTCxFQUFxQjtBQUNqQixVQUFNLElBQUlYLG9CQUFKLENBQ0YsZ0NBREUsRUFFRkssR0FGRSxFQUdELFdBQVVDLFNBQVUseUJBSG5CLENBQU47QUFLSDs7QUFFRCxRQUFNTyxhQUFhLEdBQUdkLE9BQU8sQ0FBQ0QsSUFBSSxDQUFDZ0IsT0FBTCxDQUFhVCxHQUFHLENBQUNVLFdBQWpCLEVBQThCSixjQUE5QixDQUFELENBQTdCOztBQUNBLFFBQU1LLFNBQVMsR0FBRyxNQUFNSCxhQUFhLENBQUNSLEdBQUQsQ0FBckM7O0FBRUEsTUFBSSxDQUFDVyxTQUFTLENBQUNDLE1BQWYsRUFBdUI7QUFDbkIsVUFBTSxJQUFJakIsb0JBQUosQ0FDRiwwRUFERSxFQUVGSyxHQUZFLEVBR0QsV0FBVUMsU0FBVSx5QkFIbkIsQ0FBTjtBQUtIOztBQUVETSxFQUFBQSxXQUFXLENBQUNLLE1BQVosR0FBcUJELFNBQVMsQ0FBQ0MsTUFBL0I7O0FBQ0EsTUFBSUQsU0FBUyxDQUFDRSxTQUFkLEVBQXlCO0FBQ3JCTixJQUFBQSxXQUFXLENBQUNNLFNBQVosR0FBd0JGLFNBQVMsQ0FBQ0UsU0FBbEM7QUFDSDs7QUFFRCxNQUFJQyxNQUFNLEdBQUcsSUFBSWxCLEdBQUosRUFBYjs7QUFFQSxNQUFJUyxXQUFKLEVBQWlCO0FBQ2JMLElBQUFBLEdBQUcsQ0FBQ2UsY0FBSixDQUFtQkQsTUFBbkIsRUFBMkJULFdBQTNCO0FBQ0g7O0FBRURTLEVBQUFBLE1BQU0sQ0FBQ0UsR0FBUCxDQUFXbkIsS0FBSyxDQUFDLEdBQUQsRUFBTU0sV0FBVyxDQUFDSSxXQUFELENBQWpCLENBQWhCO0FBQ0FQLEVBQUFBLEdBQUcsQ0FBQ2lCLFdBQUosQ0FBZ0JoQixTQUFoQixFQUEyQmEsTUFBM0I7QUFDSCxDQXJDRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgeyBJbnZhbGlkQ29uZmlndXJhdGlvbiB9ID0gcmVxdWlyZSgnQGdlbngvZXJyb3InKTtcbmNvbnN0IEtvYSA9IHJlcXVpcmUoJ2tvYScpO1xuY29uc3QgbW91bnQgPSByZXF1aXJlKCdrb2EtbW91bnQnKTtcblxuLyoqXG4gKiBHcmFwaFFMIHJvdXRlci5cbiAqIEBtb2R1bGUgUm91dGVyX0dyYXBoUUxcbiAqL1xuXG4vKipcbiAqIENyZWF0ZSBhIEdyYXBoUUwgcm91dGVyLlxuICogQHBhcmFtIHsqfSBhcHAgXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVJvdXRlIFxuICogQHBhcmFtIHtvYmplY3RzfSBvcHRpb25zIFxuICogQHByb3BlcnR5IHtzdHJpbmd9IG9wdGlvbnMuc2NoZW1hXG4gKiBAcHJvcGVydHkge29iamVjdHxhcnJheX0gW29wdGlvbnMubWlkZGxld2FyZXNdXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtvcHRpb25zLmdyYXBoaXFsXVxuICogQGV4YW1wbGVcbiAqICAnPGJhc2UgcGF0aD4nOiB7XG4gKiAgICAgIGdyYXBocWw6IHsgICAgICAgICAgXG4gKiAgICAgICAgICBtaWRkbGV3YXJlczoge30sXG4gKiAgICAgICAgICBzY2hlbWE6ICdncmFwaHFsL3NjaGVtYScsXG4gKiAgICAgICAgICByb290VmFsdWU6ICcnLFxuICogICAgICAgICAgZ3JhcGhpcWw6IHRydWVcbiAqICAgICAgfVxuICogIH1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBhc3luYyAoYXBwLCBiYXNlUm91dGUsIG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCBncmFwaHFsSFRUUCA9IGFwcC50cnlSZXF1aXJlKCdrb2EtZ3JhcGhxbCcpOyAgICAgICAgXG5cbiAgICBjb25zdCB7IG1pZGRsZXdhcmVzLCBzY2hlbWFQcm92aWRlciwgLi4uZ3JhcGhxbE9wdHMgfSA9IG9wdGlvbnM7XG5cbiAgICBpZiAoIXNjaGVtYVByb3ZpZGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICdNaXNzaW5nIHNjaGVtYVByb3ZpZGVyIGNvbmZpZy4nLFxuICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgYHJvdXRpbmcuJHtiYXNlUm91dGV9LmdyYXBocWwuc2NoZW1hUHJvdmlkZXJgXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3Qgc2NoZW1hRmFjdG9yeSA9IHJlcXVpcmUocGF0aC5yZXNvbHZlKGFwcC5iYWNrZW5kUGF0aCwgc2NoZW1hUHJvdmlkZXIpKTtcbiAgICBjb25zdCBzY2hlbWFPYmogPSBhd2FpdCBzY2hlbWFGYWN0b3J5KGFwcCk7XG5cbiAgICBpZiAoIXNjaGVtYU9iai5zY2hlbWEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgJ1RoZSBvYmplY3QgcmV0dXJuZWQgZnJvbSBzY2hlbWFQcm92aWRlciBkb2Vzbm90IGNvbnRhaW4gdGhlIHNjaGVtYSBib2R5LicsXG4gICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICBgcm91dGluZy4ke2Jhc2VSb3V0ZX0uZ3JhcGhxbC5zY2hlbWFQcm92aWRlcmBcbiAgICAgICAgKTtcbiAgICB9XG4gXG4gICAgZ3JhcGhxbE9wdHMuc2NoZW1hID0gc2NoZW1hT2JqLnNjaGVtYTtcbiAgICBpZiAoc2NoZW1hT2JqLnJvb3RWYWx1ZSkge1xuICAgICAgICBncmFwaHFsT3B0cy5yb290VmFsdWUgPSBzY2hlbWFPYmoucm9vdFZhbHVlO1xuICAgIH1cbiAgICBcbiAgICBsZXQgcm91dGVyID0gbmV3IEtvYSgpO1xuXG4gICAgaWYgKG1pZGRsZXdhcmVzKSB7XG4gICAgICAgIGFwcC51c2VNaWRkbGV3YXJlcyhyb3V0ZXIsIG1pZGRsZXdhcmVzKTtcbiAgICB9XG5cbiAgICByb3V0ZXIudXNlKG1vdW50KCcvJywgZ3JhcGhxbEhUVFAoZ3JhcGhxbE9wdHMpKSk7XG4gICAgYXBwLm1vdW50Um91dGVyKGJhc2VSb3V0ZSwgcm91dGVyKTtcbn07Il19