"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  InvalidConfiguration
} = require('@genx/error');

const Literal = require('../enum/Literal');

const httpMethod = require('./httpMethod');

exports.requireFeatures = function (features, app, middleware) {
  let hasNotEnabled = _.find(_.castArray(features), feature => !app.enabled(feature));

  if (hasNotEnabled) {
    throw new InvalidConfiguration(`Middleware "${middleware}" requires "${hasNotEnabled}" feature to be enabled.`, app, `middlewares.${middleware}`);
  }
};

exports.httpMethod = httpMethod;

exports.hasMethod = function hasMethod(obj, name) {
  const desc = Object.getOwnPropertyDescriptor(obj, name);
  let has = !!desc && typeof desc.value === 'function';
  if (has) return true;
  let proto = Object.getPrototypeOf(obj);
  if (proto === Object.prototype) return has;
  return hasMethod(proto, name);
};

exports.defaultBackendPath = process.env.NODE_RT && process.env.NODE_RT === 'babel' ? Literal.BACKEND_SRC_PATH : Literal.BACKEND_PATH;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9IZWxwZXJzLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJMaXRlcmFsIiwiaHR0cE1ldGhvZCIsImV4cG9ydHMiLCJyZXF1aXJlRmVhdHVyZXMiLCJmZWF0dXJlcyIsImFwcCIsIm1pZGRsZXdhcmUiLCJoYXNOb3RFbmFibGVkIiwiZmluZCIsImNhc3RBcnJheSIsImZlYXR1cmUiLCJlbmFibGVkIiwiaGFzTWV0aG9kIiwib2JqIiwibmFtZSIsImRlc2MiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJoYXMiLCJ2YWx1ZSIsInByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJkZWZhdWx0QmFja2VuZFBhdGgiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9SVCIsIkJBQ0tFTkRfU1JDX1BBVEgiLCJCQUNLRU5EX1BBVEgiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQVFDLE9BQU8sQ0FBQyxVQUFELENBQXJCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUEyQkQsT0FBTyxDQUFDLGFBQUQsQ0FBeEM7O0FBQ0EsTUFBTUUsT0FBTyxHQUFHRixPQUFPLENBQUMsaUJBQUQsQ0FBdkI7O0FBQ0EsTUFBTUcsVUFBVSxHQUFHSCxPQUFPLENBQUMsY0FBRCxDQUExQjs7QUFFQUksT0FBTyxDQUFDQyxlQUFSLEdBQTBCLFVBQVVDLFFBQVYsRUFBb0JDLEdBQXBCLEVBQXlCQyxVQUF6QixFQUFxQztBQUMzRCxNQUFJQyxhQUFhLEdBQUdWLENBQUMsQ0FBQ1csSUFBRixDQUFPWCxDQUFDLENBQUNZLFNBQUYsQ0FBWUwsUUFBWixDQUFQLEVBQThCTSxPQUFPLElBQUksQ0FBQ0wsR0FBRyxDQUFDTSxPQUFKLENBQVlELE9BQVosQ0FBMUMsQ0FBcEI7O0FBRUEsTUFBSUgsYUFBSixFQUFtQjtBQUNmLFVBQU0sSUFBSVIsb0JBQUosQ0FDRCxlQUFjTyxVQUFXLGVBQWNDLGFBQWMsMEJBRHBELEVBRUZGLEdBRkUsRUFHRCxlQUFjQyxVQUFXLEVBSHhCLENBQU47QUFLSDtBQUNKLENBVkQ7O0FBZUFKLE9BQU8sQ0FBQ0QsVUFBUixHQUFxQkEsVUFBckI7O0FBRUFDLE9BQU8sQ0FBQ1UsU0FBUixHQUFvQixTQUFTQSxTQUFULENBQW1CQyxHQUFuQixFQUF3QkMsSUFBeEIsRUFBOEI7QUFDOUMsUUFBTUMsSUFBSSxHQUFHQyxNQUFNLENBQUNDLHdCQUFQLENBQWdDSixHQUFoQyxFQUFxQ0MsSUFBckMsQ0FBYjtBQUNBLE1BQUlJLEdBQUcsR0FBRyxDQUFDLENBQUNILElBQUYsSUFBVSxPQUFPQSxJQUFJLENBQUNJLEtBQVosS0FBc0IsVUFBMUM7QUFDQSxNQUFJRCxHQUFKLEVBQVMsT0FBTyxJQUFQO0FBRVQsTUFBSUUsS0FBSyxHQUFHSixNQUFNLENBQUNLLGNBQVAsQ0FBc0JSLEdBQXRCLENBQVo7QUFDQSxNQUFJTyxLQUFLLEtBQUtKLE1BQU0sQ0FBQ00sU0FBckIsRUFBZ0MsT0FBT0osR0FBUDtBQUVoQyxTQUFPTixTQUFTLENBQUNRLEtBQUQsRUFBUU4sSUFBUixDQUFoQjtBQUNILENBVEQ7O0FBY0FaLE9BQU8sQ0FBQ3FCLGtCQUFSLEdBQThCQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsT0FBWixJQUF1QkYsT0FBTyxDQUFDQyxHQUFSLENBQVlDLE9BQVosS0FBd0IsT0FBaEQsR0FBMkQxQixPQUFPLENBQUMyQixnQkFBbkUsR0FBc0YzQixPQUFPLENBQUM0QixZQUEzSCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB7IF8gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IEludmFsaWRDb25maWd1cmF0aW9uIH0gPSByZXF1aXJlKCdAZ2VueC9lcnJvcicpO1xuY29uc3QgTGl0ZXJhbCA9IHJlcXVpcmUoJy4uL2VudW0vTGl0ZXJhbCcpO1xuY29uc3QgaHR0cE1ldGhvZCA9IHJlcXVpcmUoJy4vaHR0cE1ldGhvZCcpO1xuXG5leHBvcnRzLnJlcXVpcmVGZWF0dXJlcyA9IGZ1bmN0aW9uIChmZWF0dXJlcywgYXBwLCBtaWRkbGV3YXJlKSB7XG4gICAgbGV0IGhhc05vdEVuYWJsZWQgPSBfLmZpbmQoXy5jYXN0QXJyYXkoZmVhdHVyZXMpLCBmZWF0dXJlID0+ICFhcHAuZW5hYmxlZChmZWF0dXJlKSk7XG5cbiAgICBpZiAoaGFzTm90RW5hYmxlZCkge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICBgTWlkZGxld2FyZSBcIiR7bWlkZGxld2FyZX1cIiByZXF1aXJlcyBcIiR7aGFzTm90RW5hYmxlZH1cIiBmZWF0dXJlIHRvIGJlIGVuYWJsZWQuYCxcbiAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgIGBtaWRkbGV3YXJlcy4ke21pZGRsZXdhcmV9YFxuICAgICAgICApO1xuICAgIH1cbn07XG5cbi8qKlxuICogSHR0cCBtZXRob2QgZGVjb3JhdG9yIGZvciBtb2R1bGUgY29udHJvbGxlclxuICovXG5leHBvcnRzLmh0dHBNZXRob2QgPSBodHRwTWV0aG9kO1xuXG5leHBvcnRzLmhhc01ldGhvZCA9IGZ1bmN0aW9uIGhhc01ldGhvZChvYmosIG5hbWUpIHtcbiAgICBjb25zdCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIG5hbWUpOyAgICBcbiAgICBsZXQgaGFzID0gISFkZXNjICYmIHR5cGVvZiBkZXNjLnZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgIGlmIChoYXMpIHJldHVybiB0cnVlO1xuXG4gICAgbGV0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaik7XG4gICAgaWYgKHByb3RvID09PSBPYmplY3QucHJvdG90eXBlKSByZXR1cm4gaGFzO1xuXG4gICAgcmV0dXJuIGhhc01ldGhvZChwcm90bywgbmFtZSk7XG59O1xuXG4vKipcbiAqIHdoZW4gcnVubmluZyB3aXRoIFtOT0RFX1JUPWJhYmVsXSwgZGlyZWN0bHkgdXNlIHNvdXJjZSBmaWxlc1xuICovXG5leHBvcnRzLmRlZmF1bHRCYWNrZW5kUGF0aCA9IChwcm9jZXNzLmVudi5OT0RFX1JUICYmIHByb2Nlc3MuZW52Lk5PREVfUlQgPT09ICdiYWJlbCcpID8gTGl0ZXJhbC5CQUNLRU5EX1NSQ19QQVRIIDogTGl0ZXJhbC5CQUNLRU5EX1BBVEg7Il19