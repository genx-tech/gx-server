"use strict";

require("source-map-support/register");

const path = require("path");

const {
  _,
  url: urlUtil,
  text
} = require("@genx/july");

const Literal = require("../enum/Literal");

const Router = require("@koa/router");

const {
  InvalidConfiguration
} = require("@genx/error");

module.exports = function (app, baseRoute, moduleItem) {
  let controllerPath = path.join(app.backendPath, Literal.CONTROLLERS_PATH);

  if (typeof moduleItem === "string") {
    moduleItem = {
      controller: moduleItem
    };
  }

  let currentPrefix = urlUtil.join(baseRoute, moduleItem.route || "/");
  let router = currentPrefix === "/" ? new Router() : new Router({
    prefix: text.dropIfEndsWith(currentPrefix, "/")
  });

  if (moduleItem.middlewares) {
    app.useMiddlewares(router, moduleItem.middlewares);
  }

  const controllers = _.castArray(moduleItem.controller);

  controllers.forEach(moduleController => {
    let controllerFile = path.join(controllerPath, moduleController + ".js");
    let controller;
    controller = require(controllerFile);
    let isController = false;

    if (typeof controller === "function") {
      controller = new controller(app);
      isController = true;
    }

    for (let actionName in controller) {
      let action = controller[actionName];
      if (typeof action !== "function" || !action.__metaHttpMethod) continue;
      const method = action.__metaHttpMethod;
      let subRoute = text.ensureStartsWith(action.__metaRoute || _.kebabCase(actionName), "/");
      let bindAction;

      if (isController) {
        bindAction = action.bind(controller);
      } else {
        bindAction = action;
      }

      if (!Literal.ALLOWED_HTTP_METHODS.has(method)) {
        throw new InvalidConfiguration("Unsupported http method: " + method, app, `routing.${baseRoute}.modules ${moduleItem.controller}.${actionName}`);
      }

      app.addRoute(router, method, subRoute, action.__metaMiddlewares ? action.__metaMiddlewares.concat([bindAction]) : bindAction);
    }
  });
  app.addRouter(router);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXJzL21vZHVsZS5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIl8iLCJ1cmwiLCJ1cmxVdGlsIiwidGV4dCIsIkxpdGVyYWwiLCJSb3V0ZXIiLCJJbnZhbGlkQ29uZmlndXJhdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcHAiLCJiYXNlUm91dGUiLCJtb2R1bGVJdGVtIiwiY29udHJvbGxlclBhdGgiLCJqb2luIiwiYmFja2VuZFBhdGgiLCJDT05UUk9MTEVSU19QQVRIIiwiY29udHJvbGxlciIsImN1cnJlbnRQcmVmaXgiLCJyb3V0ZSIsInJvdXRlciIsInByZWZpeCIsImRyb3BJZkVuZHNXaXRoIiwibWlkZGxld2FyZXMiLCJ1c2VNaWRkbGV3YXJlcyIsImNvbnRyb2xsZXJzIiwiY2FzdEFycmF5IiwiZm9yRWFjaCIsIm1vZHVsZUNvbnRyb2xsZXIiLCJjb250cm9sbGVyRmlsZSIsImlzQ29udHJvbGxlciIsImFjdGlvbk5hbWUiLCJhY3Rpb24iLCJfX21ldGFIdHRwTWV0aG9kIiwibWV0aG9kIiwic3ViUm91dGUiLCJlbnN1cmVTdGFydHNXaXRoIiwiX19tZXRhUm91dGUiLCJrZWJhYkNhc2UiLCJiaW5kQWN0aW9uIiwiYmluZCIsIkFMTE9XRURfSFRUUF9NRVRIT0RTIiwiaGFzIiwiYWRkUm91dGUiLCJfX21ldGFNaWRkbGV3YXJlcyIsImNvbmNhdCIsImFkZFJvdXRlciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQSxHQUFHLEVBQUVDLE9BQVY7QUFBbUJDLEVBQUFBO0FBQW5CLElBQTRCSixPQUFPLENBQUMsWUFBRCxDQUF6Qzs7QUFDQSxNQUFNSyxPQUFPLEdBQUdMLE9BQU8sQ0FBQyxpQkFBRCxDQUF2Qjs7QUFDQSxNQUFNTSxNQUFNLEdBQUdOLE9BQU8sQ0FBQyxh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QURKLEVBRUljLE1BRkosRUFHSUMsUUFISixFQUlJSCxNQUFNLENBQUNZLGlCQUFQLEdBQTJCWixNQUFNLENBQUNZLGlCQUFQLENBQXlCQyxNQUF6QixDQUFnQyxDQUFDTixVQUFELENBQWhDLENBQTNCLEdBQTJFQSxVQUovRTtBQU1IO0FBQ0osR0ExQ0Q7QUE0Q0E3QixFQUFBQSxHQUFHLENBQUNvQyxTQUFKLENBQWMxQixNQUFkO0FBQ0gsQ0FqRUQiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuY29uc3QgeyBfLCB1cmw6IHVybFV0aWwsIHRleHQgfSA9IHJlcXVpcmUoXCJAZ2VueC9qdWx5XCIpO1xuY29uc3QgTGl0ZXJhbCA9IHJlcXVpcmUoXCIuLi9lbnVtL0xpdGVyYWxcIik7XG5jb25zdCBSb3V0ZXIgPSByZXF1aXJlKFwiQGtvYS9yb3V0ZXJcIik7XG5jb25zdCB7IEludmFsaWRDb25maWd1cmF0aW9uIH0gPSByZXF1aXJlKFwiQGdlbngvZXJyb3JcIik7XG5cbi8qKlxuICogTW9kdWxlIHJvdXRlciBmb3IgbW91bnRpbmcgYSBzcGVjaWZpYyBjb250cm9sbGVyLlxuICogQG1vZHVsZSBSb3V0ZXJfTW9kdWxlXG4gKi9cblxuLyoqXG4gKiBDcmVhdGUgYSBtb2R1bGUtYmFzZWQgcm91dGVyLlxuICogQHBhcmFtIHtSb3V0YWJsZX0gYXBwXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVJvdXRlXG4gKiBAcGFyYW0geyp9IG1vZHVsZUl0ZW1cbiAqIEBleGFtcGxlXG4gKiAgICc8YmFzZSBwYXRoPic6IHtcbiAqICAgICAgIG1vZHVsZToge1xuICogICAgICAgICAgIG1pZGRsZXdhcmVzOlxuICogICAgICAgICAgIGNvbnRyb2xsZXI6XG4gKiAgICAgICB9XG4gKiAgIH1cbiAqXG4gKiAgICc8YmFzZSBwYXRoPic6IHtcbiAqICAgICAgIG1vZHVsZTogXCJjb250cm9sbGVyXCJcbiAqICAgfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcHAsIGJhc2VSb3V0ZSwgbW9kdWxlSXRlbSkge1xuICAgIGxldCBjb250cm9sbGVyUGF0aCA9IHBhdGguam9pbihhcHAuYmFja2VuZFBhdGgsIExpdGVyYWwuQ09OVFJPTExFUlNfUEFUSCk7XG5cbiAgICBpZiAodHlwZW9mIG1vZHVsZUl0ZW0gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgLy8gWyAnY29udHJvbGxlck5hbWUnIF1cbiAgICAgICAgbW9kdWxlSXRlbSA9IHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IG1vZHVsZUl0ZW0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgbGV0IGN1cnJlbnRQcmVmaXggPSB1cmxVdGlsLmpvaW4oYmFzZVJvdXRlLCBtb2R1bGVJdGVtLnJvdXRlIHx8IFwiL1wiKTtcbiAgICBsZXQgcm91dGVyID0gY3VycmVudFByZWZpeCA9PT0gXCIvXCIgPyBuZXcgUm91dGVyKCkgOiBuZXcgUm91dGVyKHsgcHJlZml4OiB0ZXh0LmRyb3BJZkVuZHNXaXRoKGN1cnJlbnRQcmVmaXgsIFwiL1wiKSB9KTtcblxuICAgIGlmIChtb2R1bGVJdGVtLm1pZGRsZXdhcmVzKSB7XG4gICAgICAgIC8vbW9kdWxlLXdpZGUgbWlkZGxld2FyZXNcbiAgICAgICAgYXBwLnVzZU1pZGRsZXdhcmVzKHJvdXRlciwgbW9kdWxlSXRlbS5taWRkbGV3YXJlcyk7XG4gICAgfVxuXG4gICAgY29uc3QgY29udHJvbGxlcnMgPSBfLmNhc3RBcnJheShtb2R1bGVJdGVtLmNvbnRyb2xsZXIpO1xuXG4gICAgY29udHJvbGxlcnMuZm9yRWFjaCgobW9kdWxlQ29udHJvbGxlcikgPT4ge1xuICAgICAgICBsZXQgY29udHJvbGxlckZpbGUgPSBwYXRoLmpvaW4oY29udHJvbGxlclBhdGgsIG1vZHVsZUNvbnRyb2xsZXIgKyBcIi5qc1wiKTtcbiAgICAgICAgbGV0IGNvbnRyb2xsZXI7XG5cbiAgICAgICAgY29udHJvbGxlciA9IHJlcXVpcmUoY29udHJvbGxlckZpbGUpO1xuICAgICAgICBsZXQgaXNDb250cm9sbGVyID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb250cm9sbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIgPSBuZXcgY29udHJvbGxlcihhcHApO1xuICAgICAgICAgICAgaXNDb250cm9sbGVyID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGFjdGlvbk5hbWUgaW4gY29udHJvbGxlcikge1xuICAgICAgICAgICAgbGV0IGFjdGlvbiA9IGNvbnRyb2xsZXJbYWN0aW9uTmFtZV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFjdGlvbiAhPT0gXCJmdW5jdGlvblwiIHx8ICFhY3Rpb24uX19tZXRhSHR0cE1ldGhvZCkgY29udGludWU7IC8vIG9ubHkgbWFya2VkIGh0dHBNZXRob2Qgc2hvdWxkIGJlIG1vdW50ZWRcblxuICAgICAgICAgICAgY29uc3QgbWV0aG9kID0gYWN0aW9uLl9fbWV0YUh0dHBNZXRob2Q7XG4gICAgICAgICAgICBsZXQgc3ViUm91dGUgPSB0ZXh0LmVuc3VyZVN0YXJ0c1dpdGgoYWN0aW9uLl9fbWV0YVJvdXRlIHx8IF8ua2ViYWJDYXNlKGFjdGlvbk5hbWUpLCBcIi9cIik7XG5cbiAgICAgICAgICAgIGxldCBiaW5kQWN0aW9uO1xuXG4gICAgICAgICAgICBpZiAoaXNDb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgYmluZEFjdGlvbiA9IGFjdGlvbi5iaW5kKGNvbnRyb2xsZXIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBiaW5kQWN0aW9uID0gYWN0aW9uO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIUxpdGVyYWwuQUxMT1dFRF9IVFRQX01FVEhPRFMuaGFzKG1ldGhvZCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgICAgICAgIFwiVW5zdXBwb3J0ZWQgaHR0cCBtZXRob2Q6IFwiICsgbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICAgICAgICAgIGByb3V0aW5nLiR7YmFzZVJvdXRlfS5tb2R1bGVzICR7bW9kdWxlSXRlbS5jb250cm9sbGVyfS4ke2FjdGlvbk5hbWV9YFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFwcC5hZGRSb3V0ZShcbiAgICAgICAgICAgICAgICByb3V0ZXIsXG4gICAgICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgICAgIHN1YlJvdXRlLFxuICAgICAgICAgICAgICAgIGFjdGlvbi5fX21ldGFNaWRkbGV3YXJlcyA/IGFjdGlvbi5fX21ldGFNaWRkbGV3YXJlcy5jb25jYXQoW2JpbmRBY3Rpb25dKSA6IGJpbmRBY3Rpb25cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGFwcC5hZGRSb3V0ZXIocm91dGVyKTtcbn07XG4iXX0=