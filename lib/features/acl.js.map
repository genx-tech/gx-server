{"version":3,"sources":["../../src/features/acl.js"],"names":["_","eachAsync_","require","Feature","Enums","InvalidConfiguration","module","exports","type","PLUGIN","load_","app","config","Acl","tryRequire","backend","backendType","backendStore","indexOf","memoryBackend","dataSource","mongodb","getService","mongodbBackend","connect_","prefix","Error","acl"],"mappings":"AAAA;;;;AAOA,MAAM;AAAEA,EAAAA,CAAF;AAAKC,EAAAA;AAAL,IAAoBC,OAAO,CAAC,YAAD,CAAjC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAcD,OAAO,CAAC,IAAD,CAAP,CAAcE,KAAlC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA2BH,OAAO,CAAC,aAAD,CAAxC;;AAEAI,MAAM,CAACC,OAAP,GAAiB;AAMbC,EAAAA,IAAI,EAAEL,OAAO,CAACM,MAND;AAuBbC,EAAAA,KAAK,EAAE,gBAAgBC,GAAhB,EAAqBC,MAArB,EAA6B;AAChC,UAAMC,GAAG,GAAGF,GAAG,CAACG,UAAJ,CAAe,KAAf,CAAZ;AACA,QAAIC,OAAO,GAAGH,MAAM,CAACG,OAAP,IAAkB,QAAhC;AACA,QAAIC,WAAJ,EAAiBC,YAAjB;;AAEA,QAAIF,OAAO,CAACG,OAAR,CAAgB,GAAhB,IAAuB,CAA3B,EAA8B;AAC1BF,MAAAA,WAAW,GAAG,EAAd;AACH;;AAED,YAAQD,OAAR;AACI,WAAK,QAAL;AACAE,QAAAA,YAAY,GAAG,IAAIJ,GAAG,CAACM,aAAR,EAAf;AACA;;AAEA,WAAK,SAAL;AACA,YAAI,CAACP,MAAM,CAACQ,UAAZ,EAAwB;AACpB,gBAAM,IAAIf,oBAAJ,CAAyB,sDAAzB,EAAiFM,GAAjF,EAAsF,gBAAtF,CAAN;AACH;;AAED,YAAIU,OAAO,GAAGV,GAAG,CAACW,UAAJ,CAAeV,MAAM,CAACQ,UAAtB,CAAd;;AACA,YAAI,CAACC,OAAL,EAAc;AACV,gBAAM,IAAIhB,oBAAJ,CAA0B,gBAAeO,MAAM,CAACQ,UAAW,cAA3D,EAA0ET,GAA1E,EAA+E,gBAA/E,CAAN;AACH;;AAEDM,QAAAA,YAAY,GAAG,IAAIJ,GAAG,CAACU,cAAR,CAAuB,MAAMF,OAAO,CAACG,QAAR,EAA7B,EAAiDZ,MAAM,CAACa,MAAxD,CAAf;AACA;;AAEA,WAAK,OAAL;AACA,cAAM,IAAIC,KAAJ,CAAU,mBAAV,CAAN;AACA;;AAEA;AACA,cAAM,IAAIrB,oBAAJ,CAAyB,8BAA8BU,OAAvD,EAAgEJ,GAAhE,EAAqE,aAArE,CAAN;AAvBJ;;AA0BAA,IAAAA,GAAG,CAACgB,GAAJ,GAAU,IAAId,GAAJ,CAAQI,YAAR,CAAV;AACH;AA3DY,CAAjB","sourcesContent":["\"use strict\";\n\n/**\n * Enable acl feature\n * @module Feature_Acl\n */\n\nconst { _, eachAsync_ } = require('@genx/july');\nconst { Feature } = require('..').Enums;\nconst { InvalidConfiguration } = require('@genx/error');\n\nmodule.exports = {\n\n    /**\n     * This feature is loaded at service stage\n     * @member {string}\n     */\n    type: Feature.PLUGIN,\n\n    /**\n     * Load the feature\n     * @param {Routable} app - The app module object\n     * @param {object} config - Acl settings\n     * @property {string} config.backend - Backend store type of acl, memory, mongodb, redis\n     * @property {string} [config.dataSource] - Store type of acl\n     * @property {object} [config.prefix] - Store options\n     * @returns {Promise.<*>}\n     * \n     * @example\n     * \n     * acl: {\n     *   backend: 'mongodb.dataSourceName'\n     * }\n     */\n    load_: async function (app, config) {\n        const Acl = app.tryRequire('acl');\n        let backend = config.backend || 'memory';\n        let backendType, backendStore;\n\n        if (backend.indexOf('.') > 0) {\n            backendType = '';\n        }\n\n        switch (backend) {\n            case 'memory':\n            backendStore = new Acl.memoryBackend();\n            break;\n\n            case 'mongodb':\n            if (!config.dataSource) {\n                throw new InvalidConfiguration('\"dataSource\" is required for mongodb backend of acl.', app, 'acl.dataSource');\n            }\n\n            let mongodb = app.getService(config.dataSource);\n            if (!mongodb) {\n                throw new InvalidConfiguration(`Data source \"${config.dataSource}\" not found.`, app, 'acl.dataSource');\n            }\n\n            backendStore = new Acl.mongodbBackend(await mongodb.connect_(), config.prefix);\n            break;\n\n            case 'redis':\n            throw new Error('to be implemented');\n            break;\n\n            default:\n            throw new InvalidConfiguration('Unsupported acl backend: ' + backend, app, 'acl.backend');\n        }        \n    \n        app.acl = new Acl(backendStore);       \n    }\n};"],"file":"acl.js"}