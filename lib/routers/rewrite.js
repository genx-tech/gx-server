"use strict";

require("source-map-support/register");

const path = require('path');

const Util = require('rk-utils');

const _ = Util._;
const Promise = Util.Promise;

const Router = require('@koa/router');

const {
  InvalidConfiguration
} = require('../utils/Errors');

const Literal = require('../enum/Literal');

function load_(app, baseRoute, mapping) {
  let router = baseRoute === '/' ? new Router() : new Router({
    prefix: baseRoute
  });

  _.forOwn(mapping || {}, (targetRoute, sourceRoute) => {
    let pos = subRoute.indexOf(':/');

    if (pos !== -1) {
      if (pos === 0) {
        throw new InvalidConfiguration('Invalid route rule syntax: ' + subRoute, app, `routing[${baseRoute}].rule.rules`);
      }

      let embeddedMethod = subRoute.substr(0, pos).toLocaleLowerCase();
      subRoute = subRoute.substr(pos + 2);
      methods = {
        [embeddedMethod]: methods
      };
    }

    subRoute = Util.ensureLeftSlash(subRoute);

    if (typeof methods === 'string' || Array.isArray(methods)) {
      methods = {
        get: methods
      };
    }

    _.forOwn(methods, (middlewares, method) => {
      if (!Literal.ALLOWED_HTTP_METHODS.has(method) && method !== 'all') {
        throw new InvalidConfiguration('Unsupported http method: ' + method, app, `routing[${baseRoute}].rule.rules[${subRoute}]`);
      }

      app.addRoute(router, method, subRoute, middlewares);
    });
  });

  app.addRouter(router);
}

;
module.exports = load_;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXJzL3Jld3JpdGUuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJVdGlsIiwiXyIsIlByb21pc2UiLCJSb3V0ZXIiLCJJbnZhbGlkQ29uZmlndXJhdGlvbiIsIkxpdGVyYWwiLCJsb2FkXyIsImFwcCIsImJhc2VSb3V0ZSIsIm1hcHBpbmciLCJyb3V0ZXIiLCJwcmVmaXgiLCJmb3JPd24iLCJ0YXJnZXRSb3V0ZSIsInNvdXJjZVJvdXRlIiwicG9zIiwic3ViUm91dGUiLCJpbmRleE9mIiwiZW1iZWRkZWRNZXRob2QiLCJzdWJzdHIiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsIm1ldGhvZHMiLCJlbnN1cmVMZWZ0U2xhc2giLCJBcnJheSIsImlzQXJyYXkiLCJnZXQiLCJtaWRkbGV3YXJlcyIsIm1ldGhvZCIsIkFMTE9XRURfSFRUUF9NRVRIT0RTIiwiaGFzIiwiYWRkUm91dGUiLCJhZGRSb3V0ZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsVUFBRCxDQUFwQjs7QUFDQSxNQUFNRSxDQUFDLEdBQUdELElBQUksQ0FBQ0MsQ0FBZjtBQUNBLE1BQU1DLE9BQU8sR0FBR0YsSUFBSSxDQUFDRSxPQUFyQjs7QUFDQSxNQUFNQyxNQUFNLEdBQUdKLE9BQU8sQ0FBQyxhQUFELENBQXRCOztBQUNBLE1BQU07QUFBRUssRUFBQUE7QUFBRixJQUEyQkwsT0FBTyxDQUFDLGlCQUFELENBQXhDOztBQUNBLE1BQU1NLE9BQU8sR0FBR04sT0FBTyxDQUFDLGlCQUFELENBQXZCOztBQW1CQSxTQUFTTyxLQUFULENBQWVDLEdBQWYsRUFBb0JDLFNBQXBCLEVBQStCQyxPQUEvQixFQUF3QztBQUNwQyxNQUFJQyxNQUFNLEdBQUdGLFNBQVMsS0FBSyxHQUFkLEdBQW9CLElBQUlMLE1BQUosRUFBcEIsR0FBbUMsSUFBSUEsTUFBSixDQUFXO0FBQUNRLElBQUFBLE1BQU0sRUFBRUg7QUFBVCxHQUFYLENBQWhEOztBQUVBUCxFQUFBQSxDQUFDLENBQUNXLE1BQUYsQ0FBU0gsT0FBTyxJQUFJLEVBQXBCLEVBQXdCLENBQUNJLFdBQUQsRUFBY0MsV0FBZCxLQUE4QjtBQUNsRCxRQUFJQyxHQUFHLEdBQUdDLFFBQVEsQ0FBQ0MsT0FBVCxDQUFpQixJQUFqQixDQUFWOztBQUVBLFFBQUlGLEdBQUcsS0FBSyxDQUFDLENBQWIsRUFBZ0I7QUFDWixVQUFJQSxHQUFHLEtBQUssQ0FBWixFQUFlO0FBQ1gsY0FBTSxJQUFJWCxvQkFBSixDQUNGLGdDQUFnQ1ksUUFEOUIsRUFFRlQsR0FGRSxFQUdELFdBQVVDLFNBQVUsY0FIbkIsQ0FBTjtBQUlIOztBQUlELFVBQUlVLGNBQWMsR0FBR0YsUUFBUSxDQUFDRyxNQUFULENBQWdCLENBQWhCLEVBQW1CSixHQUFuQixFQUF3QkssaUJBQXhCLEVBQXJCO0FBQ0FKLE1BQUFBLFFBQVEsR0FBR0EsUUFBUSxDQUFDRyxNQUFULENBQWdCSixHQUFHLEdBQUcsQ0FBdEIsQ0FBWDtBQUVBTSxNQUFBQSxPQUFPLEdBQUc7QUFBQyxTQUFDSCxjQUFELEdBQWtCRztBQUFuQixPQUFWO0FBQ0g7O0FBRURMLElBQUFBLFFBQVEsR0FBR2hCLElBQUksQ0FBQ3NCLGVBQUwsQ0FBcUJOLFFBQXJCLENBQVg7O0FBRUEsUUFBSSxPQUFPSyxPQUFQLEtBQW1CLFFBQW5CLElBQStCRSxLQUFLLENBQUNDLE9BQU4sQ0FBY0gsT0FBZCxDQUFuQyxFQUEyRDtBQUN2REEsTUFBQUEsT0FBTyxHQUFHO0FBQUVJLFFBQUFBLEdBQUcsRUFBRUo7QUFBUCxPQUFWO0FBQ0g7O0FBRURwQixJQUFBQSxDQUFDLENBQUNXLE1BQUYsQ0FBU1MsT0FBVCxFQUFrQixDQUFDSyxXQUFELEVBQWNDLE1BQWQsS0FBeUI7QUFDdkMsVUFBSSxDQUFDdEIsT0FBTyxDQUFDdUIsb0JBQVIsQ0FBNkJDLEdBQTdCLENBQWlDRixNQUFqQyxDQUFELElBQTZDQSxNQUFNLEtBQUssS0FBNUQsRUFBbUU7QUFDL0QsY0FBTSxJQUFJdkIsb0JBQUosQ0FDRiw4QkFBOEJ1QixNQUQ1QixFQUVGcEIsR0FGRSxFQUdELFdBQVVDLFNBQVUsZ0JBQWVRLFFBQVMsR0FIM0MsQ0FBTjtBQUlIOztBQUVEVCxNQUFBQSxHQUFHLENBQUN1QixRQUFKLENBQWFwQixNQUFiLEVBQXFCaUIsTUFBckIsRUFBNkJYLFFBQTdCLEVBQXVDVSxXQUF2QztBQUNILEtBVEQ7QUFVSCxHQW5DRDs7QUFxQ0FuQixFQUFBQSxHQUFHLENBQUN3QixTQUFKLENBQWNyQixNQUFkO0FBQ0g7O0FBQUE7QUFFRHNCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjNCLEtBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBVdGlsID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IF8gPSBVdGlsLl87XG5jb25zdCBQcm9taXNlID0gVXRpbC5Qcm9taXNlO1xuY29uc3QgUm91dGVyID0gcmVxdWlyZSgnQGtvYS9yb3V0ZXInKTtcbmNvbnN0IHsgSW52YWxpZENvbmZpZ3VyYXRpb24gfSA9IHJlcXVpcmUoJy4uL3V0aWxzL0Vycm9ycycpO1xuY29uc3QgTGl0ZXJhbCA9IHJlcXVpcmUoJy4uL2VudW0vTGl0ZXJhbCcpO1xuXG4vKipcbiAqIFJ1bGUgYmFzZWQgcm91dGVyLlxuICogQG1vZHVsZSBSb3V0ZXJfUnVsZSBcbiAqL1xuXG4vKiogXG4gKiBDcmVhdGUgYSBydWxlLWJhc2VkIHJvdXRlci5cbiAqIEBwYXJhbSB7V2ViTW9kdWxlfSBhcHAgXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVJvdXRlIFxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgXG4gKiBAZXhhbXBsZVxuICogJzxiYXNlIHBhdGg+Jzoge1xuICogICAgIHJld3JpdGU6IHtcbiAqICAgICAgICAgJzxzb3VyY2Ugcm91dGU+JzogJzx0YXJnZXQgcm91dGU+JyxcbiAqICAgICB9XG4gKiB9XG4gKi9cbmZ1bmN0aW9uIGxvYWRfKGFwcCwgYmFzZVJvdXRlLCBtYXBwaW5nKSB7XG4gICAgbGV0IHJvdXRlciA9IGJhc2VSb3V0ZSA9PT0gJy8nID8gbmV3IFJvdXRlcigpIDogbmV3IFJvdXRlcih7cHJlZml4OiBiYXNlUm91dGV9KTtcblxuICAgIF8uZm9yT3duKG1hcHBpbmcgfHwge30sICh0YXJnZXRSb3V0ZSwgc291cmNlUm91dGUpID0+IHtcbiAgICAgICAgbGV0IHBvcyA9IHN1YlJvdXRlLmluZGV4T2YoJzovJyk7XG5cbiAgICAgICAgaWYgKHBvcyAhPT0gLTEpIHtcbiAgICAgICAgICAgIGlmIChwb3MgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgICAgICAgICdJbnZhbGlkIHJvdXRlIHJ1bGUgc3ludGF4OiAnICsgc3ViUm91dGUsIFxuICAgICAgICAgICAgICAgICAgICBhcHAsIFxuICAgICAgICAgICAgICAgICAgICBgcm91dGluZ1ske2Jhc2VSb3V0ZX1dLnJ1bGUucnVsZXNgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gbGlrZSBnZXQ6Lywgb3IgcG9zdDovXG5cbiAgICAgICAgICAgIGxldCBlbWJlZGRlZE1ldGhvZCA9IHN1YlJvdXRlLnN1YnN0cigwLCBwb3MpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBzdWJSb3V0ZSA9IHN1YlJvdXRlLnN1YnN0cihwb3MgKyAyKTtcblxuICAgICAgICAgICAgbWV0aG9kcyA9IHtbZW1iZWRkZWRNZXRob2RdOiBtZXRob2RzfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YlJvdXRlID0gVXRpbC5lbnN1cmVMZWZ0U2xhc2goc3ViUm91dGUpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgbWV0aG9kcyA9PT0gJ3N0cmluZycgfHwgQXJyYXkuaXNBcnJheShtZXRob2RzKSkge1xuICAgICAgICAgICAgbWV0aG9kcyA9IHsgZ2V0OiBtZXRob2RzIH07XG4gICAgICAgIH1cblxuICAgICAgICBfLmZvck93bihtZXRob2RzLCAobWlkZGxld2FyZXMsIG1ldGhvZCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFMaXRlcmFsLkFMTE9XRURfSFRUUF9NRVRIT0RTLmhhcyhtZXRob2QpICYmIG1ldGhvZCAhPT0gJ2FsbCcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgICAgICAgICdVbnN1cHBvcnRlZCBodHRwIG1ldGhvZDogJyArIG1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgICAgICAgICBgcm91dGluZ1ske2Jhc2VSb3V0ZX1dLnJ1bGUucnVsZXNbJHtzdWJSb3V0ZX1dYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFwcC5hZGRSb3V0ZShyb3V0ZXIsIG1ldGhvZCwgc3ViUm91dGUsIG1pZGRsZXdhcmVzKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBhcHAuYWRkUm91dGVyKHJvdXRlcik7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvYWRfOyJdfQ==