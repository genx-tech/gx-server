"use strict";

require("source-map-support/register");

const {
  _
} = require('@genx/july');

function httpMethod(method, middlewares) {
  if (arguments.length === 3) {
    return httpMethod('get')(...Array.prototype.slice.call(arguments));
  }

  return function (target, name, descriptor) {
    let targetFunction,
        isHof = false;

    if (arguments.length === 1 && typeof target === 'function') {
      targetFunction = target;
      isHof = true;
    } else if (descriptor && descriptor.value) {
      targetFunction = descriptor.value;
      descriptor.enumerable = true;
    } else {
      throw new Error('Unsupported scenario.');
    }

    if (targetFunction) {
      if (typeof method === 'string') {
        let pos = method.indexOf(':/');

        if (pos !== -1) {
          if (pos === 0) {
            throw new Error('Invalid httpMethod decorator param: ' + method);
          }

          targetFunction.__metaRoute = method.substr(pos + 1);
          method = method.substr(0, pos).toLocaleLowerCase();
        }
      } else {
        method = 'get';
      }

      targetFunction.__metaHttpMethod = method;

      if (middlewares) {
        if (_.isPlainObject(middlewares)) {
          targetFunction.__metaMiddlewares = _.map(middlewares, (options, name) => ({
            name,
            options
          }));
        } else {
          targetFunction.__metaMiddlewares = _.castArray(middlewares);
        }
      }
    }

    return isHof ? targetFunction : descriptor;
  };
}

module.exports = httpMethod;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9odHRwTWV0aG9kLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiaHR0cE1ldGhvZCIsIm1ldGhvZCIsIm1pZGRsZXdhcmVzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJ0YXJnZXQiLCJuYW1lIiwiZGVzY3JpcHRvciIsInRhcmdldEZ1bmN0aW9uIiwiaXNIb2YiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJFcnJvciIsInBvcyIsImluZGV4T2YiLCJfX21ldGFSb3V0ZSIsInN1YnN0ciIsInRvTG9jYWxlTG93ZXJDYXNlIiwiX19tZXRhSHR0cE1ldGhvZCIsImlzUGxhaW5PYmplY3QiLCJfX21ldGFNaWRkbGV3YXJlcyIsIm1hcCIsIm9wdGlvbnMiLCJjYXN0QXJyYXkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQVFDLE9BQU8sQ0FBQyxZQUFELENBQXJCOztBQUVBLFNBQVNDLFVBQVQsQ0FBb0JDLE1BQXBCLEVBQTRCQyxXQUE1QixFQUF5QztBQUNyQyxNQUFJQyxTQUFTLENBQUNDLE1BQVYsS0FBcUIsQ0FBekIsRUFBNEI7QUFDeEIsV0FBT0osVUFBVSxDQUFDLEtBQUQsQ0FBVixDQUFrQixHQUFHSyxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQkwsU0FBM0IsQ0FBckIsQ0FBUDtBQUNIOztBQUVELFNBQU8sVUFBVU0sTUFBVixFQUFrQkMsSUFBbEIsRUFBd0JDLFVBQXhCLEVBQW9DO0FBQ3ZDLFFBQUlDLGNBQUo7QUFBQSxRQUFvQkMsS0FBSyxHQUFHLEtBQTVCOztBQUVBLFFBQUlWLFNBQVMsQ0FBQ0MsTUFBVixLQUFxQixDQUFyQixJQUEwQixPQUFPSyxNQUFQLEtBQWtCLFVBQWhELEVBQTREO0FBQ3hERyxNQUFBQSxjQUFjLEdBQUdILE1BQWpCO0FBQ0FJLE1BQUFBLEtBQUssR0FBRyxJQUFSO0FBQ0gsS0FIRCxNQUdPLElBQUlGLFVBQVUsSUFBSUEsVUFBVSxDQUFDRyxLQUE3QixFQUFvQztBQUN2Q0YsTUFBQUEsY0FBYyxHQUFHRCxVQUFVLENBQUNHLEtBQTVCO0FBQ0FILE1BQUFBLFVBQVUsQ0FBQ0ksVUFBWCxHQUF3QixJQUF4QjtBQUNILEtBSE0sTUFHQTtBQUNILFlBQU0sSUFBSUMsS0FBSixDQUFVLHVCQUFWLENBQU47QUFDSDs7QUFFRCxRQUFJSixjQUFKLEVBQW9CO0FBQ2hCLFVBQUksT0FBT1gsTUFBUCxLQUFrQixRQUF0QixFQUFnQztBQUM1QixZQUFJZ0IsR0FBRyxHQUFHaEIsTUFBTSxDQUFDaUIsT0FBUCxDQUFlLElBQWYsQ0FBVjs7QUFFQSxZQUFJRCxHQUFHLEtBQUssQ0FBQyxDQUFiLEVBQWdCO0FBQ1osY0FBSUEsR0FBRyxLQUFLLENBQVosRUFBZTtBQUNYLGtCQUFNLElBQUlELEtBQUosQ0FBVSx5Q0FBeUNmLE1BQW5ELENBQU47QUFDSDs7QUFLRFcsVUFBQUEsY0FBYyxDQUFDTyxXQUFmLEdBQTZCbEIsTUFBTSxDQUFDbUIsTUFBUCxDQUFjSCxHQUFHLEdBQUcsQ0FBcEIsQ0FBN0I7QUFDQWhCLFVBQUFBLE1BQU0sR0FBR0EsTUFBTSxDQUFDbUIsTUFBUCxDQUFjLENBQWQsRUFBaUJILEdBQWpCLEVBQXNCSSxpQkFBdEIsRUFBVDtBQUNIO0FBQ0osT0FkRCxNQWNPO0FBQ0hwQixRQUFBQSxNQUFNLEdBQUcsS0FBVDtBQUNIOztBQUVEVyxNQUFBQSxjQUFjLENBQUNVLGdCQUFmLEdBQWtDckIsTUFBbEM7O0FBRUEsVUFBSUMsV0FBSixFQUFpQjtBQUNiLFlBQUlKLENBQUMsQ0FBQ3lCLGFBQUYsQ0FBZ0JyQixXQUFoQixDQUFKLEVBQWtDO0FBQzlCVSxVQUFBQSxjQUFjLENBQUNZLGlCQUFmLEdBQW1DMUIsQ0FBQyxDQUFDMkIsR0FBRixDQUFNdkIsV0FBTixFQUFtQixDQUFDd0IsT0FBRCxFQUFVaEIsSUFBVixNQUFvQjtBQUFFQSxZQUFBQSxJQUFGO0FBQVFnQixZQUFBQTtBQUFSLFdBQXBCLENBQW5CLENBQW5DO0FBQ0gsU0FGRCxNQUVPO0FBQ0hkLFVBQUFBLGNBQWMsQ0FBQ1ksaUJBQWYsR0FBbUMxQixDQUFDLENBQUM2QixTQUFGLENBQVl6QixXQUFaLENBQW5DO0FBQ0g7QUFDSjtBQUNKOztBQUVELFdBQU9XLEtBQUssR0FBR0QsY0FBSCxHQUFvQkQsVUFBaEM7QUFDSCxHQTVDRDtBQTZDSDs7QUFFRGlCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjdCLFVBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBfIH0gPSByZXF1aXJlKCdAZ2VueC9qdWx5Jyk7XG5cbmZ1bmN0aW9uIGh0dHBNZXRob2QobWV0aG9kLCBtaWRkbGV3YXJlcykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICAgIHJldHVybiBodHRwTWV0aG9kKCdnZXQnKSguLi5BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwgbmFtZSwgZGVzY3JpcHRvcikge1xuICAgICAgICBsZXQgdGFyZ2V0RnVuY3Rpb24sIGlzSG9mID0gZmFsc2U7XG4gICAgXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRhcmdldEZ1bmN0aW9uID0gdGFyZ2V0O1xuICAgICAgICAgICAgaXNIb2YgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZSkge1xuICAgICAgICAgICAgdGFyZ2V0RnVuY3Rpb24gPSBkZXNjcmlwdG9yLnZhbHVlO1xuICAgICAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgc2NlbmFyaW8uJyk7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgaWYgKHRhcmdldEZ1bmN0aW9uKSB7ICAgIFxuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXRob2QgPT09ICdzdHJpbmcnKSB7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxldCBwb3MgPSBtZXRob2QuaW5kZXhPZignOi8nKTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAocG9zICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9zID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaHR0cE1ldGhvZCBkZWNvcmF0b3IgcGFyYW06ICcgKyBtZXRob2QpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIGxpa2UgZ2V0Oi8sIG9yIHBvc3Q6L1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvL292ZXJyaWRlIGFjdGlvbk5hbWUgYXMgcm91dGVcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RnVuY3Rpb24uX19tZXRhUm91dGUgPSBtZXRob2Quc3Vic3RyKHBvcyArIDEpO1xuICAgICAgICAgICAgICAgICAgICBtZXRob2QgPSBtZXRob2Quc3Vic3RyKDAsIHBvcykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1ldGhvZCA9ICdnZXQnO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgdGFyZ2V0RnVuY3Rpb24uX19tZXRhSHR0cE1ldGhvZCA9IG1ldGhvZDsgICAgICAgICAgICBcbiAgICBcbiAgICAgICAgICAgIGlmIChtaWRkbGV3YXJlcykge1xuICAgICAgICAgICAgICAgIGlmIChfLmlzUGxhaW5PYmplY3QobWlkZGxld2FyZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEZ1bmN0aW9uLl9fbWV0YU1pZGRsZXdhcmVzID0gXy5tYXAobWlkZGxld2FyZXMsIChvcHRpb25zLCBuYW1lKSA9PiAoeyBuYW1lLCBvcHRpb25zIH0pKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRGdW5jdGlvbi5fX21ldGFNaWRkbGV3YXJlcyA9IF8uY2FzdEFycmF5KG1pZGRsZXdhcmVzKTtcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXG4gICAgICAgIHJldHVybiBpc0hvZiA/IHRhcmdldEZ1bmN0aW9uIDogZGVzY3JpcHRvcjtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaHR0cE1ldGhvZDsiXX0=