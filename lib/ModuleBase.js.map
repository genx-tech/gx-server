{"version":3,"file":"ModuleBase.js","names":["require","path","Literal","defaultBackendPath","ModuleBase","Base","constructor","server","name","appPath","options","Object","assign","workingPath","configPath","join","DEFAULT_CONFIG_PATH","isServer","backendPath","toAbsolutePath","getService","currentModuleOnly","enabled","feature","relativePath","modPath","requireFromLib","libName","log","level","message","rest","logWithAppName","logger","_getFeatureFallbackPath","pathArray","splice","resolve","FEATURES_PATH","module","exports"],"sources":["../src/ModuleBase.js"],"sourcesContent":["\"use strict\";\n\nconst path = require(\"path\");\nconst Literal = require(\"./enum/Literal\");\nconst { defaultBackendPath } = require(\"./utils/Helpers\");\n\nconst ModuleBase = (Base) =>\n    class extends Base {\n        /**\n         * @param {WebServer} server\n         * @param {string} name - The name of the app module.\n         * @param {string} route - The base route of the app module.\n         * @param {string} appPath - The path to load the app's module files\n         * @param {object} [options] - The app module's extra options defined in its parent's configuration.\n         * @property {bool} [options.logWithAppName=false] - Flag to include app name in log message.\n         */\n        constructor(server, name, appPath, options) {\n            super(\n                name,\n                Object.assign(\n                    {\n                        workingPath: appPath,\n                        configPath: path.join(appPath, Literal.DEFAULT_CONFIG_PATH),\n                    },\n                    options\n                )\n            );\n\n            /**\n             * Hosting server.\n             * @member {WebServer}\n             **/\n            this.server = server;\n\n            /**\n             * Whether it is a server.\n             * @member {boolean}\n             **/\n            this.isServer = false;\n\n            /**\n             * Backend files path.\n             * @member {string}\n             **/\n            this.backendPath = this.toAbsolutePath(this.options.backendPath || defaultBackendPath);\n        }\n\n        /**\n         * Get a service from module hierarchy\n         * @param name\n         * @returns {object}\n         */\n        getService(name, currentModuleOnly) {\n            return super.getService(name) || (!currentModuleOnly && this.server.getService(name));\n        }\n\n        /**\n         * Check whether a feature is enabled in the app or its hosting server.\n         * @param {string} feature\n         * @returns {bool}\n         */\n        enabled(feature, currentModuleOnly) {\n            return super.enabled(feature) || (!currentModuleOnly && this.server.enabled(feature));\n        }\n\n        /**\n         * Require a js module from backend path\n         * @param {*} relativePath\n         */\n        require(relativePath) {\n            let modPath = path.join(this.backendPath, relativePath);\n            return require(modPath);\n        }\n\n        /**\n         * Require a module from the source path of a library module\n         * @param {*} relativePath\n         */\n        requireFromLib(libName, relativePath) {\n            return this.server.requireFromLib(libName, relativePath);\n        }\n\n        /**\n         * Default log method, may be override by loggers feature\n         * @param {string} level - Log level\n         * @param {string} message - Log message\n         * @param {...object} rest - Extra meta data\n         * @returns {Routable}\n         */\n        log(level, message, ...rest) {\n            if (this.options.logWithAppName) {\n                message = \"[\" + this.name + \"] \" + message;\n            }\n\n            if (this.logger) {\n                this.logger.log(level, message, ...rest);\n            } else {\n                this.server.log(level, message, ...rest);\n            }\n\n            return this;\n        }\n\n        _getFeatureFallbackPath() {\n            let pathArray = super._getFeatureFallbackPath();\n            pathArray.splice(1, 0, path.resolve(this.backendPath, Literal.FEATURES_PATH));\n            return pathArray;\n        }\n    };\n\nmodule.exports = ModuleBase;\n"],"mappings":"AAAA,YAAY;;AAACA,OAAA;AAEb,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,OAAO,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AACzC,MAAM;EAAEG;AAAmB,CAAC,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AAEzD,MAAMI,UAAU,GAAIC,IAAI,IACpB,cAAcA,IAAI,CAAC;EASfC,WAAWA,CAACC,MAAM,EAAEC,IAAI,EAAEC,OAAO,EAAEC,OAAO,EAAE;IACxC,KAAK,CACDF,IAAI,EACJG,MAAM,CAACC,MAAM,CACT;MACIC,WAAW,EAAEJ,OAAO;MACpBK,UAAU,EAAEb,IAAI,CAACc,IAAI,CAACN,OAAO,EAAEP,OAAO,CAACc,mBAAmB;IAC9D,CAAC,EACDN,OACJ,CACJ,CAAC;IAMD,IAAI,CAACH,MAAM,GAAGA,MAAM;IAMpB,IAAI,CAACU,QAAQ,GAAG,KAAK;IAMrB,IAAI,CAACC,WAAW,GAAG,IAAI,CAACC,cAAc,CAAC,IAAI,CAACT,OAAO,CAACQ,WAAW,IAAIf,kBAAkB,CAAC;EAC1F;EAOAiB,UAAUA,CAACZ,IAAI,EAAEa,iBAAiB,EAAE;IAChC,OAAO,KAAK,CAACD,UAAU,CAACZ,IAAI,CAAC,IAAK,CAACa,iBAAiB,IAAI,IAAI,CAACd,MAAM,CAACa,UAAU,CAACZ,IAAI,CAAE;EACzF;EAOAc,OAAOA,CAACC,OAAO,EAAEF,iBAAiB,EAAE;IAChC,OAAO,KAAK,CAACC,OAAO,CAACC,OAAO,CAAC,IAAK,CAACF,iBAAiB,IAAI,IAAI,CAACd,MAAM,CAACe,OAAO,CAACC,OAAO,CAAE;EACzF;EAMAvB,OAAOA,CAACwB,YAAY,EAAE;IAClB,IAAIC,OAAO,GAAGxB,IAAI,CAACc,IAAI,CAAC,IAAI,CAACG,WAAW,EAAEM,YAAY,CAAC;IACvD,OAAOxB,OAAO,CAACyB,OAAO,CAAC;EAC3B;EAMAC,cAAcA,CAACC,OAAO,EAAEH,YAAY,EAAE;IAClC,OAAO,IAAI,CAACjB,MAAM,CAACmB,cAAc,CAACC,OAAO,EAAEH,YAAY,CAAC;EAC5D;EASAI,GAAGA,CAACC,KAAK,EAAEC,OAAO,EAAE,GAAGC,IAAI,EAAE;IACzB,IAAI,IAAI,CAACrB,OAAO,CAACsB,cAAc,EAAE;MAC7BF,OAAO,GAAG,GAAG,GAAG,IAAI,CAACtB,IAAI,GAAG,IAAI,GAAGsB,OAAO;IAC9C;IAEA,IAAI,IAAI,CAACG,MAAM,EAAE;MACb,IAAI,CAACA,MAAM,CAACL,GAAG,CAACC,KAAK,EAAEC,OAAO,EAAE,GAAGC,IAAI,CAAC;IAC5C,CAAC,MAAM;MACH,IAAI,CAACxB,MAAM,CAACqB,GAAG,CAACC,KAAK,EAAEC,OAAO,EAAE,GAAGC,IAAI,CAAC;IAC5C;IAEA,OAAO,IAAI;EACf;EAEAG,uBAAuBA,CAAA,EAAG;IACtB,IAAIC,SAAS,GAAG,KAAK,CAACD,uBAAuB,CAAC,CAAC;IAC/CC,SAAS,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAEnC,IAAI,CAACoC,OAAO,CAAC,IAAI,CAACnB,WAAW,EAAEhB,OAAO,CAACoC,aAAa,CAAC,CAAC;IAC7E,OAAOH,SAAS;EACpB;AACJ,CAAC;AAELI,MAAM,CAACC,OAAO,GAAGpC,UAAU"}