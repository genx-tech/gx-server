"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  urlJoin,
  ensureLeftSlash
} = require('rk-utils');

const Literal = require('../enum/Literal');

const Router = require('@koa/router');

const {
  InvalidConfiguration
} = require('@genx/error');

module.exports = function (app, baseRoute, moduleItem) {
  let controllerPath = path.join(app.backendPath, Literal.CONTROLLERS_PATH);

  if (typeof moduleItem === 'string') {
    moduleItem = {
      controller: moduleItem
    };
  }

  let currentPrefix = urlJoin(baseRoute, moduleItem.route || '/');
  let router = currentPrefix === '/' ? new Router() : new Router({
    prefix: currentPrefix
  });

  if (moduleItem.middlewares) {
    app.useMiddlewares(router, moduleItem.middlewares);
  }

  const controllers = _.castArray(moduleItem.controller);

  controllers.forEach(moduleController => {
    let controllerFile = path.join(controllerPath, moduleController + '.js');
    let controller;
    controller = require(controllerFile);
    let isController = false;

    if (typeof controller === 'function') {
      controller = new controller(app);
      isController = true;
    }

    for (let actionName in controller) {
      let action = controller[actionName];
      if (typeof action !== 'function') continue;

      let httpMethod = _.castArray(action.__metaHttpMethod || 'get');

      let subRoute = ensureLeftSlash(action.__metaRoute || _.kebabCase(actionName));
      let bindAction;

      if (isController) {
        bindAction = action.bind(controller);
      } else {
        bindAction = action;
      }

      _.each(httpMethod, method => {
        if (!Literal.ALLOWED_HTTP_METHODS.has(method)) {
          throw new InvalidConfiguration('Unsupported http method: ' + method, app, `routing.${baseRoute}.modules ${moduleItem.controller}.${actionName}`);
        }

        app.addRoute(router, method, subRoute, action.__metaMiddlewares ? action.__metaMiddlewares.concat([bindAction]) : bindAction);
      });
    }

    ;
  });
  app.addRouter(router);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXJzL21vZHVsZS5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIl8iLCJ1cmxKb2luIiwiZW5zdXJlTGVmdFNsYXNoIiwiTGl0ZXJhbCIsIlJvdXRlciIsIkludmFsaWRDb25maWd1cmF0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwcCIsImJhc2VSb3V0ZSIsIm1vZHVsZUl0ZW0iLCJjb250cm9sbGVyUGF0aCIsImpvaW4iLCJiYWNrZW5kUGF0aCIsIkNPTlRST0xMRVJTX1BBVEgiLCJjb250cm9sbGVyIiwiY3VycmVudFByZWZpeCIsInJvdXRlIiwicm91dGVyIiwicHJlZml4IiwibWlkZGxld2FyZXMiLCJ1c2VNaWRkbGV3YXJlcyIsImNvbnRyb2xsZXJzIiwiY2FzdEFycmF5IiwiZm9yRWFjaCIsIm1vZHVsZUNvbnRyb2xsZXIiLCJjb250cm9sbGVyRmlsZSIsImlzQ29udHJvbGxlciIsImFjdGlvbk5hbWUiLCJhY3Rpb24iLCJodHRwTWV0aG9kIiwiX19tZXRhSHR0cE1ldGhvZCIsInN1YlJvdXRlIiwiX19tZXRhUm91dGUiLCJrZWJhYkNhc2UiLCJiaW5kQWN0aW9uIiwiYmluZCIsImVhY2giLCJtZXRob2QiLCJBTExPV0VEX0hUVFBfTUVUSE9EUyIsImhhcyIsImFkZFJvdXRlIiwiX19tZXRhTWlkZGxld2FyZXMiLCJjb25jYXQiLCJhZGRSb3V0ZXIiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLENBQUY7QUFBS0MsRUFBQUEsT0FBTDtBQUFjQyxFQUFBQTtBQUFkLElBQWtDSCxPQUFPLENBQUMsVUFBRCxDQUEvQzs7QUFDQSxNQUFNSSxPQUFPLEdBQUdKLE9BQU8sQ0FBQyxpQkFBRCxDQUF2Qjs7QUFDQSxNQUFNSyxNQUFNLEdBQUdMLE9BQU8sQ0FBQyxhQUFELENBQXRCOztBQUNBLE1BQU07QUFB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LEVBQXVDSCxNQUFNLENBQUNhLGlCQUFQLEdBQ25DYixNQUFNLENBQUNhLGlCQUFQLENBQXlCQyxNQUF6QixDQUFnQyxDQUFDUixVQUFELENBQWhDLENBRG1DLEdBRW5DQSxVQUZKO0FBR0gsT0FYRDtBQVlIOztBQUFBO0FBQ0osR0F4Q0Q7QUEwQ0EzQixFQUFBQSxHQUFHLENBQUNvQyxTQUFKLENBQWMxQixNQUFkO0FBQ0gsQ0FoRUQiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHsgXywgdXJsSm9pbiwgZW5zdXJlTGVmdFNsYXNoIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgTGl0ZXJhbCA9IHJlcXVpcmUoJy4uL2VudW0vTGl0ZXJhbCcpO1xuY29uc3QgUm91dGVyID0gcmVxdWlyZSgnQGtvYS9yb3V0ZXInKTtcbmNvbnN0IHsgSW52YWxpZENvbmZpZ3VyYXRpb24gfSA9IHJlcXVpcmUoJ0BnZW54L2Vycm9yJyk7XG5cbi8qKlxuICogTW9kdWxlIHJvdXRlciBmb3IgbW91bnRpbmcgYSBzcGVjaWZpYyBjb250cm9sbGVyLlxuICogQG1vZHVsZSBSb3V0ZXJfTW9kdWxlXG4gKi9cblxuLyoqXG4gKiBDcmVhdGUgYSBtb2R1bGUtYmFzZWQgcm91dGVyLiBcbiAqIEBwYXJhbSB7Um91dGFibGV9IGFwcFxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VSb3V0ZSBcbiAqIEBwYXJhbSB7Kn0gbW9kdWxlSXRlbSBcbiAqIEBleGFtcGxlXG4gKiAgICc8YmFzZSBwYXRoPic6IHsgICAgXG4gKiAgICAgICBtb2R1bGU6IHtcbiAqICAgICAgICAgICBtaWRkbGV3YXJlczogXG4gKiAgICAgICAgICAgY29udHJvbGxlcjogXG4gKiAgICAgICB9XG4gKiAgIH1cbiAqXG4gKiAgICc8YmFzZSBwYXRoPic6IHsgICAgXG4gKiAgICAgICBtb2R1bGU6IFwiY29udHJvbGxlclwiXG4gKiAgIH1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXBwLCBiYXNlUm91dGUsIG1vZHVsZUl0ZW0pIHtcbiAgICBsZXQgY29udHJvbGxlclBhdGggPSBwYXRoLmpvaW4oYXBwLmJhY2tlbmRQYXRoLCBMaXRlcmFsLkNPTlRST0xMRVJTX1BBVEgpOyAgIFxuXG4gICAgaWYgKHR5cGVvZiBtb2R1bGVJdGVtID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBbICdjb250cm9sbGVyTmFtZScgXVxuICAgICAgICBtb2R1bGVJdGVtID0geyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IG1vZHVsZUl0ZW1cbiAgICAgICAgfTtcbiAgICB9ICAgIFxuXG4gICAgbGV0IGN1cnJlbnRQcmVmaXggPSB1cmxKb2luKGJhc2VSb3V0ZSwgbW9kdWxlSXRlbS5yb3V0ZSB8fCAnLycpO1xuICAgIGxldCByb3V0ZXIgPSBjdXJyZW50UHJlZml4ID09PSAnLycgPyBuZXcgUm91dGVyKCkgOiBuZXcgUm91dGVyKHtwcmVmaXg6IGN1cnJlbnRQcmVmaXh9KTtcbiAgICBcblxuICAgIGlmIChtb2R1bGVJdGVtLm1pZGRsZXdhcmVzKSB7ICAgICAgICAgICAgXG4gICAgICAgIC8vbW9kdWxlLXdpZGUgbWlkZGxld2FyZXMgICAgICAgXG4gICAgICAgIGFwcC51c2VNaWRkbGV3YXJlcyhyb3V0ZXIsIG1vZHVsZUl0ZW0ubWlkZGxld2FyZXMpO1xuICAgIH0gXG5cbiAgICBjb25zdCBjb250cm9sbGVycyA9IF8uY2FzdEFycmF5KG1vZHVsZUl0ZW0uY29udHJvbGxlcik7XG5cbiAgICBjb250cm9sbGVycy5mb3JFYWNoKG1vZHVsZUNvbnRyb2xsZXIgPT4ge1xuICAgICAgICBsZXQgY29udHJvbGxlckZpbGUgPSBwYXRoLmpvaW4oY29udHJvbGxlclBhdGgsIG1vZHVsZUNvbnRyb2xsZXIgKyAnLmpzJyk7XG4gICAgICAgIGxldCBjb250cm9sbGVyO1xuXG4gICAgICAgIGNvbnRyb2xsZXIgPSByZXF1aXJlKGNvbnRyb2xsZXJGaWxlKTtcbiAgICAgICAgbGV0IGlzQ29udHJvbGxlciA9IGZhbHNlO1xuXG4gICAgICAgIGlmICh0eXBlb2YgY29udHJvbGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY29udHJvbGxlciA9IG5ldyBjb250cm9sbGVyKGFwcCk7XG4gICAgICAgICAgICBpc0NvbnRyb2xsZXIgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgIGZvciAobGV0IGFjdGlvbk5hbWUgaW4gY29udHJvbGxlcikgeyAgICAgICAgXG4gICAgICAgICAgICBsZXQgYWN0aW9uID0gY29udHJvbGxlclthY3Rpb25OYW1lXTsgICAgXG4gICAgICAgICAgICBpZiAodHlwZW9mIGFjdGlvbiAhPT0gJ2Z1bmN0aW9uJykgY29udGludWU7ICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIGxldCBodHRwTWV0aG9kID0gXy5jYXN0QXJyYXkoYWN0aW9uLl9fbWV0YUh0dHBNZXRob2QgfHwgJ2dldCcpOyAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IHN1YlJvdXRlID0gZW5zdXJlTGVmdFNsYXNoKGFjdGlvbi5fX21ldGFSb3V0ZSB8fCBfLmtlYmFiQ2FzZShhY3Rpb25OYW1lKSk7XG5cbiAgICAgICAgICAgIGxldCBiaW5kQWN0aW9uO1xuXG4gICAgICAgICAgICBpZiAoaXNDb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgYmluZEFjdGlvbiA9IGFjdGlvbi5iaW5kKGNvbnRyb2xsZXIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBiaW5kQWN0aW9uID0gYWN0aW9uO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLmVhY2goaHR0cE1ldGhvZCwgbWV0aG9kID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIUxpdGVyYWwuQUxMT1dFRF9IVFRQX01FVEhPRFMuaGFzKG1ldGhvZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1Vuc3VwcG9ydGVkIGh0dHAgbWV0aG9kOiAnICsgbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgICAgICAgICAgICAgYHJvdXRpbmcuJHtiYXNlUm91dGV9Lm1vZHVsZXMgJHttb2R1bGVJdGVtLmNvbnRyb2xsZXJ9LiR7YWN0aW9uTmFtZX1gKTtcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgIGFwcC5hZGRSb3V0ZShyb3V0ZXIsIG1ldGhvZCwgc3ViUm91dGUsIGFjdGlvbi5fX21ldGFNaWRkbGV3YXJlcyA/IFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24uX19tZXRhTWlkZGxld2FyZXMuY29uY2F0KFtiaW5kQWN0aW9uXSkgOiBcbiAgICAgICAgICAgICAgICAgICAgYmluZEFjdGlvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9KTsgICAgXG5cbiAgICBhcHAuYWRkUm91dGVyKHJvdXRlcik7XG59OyJdfQ==