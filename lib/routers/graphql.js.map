{"version":3,"file":"graphql.js","names":["require","path","InvalidConfiguration","Koa","mount","module","exports","app","baseRoute","options","graphqlHTTP","tryRequire","middlewares","schemaProvider","graphqlOpts","schemaFactory","resolve","backendPath","schemaObj","schema","rootValue","router","useMiddlewares","use","mountRouter"],"sources":["../../src/routers/graphql.js"],"sourcesContent":["\"use strict\";\n\nconst path = require('path');\nconst { InvalidConfiguration } = require('@genx/error');\nconst Koa = require('koa');\nconst mount = require('koa-mount');\n\n/**\n * GraphQL router.\n * @module Router_GraphQL\n */\n\n/**\n * Create a GraphQL router.\n * @param {*} app \n * @param {string} baseRoute \n * @param {objects} options \n * @property {string} options.schema\n * @property {object|array} [options.middlewares]\n * @property {boolean} [options.graphiql]\n * @example\n *  '<base path>': {\n *      graphql: {          \n *          middlewares: {},\n *          schema: 'graphql/schema',\n *          rootValue: '',\n *          graphiql: true\n *      }\n *  }\n */\nmodule.exports = async (app, baseRoute, options) => {\n    const graphqlHTTP = app.tryRequire('koa-graphql');        \n\n    const { middlewares, schemaProvider, ...graphqlOpts } = options;\n\n    if (!schemaProvider) {\n        throw new InvalidConfiguration(\n            'Missing schemaProvider config.',\n            app,\n            `routing.${baseRoute}.graphql.schemaProvider`\n        );\n    }\n\n    const schemaFactory = require(path.resolve(app.backendPath, schemaProvider));\n    const schemaObj = await schemaFactory(app);\n\n    if (!schemaObj.schema) {\n        throw new InvalidConfiguration(\n            'The object returned from schemaProvider doesnot contain the schema body.',\n            app,\n            `routing.${baseRoute}.graphql.schemaProvider`\n        );\n    }\n \n    graphqlOpts.schema = schemaObj.schema;\n    if (schemaObj.rootValue) {\n        graphqlOpts.rootValue = schemaObj.rootValue;\n    }\n    \n    let router = new Koa();\n\n    if (middlewares) {\n        app.useMiddlewares(router, middlewares);\n    }\n\n    router.use(mount('/', graphqlHTTP(graphqlOpts)));\n    app.mountRouter(baseRoute, router);\n};"],"mappings":"AAAA,YAAY;;AAACA,OAAA;AAEb,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAM;EAAEE;AAAqB,CAAC,GAAGF,OAAO,CAAC,aAAa,CAAC;AACvD,MAAMG,GAAG,GAAGH,OAAO,CAAC,KAAK,CAAC;AAC1B,MAAMI,KAAK,GAAGJ,OAAO,CAAC,WAAW,CAAC;AAyBlCK,MAAM,CAACC,OAAO,GAAG,OAAOC,GAAG,EAAEC,SAAS,EAAEC,OAAO,KAAK;EAChD,MAAMC,WAAW,GAAGH,GAAG,CAACI,UAAU,CAAC,aAAa,CAAC;EAEjD,MAAM;IAAEC,WAAW;IAAEC,cAAc;IAAE,GAAGC;EAAY,CAAC,GAAGL,OAAO;EAE/D,IAAI,CAACI,cAAc,EAAE;IACjB,MAAM,IAAIX,oBAAoB,CAC1B,gCAAgC,EAChCK,GAAG,EACF,WAAUC,SAAU,yBACzB,CAAC;EACL;EAEA,MAAMO,aAAa,GAAGf,OAAO,CAACC,IAAI,CAACe,OAAO,CAACT,GAAG,CAACU,WAAW,EAAEJ,cAAc,CAAC,CAAC;EAC5E,MAAMK,SAAS,GAAG,MAAMH,aAAa,CAACR,GAAG,CAAC;EAE1C,IAAI,CAACW,SAAS,CAACC,MAAM,EAAE;IACnB,MAAM,IAAIjB,oBAAoB,CAC1B,0EAA0E,EAC1EK,GAAG,EACF,WAAUC,SAAU,yBACzB,CAAC;EACL;EAEAM,WAAW,CAACK,MAAM,GAAGD,SAAS,CAACC,MAAM;EACrC,IAAID,SAAS,CAACE,SAAS,EAAE;IACrBN,WAAW,CAACM,SAAS,GAAGF,SAAS,CAACE,SAAS;EAC/C;EAEA,IAAIC,MAAM,GAAG,IAAIlB,GAAG,CAAC,CAAC;EAEtB,IAAIS,WAAW,EAAE;IACbL,GAAG,CAACe,cAAc,CAACD,MAAM,EAAET,WAAW,CAAC;EAC3C;EAEAS,MAAM,CAACE,GAAG,CAACnB,KAAK,CAAC,GAAG,EAAEM,WAAW,CAACI,WAAW,CAAC,CAAC,CAAC;EAChDP,GAAG,CAACiB,WAAW,CAAChB,SAAS,EAAEa,MAAM,CAAC;AACtC,CAAC"}