{"version":3,"sources":["../../src/appFeatures/passport.js"],"names":["path","require","_","eachAsync_","Feature","Enums","InvalidConfiguration","module","exports","type","SERVICE","load_","app","config","KoaPassport","tryRequire","passport","isEmpty","strategies","initializeMiddleware","initialize","init","middlewares","useSession","session","on","READY","useMiddlewares","router","hasStrategy","name","_strategies","registerService","exposeToServer","server","Array","isArray","strategy","strategyScript","join","backendPath","strategyInitiator"],"mappings":"AAAA;;;;AAOA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAM;AAAEC,EAAAA,CAAF;AAAKC,EAAAA;AAAL,IAAoBF,OAAO,CAAC,YAAD,CAAjC;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAcH,OAAO,CAAC,IAAD,CAAP,CAAcI,KAAlC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA2BL,OAAO,CAAC,aAAD,CAAxC;;AAEAM,MAAM,CAACC,OAAP,GAAiB;AAMbC,EAAAA,IAAI,EAAEL,OAAO,CAACM,OAND;AAqBbC,EAAAA,KAAK,EAAE,UAAUC,GAAV,EAAeC,MAAf,EAAuB;AAC1B,UAAMC,WAAW,GAAGF,GAAG,CAACG,UAAJ,CAAe,cAAf,EAA+BD,WAAnD;AACA,QAAIE,QAAQ,GAAG,IAAIF,WAAJ,EAAf;;AACA,QAAIZ,CAAC,CAACe,OAAF,CAAUJ,MAAV,KAAqBX,CAAC,CAACe,OAAF,CAAUJ,MAAM,CAACK,UAAjB,CAAzB,EAAuD;AACnD,YAAM,IAAIZ,oBAAJ,CACF,8BADE,EAEFM,GAFE,EAGF,qBAHE,CAAN;AAKH;;AAED,QAAIO,oBAAoB,GAAGH,QAAQ,CAACI,UAAT,CAAoBP,MAAM,CAACQ,IAA3B,CAA3B;AAEAL,IAAAA,QAAQ,CAACM,WAAT,GAAuBT,MAAM,CAACU,UAAP,GAAoB,CAAEJ,oBAAF,EAAwBH,QAAQ,CAACQ,OAAT,EAAxB,CAApB,GAAmEL,oBAA1F;AAEAP,IAAAA,GAAG,CAACa,EAAJ,CAAO,YAAYrB,OAAO,CAACsB,KAA3B,EAAkC,MAAM;AACpCd,MAAAA,GAAG,CAACe,cAAJ,CAAmBf,GAAG,CAACgB,MAAvB,EAA+BZ,QAAQ,CAACM,WAAxC;AACH,KAFD;;AAIAN,IAAAA,QAAQ,CAACa,WAAT,GAAwBC,IAAD,IAAU;AAC7B,aAAOA,IAAI,IAAId,QAAQ,CAACe,WAAxB;AACH,KAFD;;AAIAnB,IAAAA,GAAG,CAACoB,eAAJ,CAAoB,UAApB,EAAgChB,QAAhC;;AAEA,QAAIH,MAAM,CAACoB,cAAP,IAAyBrB,GAAG,KAAKA,GAAG,CAACsB,MAAzC,EAAiD;AAC7CtB,MAAAA,GAAG,CAACsB,MAAJ,CAAWF,eAAX,CAA2B,UAA3B,EAAuChB,QAAvC;AACH;;AAED,QAAIE,UAAU,GAAGiB,KAAK,CAACC,OAAN,CAAcvB,MAAM,CAACK,UAArB,IAAmCL,MAAM,CAACK,UAA1C,GAAuD,CAAEL,MAAM,CAACK,UAAT,CAAxE;AAEA,WAAOf,UAAU,CAACe,UAAD,EAAa,MAAMmB,QAAN,IAAkB;AAC5C,UAAIC,cAAc,GAAGtC,IAAI,CAACuC,IAAL,CAAU3B,GAAG,CAAC4B,WAAd,EAA2B,WAA3B,EAAwCH,QAAQ,GAAG,KAAnD,CAArB;;AACA,UAAII,iBAAiB,GAAGxC,OAAO,CAACqC,cAAD,CAA/B;;AACA,aAAOG,iBAAiB,CAAC7B,GAAD,EAAMI,QAAN,CAAxB;AACH,KAJgB,CAAjB;AAKH;AAzDY,CAAjB","sourcesContent":["\"use strict\";\n\n/**\n * Enable passport feature\n * @module Feature_Passport\n */\n\nconst path = require('path');\nconst { _, eachAsync_ } = require('@genx/july');\nconst { Feature } = require('..').Enums;\nconst { InvalidConfiguration } = require('@genx/error');\n\nmodule.exports = {\n\n    /**\n     * This feature is loaded at service stage\n     * @member {string}\n     */\n    type: Feature.SERVICE,\n\n    /**\n     * Load the feature\n     * @param {Routable} app - The app module object\n     * @param {object} config - Passport settings\n     * @property {bool} [config.useSession=false] - Use session or not, default: false\n     *  \n     * @property {object} config.init - Passport initialization settings     \n     * @property {string} [config.init.userProperty='user'] - User property name, default: user      \n     * \n     * @property {array} config.strategies - Passport strategies, e.g. [ 'local', 'facebook' ]\n     * @property {array} config.exposeToServer - Expose the passport servcie to while server\n     * @returns {Promise.<*>}\n     */\n    load_: function (app, config) {\n        const KoaPassport = app.tryRequire('koa-passport').KoaPassport;\n        let passport = new KoaPassport();\n        if (_.isEmpty(config) || _.isEmpty(config.strategies)) {\n            throw new InvalidConfiguration(\n                'Missing passport strategies.',\n                app,\n                'passport.strategies'\n            );\n        }        \n\n        let initializeMiddleware = passport.initialize(config.init);\n\n        passport.middlewares = config.useSession ? [ initializeMiddleware, passport.session() ] : initializeMiddleware;\n\n        app.on('before:' + Feature.READY, () => {\n            app.useMiddlewares(app.router, passport.middlewares);\n        });\n\n        passport.hasStrategy = (name) => {\n            return name in passport._strategies;\n        };\n\n        app.registerService('passport', passport);        \n\n        if (config.exposeToServer && app !== app.server) {\n            app.server.registerService('passport', passport);\n        }\n\n        let strategies = Array.isArray(config.strategies) ? config.strategies : [ config.strategies ];\n\n        return eachAsync_(strategies, async strategy => {\n            let strategyScript = path.join(app.backendPath, 'passports', strategy + '.js');\n            let strategyInitiator = require(strategyScript);\n            return strategyInitiator(app, passport);\n        });\n    }\n};"],"file":"passport.js"}