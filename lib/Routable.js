"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  fs,
  glob,
  urlJoin,
  ensureLeftSlash,
  ensureRightSlash,
  urlAppendQuery
} = require('rk-utils');

const {
  Helpers: {
    tryRequire
  }
} = require('@genx/app');

const Errors = require('./utils/Errors');

const Literal = require('./enum/Literal');

const Koa = require('koa');

const Routable = T => class extends T {
  constructor(name, options) {
    super(name, options);
    this.clientPath = this.toAbsolutePath(this.options.clientPath || Literal.CLIENT_SRC_PATH);
    this.publicPath = this.toAbsolutePath(this.options.publicPath || Literal.PUBLIC_PATH);
    this.router = new Koa();
    this.router.use((ctx, next) => {
      ctx.appModule = this;
      return next();
    });
    this.on('configLoaded', () => {
      let middlewareDir = path.join(this.backendPath, Literal.MIDDLEWARES_PATH);

      if (fs.existsSync(middlewareDir)) {
        this.loadMiddlewaresFrom(middlewareDir);
      }
    });
  }

  async start_() {
    this.middlewareFactoryRegistry = {};
    return super.start_();
  }

  async stop_() {
    delete this.middlewareFactoryRegistry;
    return super.stop_();
  }

  getBackendAction(actionByPath) {
    let lpos = actionByPath.lastIndexOf('.');

    if (lpos === -1) {
      throw new Error(`Invalid action path: ${actionByPath}`);
    }

    let controller = actionByPath.substr(0, lpos);
    let method = actionByPath.substr(lpos + 1);
    let controllerObj;

    try {
      controllerObj = require(path.join(this.backendPath, controller));
    } catch (error) {
      throw new Error(`Backend controller not found: ${controller}`);
    }

    let methodFunc = controllerObj[method];

    if (typeof methodFunc !== 'function') {
      throw new Error(`The specified action is not a function: ${actionByPath}`);
    }

    return methodFunc;
  }

  loadMiddlewaresFrom(dir) {
    let files = glob.sync(path.join(dir, '*.js'), {
      nodir: true
    });
    files.forEach(file => this.registerMiddlewareFactory(path.basename(file, '.js'), require(file)));
  }

  registerMiddlewareFactory(name, factoryMethod) {
    if (!(typeof factoryMethod === 'function')) {
      throw new Error('Invalid middleware factory: ' + name);
    }

    if (name in this.middlewareFactoryRegistry) {
      throw new Errors.ServerError('Middleware "' + name + '" already registered!');
    }

    this.middlewareFactoryRegistry[name] = factoryMethod;
    this.log('verbose', `Registered named middleware [${name}].`);
  }

  getMiddlewareFactory(name) {
    if (this.middlewareFactoryRegistry.hasOwnProperty(name)) {
      return this.middlewareFactoryRegistry[name];
    }

    if (this.server && this.server !== this) {
      return this.server.getMiddlewareFactory(name);
    }

    let npmMiddleware = tryRequire(name);

    if (npmMiddleware) {
      return npmMiddleware;
    }

    throw new Errors.ServerError(`Don't know where to load middleware "${name}".`);
  }

  useMiddlewares(router, middlewares) {
    let middlewareFactory, middleware;
    let middlewareFunctions = [];

    if (_.isPlainObject(middlewares)) {
      _.forOwn(middlewares, (options, name) => {
        middlewareFactory = this.getMiddlewareFactory(name);
        middleware = middlewareFactory(options, this);
        middlewareFunctions.push({
          name,
          middleware
        });
      });
    } else {
      middlewares = _.castArray(middlewares);

      _.each(middlewares, middlewareEntry => {
        let type = typeof middlewareEntry;

        if (type === 'string') {
          middlewareFactory = this.getMiddlewareFactory(middlewareEntry);
          middleware = middlewareFactory(undefined, this);
          middlewareFunctions.push({
            name: middlewareEntry,
            middleware
          });
        } else if (type === 'function') {
          middlewareFunctions.push({
            name: middlewareEntry.name || 'unamed middleware',
            middleware: middlewareEntry
          });
        } else if (Array.isArray(middlewareEntry)) {
          if (middlewareEntry.length === 0) {
            throw new Errors.InvalidConfiguration('Empty array found as middleware entry!', this, 'middlewares');
          }

          middlewareFactory = this.getMiddlewareFactory(middlewareEntry[0]);
          middleware = middlewareFactory(middlewareEntry.length > 1 ? middlewareEntry[1] : null, this);
          middlewareFunctions.push({
            name: middlewareEntry[0],
            middleware
          });
        } else {
          if (!_.isPlainObject(middlewareEntry) || !('name' in middlewareEntry)) {
            throw new Errors.InvalidConfiguration('Invalid middleware entry!', this, 'middlewares');
          }

          middlewareFactory = this.getMiddlewareFactory(middlewareEntry.name);
          middleware = middlewareFactory(middlewareEntry.options, this);
          middlewareFunctions.push({
            name: middlewareEntry.name,
            middleware
          });
        }
      });
    }

    middlewareFunctions.forEach(({
      name,
      middleware
    }) => {
      if (Array.isArray(middleware)) {
        middleware.forEach(m => this.useMiddleware(router, m, name));
      } else {
        this.useMiddleware(router, middleware, name);
      }
    });
    return this;
  }

  addRoute(router, method, route, actions) {
    let handlers = [],
        middlewareFactory;

    if (_.isPlainObject(actions)) {
      _.forOwn(actions, (options, name) => {
        middlewareFactory = this.getMiddlewareFactory(name);
        handlers.push(this._wrapMiddlewareTracer(middlewareFactory(options, this), name));
      });
    } else {
      actions = _.castArray(actions);
      let lastIndex = actions.length - 1;

      _.each(actions, (action, i) => {
        let type = typeof action;

        if (i === lastIndex) {
          if (type === 'string' && action.lastIndexOf('.') > 0) {
            action = {
              name: 'action',
              options: action
            };
            type = 'object';
          }
        }

        if (type === 'string') {
          middlewareFactory = this.getMiddlewareFactory(action);
          let middleware = middlewareFactory(null, this);

          if (Array.isArray(middleware)) {
            middleware.forEach((middlewareItem, i) => handlers.push(this._wrapMiddlewareTracer(middlewareItem, `${action}-${i}` + (middleware.name ? '-' + middleware.name : ''))));
          } else {
            handlers.push(this._wrapMiddlewareTracer(middleware, action));
          }
        } else if (type === 'function') {
          handlers.push(this._wrapMiddlewareTracer(action));
        } else if (Array.isArray(action)) {
          if (!(action.length > 0 && action.length <= 2)) {
            throw new Error('Invalid middleware entry');
          }

          middlewareFactory = this.getMiddlewareFactory(action[0]);
          handlers.push(this._wrapMiddlewareTracer(middlewareFactory(action.length > 1 ? action[1] : undefined, this)));
        } else {
          if (!(_.isPlainObject(action) && 'name' in action)) {
            throw new Error('Invalid middleware entry');
          }

          middlewareFactory = this.getMiddlewareFactory(action.name);
          handlers.push(this._wrapMiddlewareTracer(middlewareFactory(action.options, this), action.name));
        }
      });
    }

    router[method](route, ...handlers);
    let endpoint = router.opts.prefix ? urlJoin(this.route, router.opts.prefix, route) : urlJoin(this.route, route);
    this.log('verbose', `Route "${method}:${endpoint}" is added from module [${this.name}].`);
    return this;
  }

  addRouter(nestedRouter) {
    this.router.use(nestedRouter.routes());
    this.router.use(nestedRouter.allowedMethods());
    return this;
  }

  toWebPath(relativePath, ...pathOrQuery) {
    let url, query;

    if (pathOrQuery && pathOrQuery.length > 0 && (pathOrQuery.length > 1 || pathOrQuery[0] !== undefined)) {
      if (_.isObject(pathOrQuery[pathOrQuery.length - 1])) {
        query = pathOrQuery.pop();
      }

      pathOrQuery.unshift(relativePath);
      url = urlJoin(this.route, ...pathOrQuery);
    } else {
      url = urlJoin(this.route, relativePath);
    }

    url = ensureLeftSlash(url);

    if (query) {
      url = urlAppendQuery(url, query);
      url = url.replace('/?', '?');
    }

    return url;
  }

  wrapAction(action) {
    return async ctx => {
      ctx.toUrl = (relativePath, ...pathOrQuery) => {
        return ctx.origin + this.toWebPath(relativePath, ...pathOrQuery);
      };

      Object.assign(ctx.state, {
        _self: ctx.originalUrl || this.toWebPath(ctx.url),
        __: this.__,
        _base: ensureRightSlash(this.toWebPath()),
        _makePath: (relativePath, query) => this.toWebPath(relativePath, query),
        _makeUrl: (relativePath, query) => ctx.toUrl(relativePath, query)
      });

      if (ctx.csrf) {
        ctx.state._csrf = ctx.csrf;
      }

      return action(ctx);
    };
  }

  useMiddleware(router, middleware, name) {
    if (!(typeof middleware === 'function')) {
      throw new Error(middleware);
    }

    router.use(this._wrapMiddlewareTracer(middleware, name));
    this.log('verbose', `Attached middleware [${name}].`);
  }

  _wrapMiddlewareTracer(middleware, name) {
    if (this.options.traceMiddlewares) {
      return async (ctx, next) => {
        this.log('debug', `Step in middleware "${name || middleware.name}" ...`);
        let ret = await middleware(ctx, next);
        this.log('debug', `Step out from middleware "${name || middleware.name}".`);
        return ret;
      };
    }

    return middleware;
  }

  _getFeatureFallbackPath() {
    return super._getFeatureFallbackPath().concat([path.join(this.backendPath, Literal.FEATURES_PATH)]);
  }

};

module.exports = Routable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Sb3V0YWJsZS5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIl8iLCJmcyIsImdsb2IiLCJ1cmxKb2luIiwiZW5zdXJlTGVmdFNsYXNoIiwiZW5zdXJlUmlnaHRTbGFzaCIsInVybEFwcGVuZFF1ZXJ5IiwiSGVscGVycyIsInRyeVJlcXVpcmUiLCJFcnJvcnMiLCJMaXRlcmFsIiwiS29hIiwiUm91dGFibGUiLCJUIiwiY29uc3RydWN0b3IiLCJuYW1lIiwib3B0aW9ucyIsImNsaWVudFBhdGgiLCJ0b0Fic29sdXRlUGF0aCIsIkNMSUVOVF9TUkNfUEFUSCIsInB1YmxpY1BhdGgiLCJQVUJMSUNfUEFUSCIsInJvdXRlciIsInVzZSIsImN0eCIsIm5leHQiLCJhcHBNb2R1bGUiLCJvbiIsIm1pZGRsZXdhcmVEaXIiLCJqb2luIiwiYmFja2VuZFBhdGgiLCJNSURETEVXQVJFU19QQVRIIiwiZXhpc3RzU3luYyIsImxvYWRNaWRkbGV3YXJlc0Zyb20iLCJzdGFydF8iLCJtaWRkbGV3YXJlRmFjdG9yeVJlZ2lzdHJ5Iiwic3RvcF8iLCJnZXRCYWNrZW5kQWN0aW9uIiwiYWN0aW9uQnlQYXRoIiwibHBvcyIsImxhc3RJbmRleE9mIiwiRXJyb3IiLCJjb250cm9sbGVyIiwic3Vic3RyIiwibWV0aG9kIiwiY29udHJvbGxlck9iaiIsImVycm9yIiwibWV0aG9kRnVuYyIsImRpciIsImZpbGVzIiwic3luYyIsIm5vZGlyIiwiZm9yRWFjaCIsImZpbGUiLCJyZWdpc3Rlck1pZGRsZXdhcmVGYWN0b3J5IiwiYmFzZW5hbWUiLCJmYWN0b3J5TWV0aG9kIiwiU2VydmVyRXJyb3IiLCJsb2ciLCJnZXRNaWRkbGV3YXJlRmFjdG9yeSIsImhhc093blByb3BlcnR5Iiwic2VydmVyIiwibnBtTWlkZGxld2FyZSIsInVzZU1pZGRsZXdhcmVzIiwibWlkZGxld2FyZXMiLCJtaWRkbGV3YXJlRmFjdG9yeSIsIm1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlRnVuY3Rpb25zIiwiaXNQbGFpbk9iamVjdCIsImZvck93biIsInB1c2giLCJjYXN0QXJyYXkiLCJlYWNoIiwibWlkZGxld2FyZUVudHJ5IiwidHlwZSIsInVuZGVmaW5lZCIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsIkludmFsaWRDb25maWd1cmF0aW9uIiwibSIsInVzZU1pZGRsZXdhcmUiLCJhZGRSb3V0ZSIsInJvdXRlIiwiYWN0aW9ucyIsImhhbmRsZXJzIiwiX3dyYXBNaWRkbGV3YXJlVHJhY2VyIiwibGFzdEluZGV4IiwiYWN0aW9uIiwiaSIsIm1pZGRsZXdhcmVJdGVtIiwiZW5kcG9pbnQiLCJvcHRzIiwicHJlZml4IiwiYWRkUm91dGVyIiwibmVzdGVkUm91dGVyIiwicm91dGVzIiwiYWxsb3dlZE1ldGhvZHMiLCJ0b1dlYlBhdGgiLCJyZWxhdGl2ZVBhdGgiLCJwYXRoT3JRdWVyeSIsInVybCIsInF1ZXJ5IiwiaXNPYmplY3QiLCJwb3AiLCJ1bnNoaWZ0IiwicmVwbGFjZSIsIndyYXBBY3Rpb24iLCJ0b1VybCIsIm9yaWdpbiIsIk9iamVjdCIsImFzc2lnbiIsInN0YXRlIiwiX3NlbGYiLCJvcmlnaW5hbFVybCIsIl9fIiwiX2Jhc2UiLCJfbWFrZVBhdGgiLCJfbWFrZVVybCIsImNzcmYiLCJfY3NyZiIsInRyYWNlTWlkZGxld2FyZXMiLCJyZXQiLCJfZ2V0RmVhdHVyZUZhbGxiYWNrUGF0aCIsImNvbmNhdCIsIkZFQVRVUkVTX1BBVEgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBLEVBQUw7QUFBU0MsRUFBQUEsSUFBVDtBQUFlQyxFQUFBQSxPQUFmO0FBQXdCQyxFQUFBQSxlQUF4QjtBQUF5Q0MsRUFBQUEsZ0JBQXpDO0FBQTJEQyxFQUFBQTtBQUEzRCxJQUE4RVAsT0FBTyxDQUFDLFVBQUQsQ0FBM0Y7O0FBQ0Es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QztBQUMvQixhQUFPLE9BQU9qRyxHQUFQLEVBQVlDLElBQVosS0FBcUI7QUFDeEIsYUFBS2lDLEdBQUwsQ0FBUyxPQUFULEVBQW1CLHVCQUFzQjNDLElBQUksSUFBSW1ELFVBQVUsQ0FBQ25ELElBQUssT0FBakU7QUFDQSxZQUFJMkcsR0FBRyxHQUFHLE1BQU14RCxVQUFVLENBQUMxQyxHQUFELEVBQU1DLElBQU4sQ0FBMUI7QUFDQSxhQUFLaUMsR0FBTCxDQUFTLE9BQVQsRUFBbUIsNkJBQTRCM0MsSUFBSSxJQUFJbUQsVUFBVSxDQUFDbkQsSUFBSyxJQUF2RTtBQUNBLGVBQU8yRyxHQUFQO0FBQ0gsT0FMRDtBQU1IOztBQUVELFdBQU94RCxVQUFQO0FBQ0g7O0FBRUR5RCxFQUFBQSx1QkFBdUIsR0FBRztBQUN0QixXQUFPLE1BQU1BLHVCQUFOLEdBQWdDQyxNQUFoQyxDQUF1QyxDQUFFOUgsSUFBSSxDQUFDK0IsSUFBTCxDQUFVLEtBQUtDLFdBQWYsRUFBNEJwQixPQUFPLENBQUNtSCxhQUFwQyxDQUFGLENBQXZDLENBQVA7QUFDSDs7QUEzV2lDLENBQXRDOztBQThXQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCbkgsUUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHsgXywgZnMsIGdsb2IsIHVybEpvaW4sIGVuc3VyZUxlZnRTbGFzaCwgZW5zdXJlUmlnaHRTbGFzaCwgdXJsQXBwZW5kUXVlcnkgfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IEhlbHBlcnM6IHsgdHJ5UmVxdWlyZSB9IH0gPSByZXF1aXJlKCdAZ2VueC9hcHAnKTtcbmNvbnN0IEVycm9ycyA9IHJlcXVpcmUoJy4vdXRpbHMvRXJyb3JzJyk7XG5jb25zdCBMaXRlcmFsID0gcmVxdWlyZSgnLi9lbnVtL0xpdGVyYWwnKTtcbmNvbnN0IEtvYSA9IHJlcXVpcmUoJ2tvYScpO1xuXG5jb25zdCBSb3V0YWJsZSA9IFQgPT4gY2xhc3MgZXh0ZW5kcyBUIHsgICAgXG4gICAgLyoqICAgICBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSByb3V0YWJsZSBpbnN0YW5jZS4gICAgIFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gLSBSb3V0YWJsZSBvcHRpb25zICAgICAgICAgICAgICAgXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtvcHRpb25zLmJhY2tlbmRQYXRoPSdzZXJ2ZXInXSAtIFJlbGF0aXZlIHBhdGggb2YgYmFjay1lbmQgc2VydmVyIHNvdXJjZSBmaWxlc1xuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbb3B0aW9ucy5jbGllbnRQYXRoPSdjbGllbnQnXSAtIFJlbGF0aXZlIHBhdGggb2YgZnJvbnQtZW5kIGNsaWVudCBzb3VyY2UgZmlsZXMgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbb3B0aW9ucy5wdWJsaWNQYXRoPSdwdWJsaWMnXSAtIFJlbGF0aXZlIHBhdGggb2YgZnJvbnQtZW5kIHN0YXRpYyBmaWxlcyBcbiAgICAgKi8gICAgICAgICBcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG5hbWUsIG9wdGlvbnMpOyAgICAgICAgXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZyb250ZW5kIHNvdXJjZSBmaWxlcyBwYXRoLlxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICAgICAqKi9cbiAgICAgICAgdGhpcy5jbGllbnRQYXRoID0gdGhpcy50b0Fic29sdXRlUGF0aCh0aGlzLm9wdGlvbnMuY2xpZW50UGF0aCB8fCBMaXRlcmFsLkNMSUVOVF9TUkNfUEFUSCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZyb250ZW5kIHN0YXRpYyBmaWxlcyBwYXRoLlxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICAgICAqKi9cbiAgICAgICAgdGhpcy5wdWJsaWNQYXRoID0gdGhpcy50b0Fic29sdXRlUGF0aCh0aGlzLm9wdGlvbnMucHVibGljUGF0aCB8fCBMaXRlcmFsLlBVQkxJQ19QQVRIKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRWFjaCBhcHAgaGFzIGl0cyBvd24gcm91dGVyLlxuICAgICAgICAgKiBAbWVtYmVyIHtLb2F9XG4gICAgICAgICAqKi9cbiAgICAgICAgdGhpcy5yb3V0ZXIgPSBuZXcgS29hKCk7XG5cbiAgICAgICAgLy9pbmplY3QgdGhlIGFwcE1vZHVsZSBpbnN0YW5jZSBpbiB0aGUgZmlyc3QgbWlkZGxld2FyZVxuICAgICAgICB0aGlzLnJvdXRlci51c2UoKGN0eCwgbmV4dCkgPT4geyBcbiAgICAgICAgICAgIGN0eC5hcHBNb2R1bGUgPSB0aGlzOyBcbiAgICAgICAgICAgIHJldHVybiBuZXh0KCk7IFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLm9uKCdjb25maWdMb2FkZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAvL2xvYWQgbWlkZGxld2FyZXMgaWYgZXhpc3RzIGluIHNlcnZlciBvciBhcHAgcGF0aFxuICAgICAgICAgICAgbGV0IG1pZGRsZXdhcmVEaXIgPSBwYXRoLmpvaW4odGhpcy5iYWNrZW5kUGF0aCwgTGl0ZXJhbC5NSURETEVXQVJFU19QQVRIKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGZzLmV4aXN0c1N5bmMobWlkZGxld2FyZURpcikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRNaWRkbGV3YXJlc0Zyb20obWlkZGxld2FyZURpcik7XG4gICAgICAgICAgICB9ICAgICAgICAgICAgXG4gICAgICAgIH0pOyAgXG4gICAgfVxuXG4gICAgYXN5bmMgc3RhcnRfKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogTWlkZGxld2FyZSBmYWN0b3J5IHJlZ2lzdHJ5LlxuICAgICAgICAgKiBAbWVtYmVyIHtvYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVGYWN0b3J5UmVnaXN0cnkgPSB7fTtcblxuICAgICAgICByZXR1cm4gc3VwZXIuc3RhcnRfKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgc3RvcF8oKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLm1pZGRsZXdhcmVGYWN0b3J5UmVnaXN0cnk7XG5cbiAgICAgICAgcmV0dXJuIHN1cGVyLnN0b3BfKCk7XG4gICAgfVxuXG4gICAgZ2V0QmFja2VuZEFjdGlvbihhY3Rpb25CeVBhdGgpIHtcbiAgICAgICAgbGV0IGxwb3MgPSBhY3Rpb25CeVBhdGgubGFzdEluZGV4T2YoJy4nKTtcblxuICAgICAgICBpZiAobHBvcyA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBhY3Rpb24gcGF0aDogJHthY3Rpb25CeVBhdGh9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY29udHJvbGxlciA9IGFjdGlvbkJ5UGF0aC5zdWJzdHIoMCwgbHBvcyk7XG4gICAgICAgIGxldCBtZXRob2QgPSBhY3Rpb25CeVBhdGguc3Vic3RyKGxwb3MrMSk7XG4gICAgICAgIGxldCBjb250cm9sbGVyT2JqO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb250cm9sbGVyT2JqID0gcmVxdWlyZShwYXRoLmpvaW4odGhpcy5iYWNrZW5kUGF0aCwgY29udHJvbGxlcikpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBCYWNrZW5kIGNvbnRyb2xsZXIgbm90IGZvdW5kOiAke2NvbnRyb2xsZXJ9YCk7XG4gICAgICAgIH0gICAgICAgXG5cbiAgICAgICAgbGV0IG1ldGhvZEZ1bmMgPSBjb250cm9sbGVyT2JqW21ldGhvZF07XG4gICAgICAgIGlmICh0eXBlb2YgbWV0aG9kRnVuYyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgc3BlY2lmaWVkIGFjdGlvbiBpcyBub3QgYSBmdW5jdGlvbjogJHthY3Rpb25CeVBhdGh9YCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWV0aG9kRnVuYztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb2FkIGFuZCByZWdzaXRlciBtaWRkbGV3YXJlIGZpbGVzIGZyb20gYSBzcGVjaWZpZWQgcGF0aC5cbiAgICAgKiBAcGFyYW0gZGlyXG4gICAgICovXG4gICAgbG9hZE1pZGRsZXdhcmVzRnJvbShkaXIpIHtcbiAgICAgICAgbGV0IGZpbGVzID0gZ2xvYi5zeW5jKHBhdGguam9pbihkaXIsICcqLmpzJyksIHtub2RpcjogdHJ1ZX0pO1xuICAgICAgICBmaWxlcy5mb3JFYWNoKGZpbGUgPT4gdGhpcy5yZWdpc3Rlck1pZGRsZXdhcmVGYWN0b3J5KHBhdGguYmFzZW5hbWUoZmlsZSwgJy5qcycpLCByZXF1aXJlKGZpbGUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgdGhlIGZhY3RvcnkgbWV0aG9kIG9mIGEgbmFtZWQgbWlkZGxld2FyZS4gICAgIFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIG1pZGRsZXdhcmUgXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gZmFjdG9yeU1ldGhvZCAtIFRoZSBmYWN0b3J5IG1ldGhvZCBvZiBhIG1pZGRsZXdhcmVcbiAgICAgKi9cbiAgICByZWdpc3Rlck1pZGRsZXdhcmVGYWN0b3J5KG5hbWUsIGZhY3RvcnlNZXRob2QpIHtcbiAgICAgICAgcHJlOiB0eXBlb2YgZmFjdG9yeU1ldGhvZCA9PT0gJ2Z1bmN0aW9uJywgJ0ludmFsaWQgbWlkZGxld2FyZSBmYWN0b3J5OiAnICsgbmFtZTsgICAgICAgIFxuXG4gICAgICAgIGlmIChuYW1lIGluIHRoaXMubWlkZGxld2FyZUZhY3RvcnlSZWdpc3RyeSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9ycy5TZXJ2ZXJFcnJvcignTWlkZGxld2FyZSBcIicrIG5hbWUgKydcIiBhbHJlYWR5IHJlZ2lzdGVyZWQhJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1pZGRsZXdhcmVGYWN0b3J5UmVnaXN0cnlbbmFtZV0gPSBmYWN0b3J5TWV0aG9kO1xuICAgICAgICB0aGlzLmxvZygndmVyYm9zZScsIGBSZWdpc3RlcmVkIG5hbWVkIG1pZGRsZXdhcmUgWyR7bmFtZX1dLmApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZmFjdG9yeSBtZXRob2Qgb2YgYSBtaWRkbGV3YXJlIGZyb20gbW9kdWxlIGhpZXJhcmNoeS4gICAgIFxuICAgICAqIEBwYXJhbSBuYW1lXG4gICAgICogQHJldHVybnMge2Z1bmN0aW9ufVxuICAgICAqL1xuICAgIGdldE1pZGRsZXdhcmVGYWN0b3J5KG5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMubWlkZGxld2FyZUZhY3RvcnlSZWdpc3RyeS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWlkZGxld2FyZUZhY3RvcnlSZWdpc3RyeVtuYW1lXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnNlcnZlciAmJiB0aGlzLnNlcnZlciAhPT0gdGhpcykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VydmVyLmdldE1pZGRsZXdhcmVGYWN0b3J5KG5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG5wbU1pZGRsZXdhcmUgPSB0cnlSZXF1aXJlKG5hbWUpO1xuICAgICAgICBpZiAobnBtTWlkZGxld2FyZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5wbU1pZGRsZXdhcmU7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3JzLlNlcnZlckVycm9yKGBEb24ndCBrbm93IHdoZXJlIHRvIGxvYWQgbWlkZGxld2FyZSBcIiR7bmFtZX1cIi5gKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2UgbWlkZGxld2FyZXNcbiAgICAgKiBAcGFyYW0ge1JvdXRlcn0gcm91dGVyXG4gICAgICogQHBhcmFtIHsqfSBtaWRkbGV3YXJlcyAtIENhbiBiZSBhbiBhcnJheSBvZiBtaWRkbGV3YXJlIGVudHJpZXMgb3IgYSBrZXktdmFsdWUgbGlzdCBvZiByZWdpc3RlcnJlZCBtaWRkbGV3YXJlc1xuICAgICAqIEByZXR1cm5zIHtSb3V0YWJsZX1cbiAgICAgKi9cbiAgICB1c2VNaWRkbGV3YXJlcyhyb3V0ZXIsIG1pZGRsZXdhcmVzKSB7XG4gICAgICAgIGxldCBtaWRkbGV3YXJlRmFjdG9yeSwgbWlkZGxld2FyZTtcbiAgICAgICAgbGV0IG1pZGRsZXdhcmVGdW5jdGlvbnMgPSBbXTtcbiAgICAgICAgXG4gICAgICAgIGlmIChfLmlzUGxhaW5PYmplY3QobWlkZGxld2FyZXMpKSB7XG4gICAgICAgICAgICBfLmZvck93bihtaWRkbGV3YXJlcywgKG9wdGlvbnMsIG5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICBtaWRkbGV3YXJlRmFjdG9yeSA9IHRoaXMuZ2V0TWlkZGxld2FyZUZhY3RvcnkobmFtZSk7ICAgXG4gICAgICAgICAgICAgICAgbWlkZGxld2FyZSA9IG1pZGRsZXdhcmVGYWN0b3J5KG9wdGlvbnMsIHRoaXMpO1xuICAgICAgICAgICAgICAgIG1pZGRsZXdhcmVGdW5jdGlvbnMucHVzaCh7IG5hbWUsIG1pZGRsZXdhcmUgfSk7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtaWRkbGV3YXJlcyA9IF8uY2FzdEFycmF5KG1pZGRsZXdhcmVzKTsgICAgICAgICAgXG4gICAgICAgIFxuICAgICAgICAgICAgXy5lYWNoKG1pZGRsZXdhcmVzLCBtaWRkbGV3YXJlRW50cnkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB0eXBlID0gdHlwZW9mIG1pZGRsZXdhcmVFbnRyeTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBbICduYW1lZE1pZGRsZXdhcmUnIF1cbiAgICAgICAgICAgICAgICAgICAgbWlkZGxld2FyZUZhY3RvcnkgPSB0aGlzLmdldE1pZGRsZXdhcmVGYWN0b3J5KG1pZGRsZXdhcmVFbnRyeSk7XG4gICAgICAgICAgICAgICAgICAgIG1pZGRsZXdhcmUgPSBtaWRkbGV3YXJlRmFjdG9yeSh1bmRlZmluZWQsIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBtaWRkbGV3YXJlRnVuY3Rpb25zLnB1c2goeyBuYW1lOiBtaWRkbGV3YXJlRW50cnkgLCBtaWRkbGV3YXJlIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBtaWRkbGV3YXJlRnVuY3Rpb25zLnB1c2goeyBuYW1lOiBtaWRkbGV3YXJlRW50cnkubmFtZSB8fCAndW5hbWVkIG1pZGRsZXdhcmUnLCBtaWRkbGV3YXJlOiBtaWRkbGV3YXJlRW50cnl9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkobWlkZGxld2FyZUVudHJ5KSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBbIFsgJ25hbWVkTWlkZGxld2FyZScsIGNvbmZpZyBdIF1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG1pZGRsZXdhcmVFbnRyeS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcnMuSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0VtcHR5IGFycmF5IGZvdW5kIGFzIG1pZGRsZXdhcmUgZW50cnkhJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtaWRkbGV3YXJlcydcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBtaWRkbGV3YXJlRmFjdG9yeSA9IHRoaXMuZ2V0TWlkZGxld2FyZUZhY3RvcnkobWlkZGxld2FyZUVudHJ5WzBdKTtcbiAgICAgICAgICAgICAgICAgICAgbWlkZGxld2FyZSA9IG1pZGRsZXdhcmVGYWN0b3J5KG1pZGRsZXdhcmVFbnRyeS5sZW5ndGggPiAxID8gbWlkZGxld2FyZUVudHJ5WzFdIDogbnVsbCwgdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIG1pZGRsZXdhcmVGdW5jdGlvbnMucHVzaCh7IG5hbWU6IG1pZGRsZXdhcmVFbnRyeVswXSwgbWlkZGxld2FyZSB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV8uaXNQbGFpbk9iamVjdChtaWRkbGV3YXJlRW50cnkpIHx8ICEoJ25hbWUnIGluIG1pZGRsZXdhcmVFbnRyeSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcnMuSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0ludmFsaWQgbWlkZGxld2FyZSBlbnRyeSEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21pZGRsZXdhcmVzJ1xuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG1pZGRsZXdhcmVGYWN0b3J5ID0gdGhpcy5nZXRNaWRkbGV3YXJlRmFjdG9yeShtaWRkbGV3YXJlRW50cnkubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIG1pZGRsZXdhcmUgPSBtaWRkbGV3YXJlRmFjdG9yeShtaWRkbGV3YXJlRW50cnkub3B0aW9ucywgdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIG1pZGRsZXdhcmVGdW5jdGlvbnMucHVzaCh7IG5hbWU6IG1pZGRsZXdhcmVFbnRyeS5uYW1lLCBtaWRkbGV3YXJlIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IFxuICAgICAgICBcbiAgICAgICAgbWlkZGxld2FyZUZ1bmN0aW9ucy5mb3JFYWNoKCh7IG5hbWUsIG1pZGRsZXdhcmUgfSkgPT4geyAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobWlkZGxld2FyZSkpIHtcbiAgICAgICAgICAgICAgICBtaWRkbGV3YXJlLmZvckVhY2gobSA9PiB0aGlzLnVzZU1pZGRsZXdhcmUocm91dGVyLCBtLCBuYW1lKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudXNlTWlkZGxld2FyZShyb3V0ZXIsIG1pZGRsZXdhcmUsIG5hbWUpO1xuICAgICAgICAgICAgfSAgICAgICAgICAgIFxuICAgICAgICB9KTsgICAgICAgIFxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIHJvdXRlIHRvIGEgcm91dGVyLCBza2lwcGVkIHdoaWxlIHRoZSBzZXJ2ZXIgcnVubmluZyBpbiBkZWFmIG1vZGUuICAgICBcbiAgICAgKiBAcGFyYW0gcm91dGVyXG4gICAgICogQHBhcmFtIG1ldGhvZFxuICAgICAqIEBwYXJhbSByb3V0ZVxuICAgICAqIEBwYXJhbSBhY3Rpb25zXG4gICAgICovXG4gICAgYWRkUm91dGUocm91dGVyLCBtZXRob2QsIHJvdXRlLCBhY3Rpb25zKSB7XG4gICAgICAgIGxldCBoYW5kbGVycyA9IFtdLCBtaWRkbGV3YXJlRmFjdG9yeTtcblxuICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KGFjdGlvbnMpKSB7XG4gICAgICAgICAgICBfLmZvck93bihhY3Rpb25zLCAob3B0aW9ucywgbmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIG1pZGRsZXdhcmVGYWN0b3J5ID0gdGhpcy5nZXRNaWRkbGV3YXJlRmFjdG9yeShuYW1lKTtcbiAgICAgICAgICAgICAgICBoYW5kbGVycy5wdXNoKHRoaXMuX3dyYXBNaWRkbGV3YXJlVHJhY2VyKG1pZGRsZXdhcmVGYWN0b3J5KG9wdGlvbnMsIHRoaXMpLCBuYW1lKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFjdGlvbnMgPSBfLmNhc3RBcnJheShhY3Rpb25zKTtcbiAgICAgICAgICAgIGxldCBsYXN0SW5kZXggPSBhY3Rpb25zLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgICAgIF8uZWFjaChhY3Rpb25zLCAoYWN0aW9uLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHR5cGUgPSB0eXBlb2YgYWN0aW9uO1xuXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBsYXN0IG1pZGRsZXdhcmUgbWF5IGJlIGFuIGFjdGlvblxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgYWN0aW9uLmxhc3RJbmRleE9mKCcuJykgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2FjdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogYWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gJ29iamVjdCc7XG4gICAgICAgICAgICAgICAgICAgIH0gICAgXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFsgJ25hbWVkTWlkZGxld2FyZScgXVxuICAgICAgICAgICAgICAgICAgICBtaWRkbGV3YXJlRmFjdG9yeSA9IHRoaXMuZ2V0TWlkZGxld2FyZUZhY3RvcnkoYWN0aW9uKTsgICBcblxuICAgICAgICAgICAgICAgICAgICBsZXQgbWlkZGxld2FyZSA9IG1pZGRsZXdhcmVGYWN0b3J5KG51bGwsIHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vaW4gY2FzZSBpdCdzIHJlZ2lzdGVyIGJ5IHRoZSBtaWRkbGV3YXJlRmFjdG9yeSBmZWF0dXJlXG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG1pZGRsZXdhcmUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaWRkbGV3YXJlLmZvckVhY2goKG1pZGRsZXdhcmVJdGVtLCBpKSA9PiBoYW5kbGVycy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3dyYXBNaWRkbGV3YXJlVHJhY2VyKG1pZGRsZXdhcmVJdGVtLCBgJHthY3Rpb259LSR7aX1gICsgKG1pZGRsZXdhcmUubmFtZSA/ICgnLScgKyBtaWRkbGV3YXJlLm5hbWUpIDogJycpKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXJzLnB1c2godGhpcy5fd3JhcE1pZGRsZXdhcmVUcmFjZXIobWlkZGxld2FyZSwgYWN0aW9uKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcnMucHVzaCh0aGlzLl93cmFwTWlkZGxld2FyZVRyYWNlcihhY3Rpb24pKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYWN0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnQ6IGFjdGlvbi5sZW5ndGggPiAwICYmIGFjdGlvbi5sZW5ndGggPD0gMiwgJ0ludmFsaWQgbWlkZGxld2FyZSBlbnRyeSc7XG5cbiAgICAgICAgICAgICAgICAgICAgbWlkZGxld2FyZUZhY3RvcnkgPSB0aGlzLmdldE1pZGRsZXdhcmVGYWN0b3J5KGFjdGlvblswXSk7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcnMucHVzaCh0aGlzLl93cmFwTWlkZGxld2FyZVRyYWNlcihtaWRkbGV3YXJlRmFjdG9yeShhY3Rpb24ubGVuZ3RoID4gMSA/IGFjdGlvblsxXSA6IHVuZGVmaW5lZCwgdGhpcykpKTsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydDogXy5pc1BsYWluT2JqZWN0KGFjdGlvbikgJiYgJ25hbWUnIGluIGFjdGlvbiwgJ0ludmFsaWQgbWlkZGxld2FyZSBlbnRyeSc7XG5cbiAgICAgICAgICAgICAgICAgICAgbWlkZGxld2FyZUZhY3RvcnkgPSB0aGlzLmdldE1pZGRsZXdhcmVGYWN0b3J5KGFjdGlvbi5uYW1lKTsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVycy5wdXNoKHRoaXMuX3dyYXBNaWRkbGV3YXJlVHJhY2VyKG1pZGRsZXdhcmVGYWN0b3J5KGFjdGlvbi5vcHRpb25zLCB0aGlzKSwgYWN0aW9uLm5hbWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgcm91dGVyW21ldGhvZF0ocm91dGUsIC4uLmhhbmRsZXJzKTtcblxuICAgICAgICBsZXQgZW5kcG9pbnQgPSByb3V0ZXIub3B0cy5wcmVmaXggPyB1cmxKb2luKHRoaXMucm91dGUsIHJvdXRlci5vcHRzLnByZWZpeCwgcm91dGUpIDogdXJsSm9pbih0aGlzLnJvdXRlLCByb3V0ZSk7XG5cbiAgICAgICAgdGhpcy5sb2coJ3ZlcmJvc2UnLCBgUm91dGUgXCIke21ldGhvZH06JHtlbmRwb2ludH1cIiBpcyBhZGRlZCBmcm9tIG1vZHVsZSBbJHt0aGlzLm5hbWV9XS5gKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9ICAgIFxuXG4gICAgLyoqXG4gICAgICogQXR0YWNoIGEgcm91dGVyIHRvIHRoaXMgYXBwIG1vZHVsZSwgc2tpcHBlZCB3aGlsZSB0aGUgc2VydmVyIHJ1bm5pbmcgaW4gZGVhZiBtb2RlICAgICBcbiAgICAgKiBAcGFyYW0ge1JvdXRlcn0gbmVzdGVkUm91dGVyXG4gICAgICovXG4gICAgYWRkUm91dGVyKG5lc3RlZFJvdXRlcikge1xuICAgICAgICB0aGlzLnJvdXRlci51c2UobmVzdGVkUm91dGVyLnJvdXRlcygpKTtcbiAgICAgICAgdGhpcy5yb3V0ZXIudXNlKG5lc3RlZFJvdXRlci5hbGxvd2VkTWV0aG9kcygpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJhbnNsYXRlIGEgcmVsYXRpdmUgcGF0aCBhbmQgcXVlcnkgcGFyYW1ldGVycyBpZiBhbnkgdG8gYSB1cmwgcGF0aCAgICAgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlUGF0aCAtIFJlbGF0aXZlIHBhdGhcbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXRoT3JRdWVyeV0gLSBRdWVyaWVzXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICB0b1dlYlBhdGgocmVsYXRpdmVQYXRoLCAuLi5wYXRoT3JRdWVyeSkge1xuICAgICAgICBsZXQgdXJsLCBxdWVyeTtcblxuICAgICAgICBpZiAocGF0aE9yUXVlcnkgJiYgcGF0aE9yUXVlcnkubGVuZ3RoID4gMCAmJiAocGF0aE9yUXVlcnkubGVuZ3RoID4gMSB8fCBwYXRoT3JRdWVyeVswXSAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgaWYgKF8uaXNPYmplY3QocGF0aE9yUXVlcnlbcGF0aE9yUXVlcnkubGVuZ3RoIC0gMV0pKSB7XG4gICAgICAgICAgICAgICAgcXVlcnkgPSBwYXRoT3JRdWVyeS5wb3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhdGhPclF1ZXJ5LnVuc2hpZnQocmVsYXRpdmVQYXRoKTtcbiAgICAgICAgICAgIHVybCA9IHVybEpvaW4odGhpcy5yb3V0ZSwgLi4ucGF0aE9yUXVlcnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdXJsID0gdXJsSm9pbih0aGlzLnJvdXRlLCByZWxhdGl2ZVBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsID0gZW5zdXJlTGVmdFNsYXNoKHVybCk7XG5cbiAgICAgICAgaWYgKHF1ZXJ5KSB7XG4gICAgICAgICAgICB1cmwgPSB1cmxBcHBlbmRRdWVyeSh1cmwsIHF1ZXJ5KTtcbiAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKCcvPycsICc/Jyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdXJsO1xuICAgIH0gICAgXG5cbiAgICAvKipcbiAgICAgKiBQcmVwYXJlIGNvbnRleHQgZm9yIGtvYSBhY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY3R4IC0gS29hIHJlcXVlc3QgY29udGV4dFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGFjdGlvbiAtIEFjdGlvbiBmdW5jdGlvblxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICAgICAqL1xuICAgIHdyYXBBY3Rpb24oYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBhc3luYyAoY3R4KSA9PiB7XG4gICAgICAgICAgICBjdHgudG9VcmwgPSAocmVsYXRpdmVQYXRoLCAuLi5wYXRoT3JRdWVyeSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdHgub3JpZ2luICsgdGhpcy50b1dlYlBhdGgocmVsYXRpdmVQYXRoLCAuLi5wYXRoT3JRdWVyeSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGN0eC5zdGF0ZSwge1xuICAgICAgICAgICAgICAgIF9zZWxmOiBjdHgub3JpZ2luYWxVcmwgfHwgdGhpcy50b1dlYlBhdGgoY3R4LnVybCksXG4gICAgICAgICAgICAgICAgX186IHRoaXMuX18sXG4gICAgICAgICAgICAgICAgX2Jhc2U6IGVuc3VyZVJpZ2h0U2xhc2godGhpcy50b1dlYlBhdGgoKSksXG4gICAgICAgICAgICAgICAgX21ha2VQYXRoOiAocmVsYXRpdmVQYXRoLCBxdWVyeSkgPT4gdGhpcy50b1dlYlBhdGgocmVsYXRpdmVQYXRoLCBxdWVyeSksXG4gICAgICAgICAgICAgICAgX21ha2VVcmw6IChyZWxhdGl2ZVBhdGgsIHF1ZXJ5KSA9PiBjdHgudG9VcmwocmVsYXRpdmVQYXRoLCBxdWVyeSkgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoY3R4LmNzcmYpIHsgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjdHguc3RhdGUuX2NzcmYgPSBjdHguY3NyZjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGFjdGlvbihjdHgpO1xuICAgICAgICB9OyAgICAgICAgXG4gICAgfSAgIFxuXG4gICAgdXNlTWlkZGxld2FyZShyb3V0ZXIsIG1pZGRsZXdhcmUsIG5hbWUpIHsgICAgICAgICAgXG4gICAgICAgIGFzc2VydDogdHlwZW9mIG1pZGRsZXdhcmUgPT09ICdmdW5jdGlvbicsIG1pZGRsZXdhcmU7XG4gICAgICAgIHJvdXRlci51c2UodGhpcy5fd3JhcE1pZGRsZXdhcmVUcmFjZXIobWlkZGxld2FyZSwgbmFtZSkpO1xuICAgICAgICB0aGlzLmxvZygndmVyYm9zZScsIGBBdHRhY2hlZCBtaWRkbGV3YXJlIFske25hbWV9XS5gKTtcbiAgICB9XG5cbiAgICBfd3JhcE1pZGRsZXdhcmVUcmFjZXIobWlkZGxld2FyZSwgbmFtZSkgeyAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudHJhY2VNaWRkbGV3YXJlcykgeyAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGFzeW5jIChjdHgsIG5leHQpID0+IHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5sb2coJ2RlYnVnJywgYFN0ZXAgaW4gbWlkZGxld2FyZSBcIiR7bmFtZSB8fCBtaWRkbGV3YXJlLm5hbWV9XCIgLi4uYCk7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxldCByZXQgPSBhd2FpdCBtaWRkbGV3YXJlKGN0eCwgbmV4dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2coJ2RlYnVnJywgYFN0ZXAgb3V0IGZyb20gbWlkZGxld2FyZSBcIiR7bmFtZSB8fCBtaWRkbGV3YXJlLm5hbWV9XCIuYCk7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWlkZGxld2FyZTtcbiAgICB9XG5cbiAgICBfZ2V0RmVhdHVyZUZhbGxiYWNrUGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLl9nZXRGZWF0dXJlRmFsbGJhY2tQYXRoKCkuY29uY2F0KFsgcGF0aC5qb2luKHRoaXMuYmFja2VuZFBhdGgsIExpdGVyYWwuRkVBVFVSRVNfUEFUSCkgXSk7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSb3V0YWJsZTsiXX0=