"use strict";

require("source-map-support/register");

const Feature = require('@genx/app/lib/enum/Feature');

const Util = require('rk-utils');

const _ = Util._;
const Promise = Util.Promise;

const validator = require('validator');

const {
  InvalidConfiguration
} = require('../utils/Errors');

module.exports = {
  type: Feature.SERVICE,
  load_: function (server, options) {
    let koa = server.router;
    server.koa = koa;
    koa.env = server.env;
    koa.proxy = options.trustProxy && validator.toBoolean(options.trustProxy);

    if ('subdomainOffset' in options && options.subdomainOffset !== 2) {
      if (options.subdomainOffset < 2) {
        throw new InvalidConfiguration('Invalid subdomainOffset. Should be larger or equal to 2.', appModule, 'koa.subdomainOffset');
      }

      koa.subdomainOffset = options.subdomainOffset;
    }

    if (options.keys) {
      if (!_.isArray(options.keys)) {
        koa.keys = [options.keys];
      } else {
        koa.keys = options.keys;
      }
    }

    koa.on('error', (err, ctx) => {
      let extra = _.pick(err, ['status', 'code', 'info']);

      if (ctx) {
        extra.request = _.pick(ctx, ['method', 'url', 'ip']);
      }

      if (err.status && err.status < 500) {
        if (server.env === 'development') {
          extra.stack = err.stack;
        }

        server.log('warn', `[${err.status}] ` + err.message, extra);
        return;
      }

      server.logError(err);
    });
    server.httpServer = require('http').createServer(koa.callback());
    let port = options.httpPort || 2331;
    server.on('ready', () => {
      server.httpServer.listen(port, function (err) {
        if (err) throw err;
        let address = server.httpServer.address();
        let host;

        if (address.family === 'IPv6' && address.address === '::') {
          host = '127.0.0.1';
        } else {
          host = address.address;
        }

        server.host = `${host}:${address.port}`;
        server.port = address.port;
        server.log('info', `A http service is listening on port [${address.port}] ...`);
        server.emit('httpReady');
      });
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zZXJ2ZXJGZWF0dXJlcy9rb2EuanMiXSwibmFtZXMiOlsiRmVhdHVyZSIsInJlcXVpcmUiLCJVdGlsIiwiXyIsIlByb21pc2UiLCJ2YWxpZGF0b3IiLCJJbnZhbGlkQ29uZmlndXJhdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0eXBlIiwiU0VSVklDRSIsImxvYWRfIiwic2VydmVyIiwib3B0aW9ucyIsImtvYSIsInJvdXRlciIsImVudiIsInByb3h5IiwidHJ1c3RQcm94eSIsInRvQm9vbGVhbiIsInN1YmRvbWFpbk9mZnNldCIsImFwcE1vZHVsZSIsImtleXMiLCJpc0FycmF5Iiwib24iLCJlcnIiLCJjdHgiLCJleHRyYSIsInBpY2siLCJyZXF1ZXN0Iiwic3RhdHVzIiwic3RhY2siLCJsb2ciLCJtZXNzYWdlIiwibG9nRXJyb3IiLCJodHRwU2VydmVyIiwiY3JlYXRlU2VydmVyIiwiY2FsbGJhY2siLCJwb3J0IiwiaHR0cFBvcnQiLCJsaXN0ZW4iLCJhZGRyZXNzIiwiaG9zdCIsImZhbWlseSIsImVtaXQiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsNEJBQUQsQ0FBdkI7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsVUFBRCxDQUFwQjs7QUFDQSxNQUFNRSxDQUFDLEdBQUdELElBQUksQ0FBQ0MsQ0FBZjtBQUNBLE1BQU1DLE9BQU8sR0FBR0YsSUFBSSxDQUFDRSxPQUFyQjs7QUFDQSxNQUFNQyxTQUFTLEdBQUdKLE9BQU8sQ0FBQyxXQUFELENBQXpCOztBQUNBLE1BQU07QUFBRUssRUFBQUE7QUFBRixJQUEyQkwsT0FBTyxDQUFDLGlCQUFELENBQXhDOztBQWlCQU0sTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBTWJDLEVBQUFBLElBQUksRUFBRVQsT0FBTyxDQUFDVSxPQU5EO0FBa0JiQyxFQUFBQSxLQUFLLEVBQUUsVUFBVUMsTUFBVixFQUFrQkMsT0FBbEIsRUFB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bkIsSUFBNkJGLE9BQU8sQ0FBQ0EsT0FBUixLQUFvQixJQUFyRCxFQUEyRDtBQUN2REMsVUFBQUEsSUFBSSxHQUFHLFdBQVA7QUFDSCxTQUZELE1BRU87QUFDSEEsVUFBQUEsSUFBSSxHQUFHRCxPQUFPLENBQUNBLE9BQWY7QUFDSDs7QUFFRDdCLFFBQUFBLE1BQU0sQ0FBQzhCLElBQVAsR0FBZSxHQUFFQSxJQUFLLElBQUdELE9BQU8sQ0FBQ0gsSUFBSyxFQUF0QztBQUNBMUIsUUFBQUEsTUFBTSxDQUFDMEIsSUFBUCxHQUFjRyxPQUFPLENBQUNILElBQXRCO0FBRUExQixRQUFBQSxNQUFNLENBQUNvQixHQUFQLENBQVcsTUFBWCxFQUFvQix3Q0FBdUNTLE9BQU8sQ0FBQ0gsSUFBSyxPQUF4RTtBQUtBMUIsUUFBQUEsTUFBTSxDQUFDZ0MsSUFBUCxDQUFZLFdBQVo7QUFDSCxPQXJCRDtBQXNCSCxLQXZCRDtBQXdCSDtBQTNGWSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBGZWF0dXJlID0gcmVxdWlyZSgnQGdlbngvYXBwL2xpYi9lbnVtL0ZlYXR1cmUnKTtcbmNvbnN0IFV0aWwgPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgXyA9IFV0aWwuXztcbmNvbnN0IFByb21pc2UgPSBVdGlsLlByb21pc2U7XG5jb25zdCB2YWxpZGF0b3IgPSByZXF1aXJlKCd2YWxpZGF0b3InKTtcbmNvbnN0IHsgSW52YWxpZENvbmZpZ3VyYXRpb24gfSA9IHJlcXVpcmUoJy4uL3V0aWxzL0Vycm9ycycpO1xuXG4vKipcbiAqIEtvYSBtaWRkbGV3YXJlIGZ1bmN0aW9uXG4gKiBAY2FsbGJhY2sgS29hQWN0aW9uRnVuY3Rpb25cbiAqIEBhc3luY1xuICogQHBhcmFtIHtvYmplY3R9IGN0eCAtIFRoZSBrb2EgcmVxdWVzdCBhbmQgcmVzcG9uc2UgY29udGV4dC4gW1NlZSBrb2FqcyBhYm91dCBjdHggZGV0YWlsc117QGxpbmsgaHR0cDovL2tvYWpzLmNvbS8jY29udGV4dH1cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBjdHgucmVxZXVzdCAtIFRoZSBrb2EgcmVxdWVzdCBvYmplY3QuXG4gKiBAcHJvcGVydHkge29iamVjdH0gY3R4LnJlc3BvbnNlIC0gVGhlIGtvYSByZXNwb25zZSBvYmplY3QuXG4gKiBAcGFyYW0ge0tvYUFjdGlvbkZ1bmN0aW9ufSBbbmV4dF0gLSBOZXh0IG1pZGRsZXdhcmUgb3IgYWN0aW9uLlxuICovXG5cbi8qKlxuICogRW5hYmxlIGtvYS1iYXNlZCB3ZWIgZW5naW5lLlxuICogQG1vZHVsZSBGZWF0dXJlX0tvYSBcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZmVhdHVyZSBpcyBsb2FkZWQgYXQgc2VydmljZSBzdGFnZVxuICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgKi9cbiAgICB0eXBlOiBGZWF0dXJlLlNFUlZJQ0UsXG5cbiAgICAvKipcbiAgICAgKiBMb2FkIHRoZSBmZWF0dXJlXG4gICAgICogQHBhcmFtIHtXZWJTZXJ2ZXJ9IHNlcnZlciAtIFRoZSB3ZWIgc2VydmVyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGUgZmVhdHVyZSAgICAgXG4gICAgICogQHByb3BlcnR5IHtib29sfSBbb3B0aW9ucy50cnVzdFByb3h5XSAtIFdoZW4gdHJ1ZSBwcm94eSBoZWFkZXIgZmllbGRzIHdpbGwgYmUgdHJ1c3RlZFxuICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPHN0cmluZz59IFtvcHRpb25zLmtleXNdIC0gU2V0IHNpZ25lZCBjb29raWUga2V5c1xuICAgICAqIEBwcm9wZXJ0eSB7aW50fSBbb3B0aW9ucy5odHRwUG9ydF0gLSBUaGUgaHR0cCBwb3J0IG51bWJlclxuICAgICAqIEBwcm9wZXJ0eSB7aW50fSBbb3B0aW9ucy5zdWJkb21haW5PZmZzZXQ9Ml0gLSBUaGUgb2Zmc2V0IG9mIHN1YmRvbWFpbnMgdG8gaWdub3JlLCBkZWZhdWx0OiAyXG4gICAgICogQHJldHVybnMge1Byb21pc2UuPCo+fVxuICAgICAqL1xuICAgIGxvYWRfOiBmdW5jdGlvbiAoc2VydmVyLCBvcHRpb25zKSB7XG4gICAgICAgIGxldCBrb2EgPSBzZXJ2ZXIucm91dGVyO1xuICAgICAgICBzZXJ2ZXIua29hID0ga29hO1xuICAgICAgICBcbiAgICAgICAga29hLmVudiA9IHNlcnZlci5lbnY7XG4gICAgICAgIGtvYS5wcm94eSA9IG9wdGlvbnMudHJ1c3RQcm94eSAmJiB2YWxpZGF0b3IudG9Cb29sZWFuKG9wdGlvbnMudHJ1c3RQcm94eSk7XG5cbiAgICAgICAgaWYgKCgnc3ViZG9tYWluT2Zmc2V0JyBpbiBvcHRpb25zKSAmJiBvcHRpb25zLnN1YmRvbWFpbk9mZnNldCAhPT0gMikge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3ViZG9tYWluT2Zmc2V0IDwgMikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgJ0ludmFsaWQgc3ViZG9tYWluT2Zmc2V0LiBTaG91bGQgYmUgbGFyZ2VyIG9yIGVxdWFsIHRvIDIuJyxcbiAgICAgICAgICAgICAgICAgICAgYXBwTW9kdWxlLFxuICAgICAgICAgICAgICAgICAgICAna29hLnN1YmRvbWFpbk9mZnNldCdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBrb2Euc3ViZG9tYWluT2Zmc2V0ID0gb3B0aW9ucy5zdWJkb21haW5PZmZzZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5rZXlzKSB7XG4gICAgICAgICAgICBpZiAoIV8uaXNBcnJheShvcHRpb25zLmtleXMpKSB7XG4gICAgICAgICAgICAgICAga29hLmtleXMgPSBbIG9wdGlvbnMua2V5cyBdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBrb2Eua2V5cyA9IG9wdGlvbnMua2V5cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGtvYS5vbignZXJyb3InLCAoZXJyLCBjdHgpID0+IHtcbiAgICAgICAgICAgIGxldCBleHRyYSA9IF8ucGljayhlcnIsIFsgJ3N0YXR1cycsICdjb2RlJywgJ2luZm8nIF0pO1xuXG4gICAgICAgICAgICBpZiAoY3R4KSB7XG4gICAgICAgICAgICAgICAgZXh0cmEucmVxdWVzdCA9IF8ucGljayhjdHgsIFsnbWV0aG9kJywgJ3VybCcsICdpcCddKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVyci5zdGF0dXMgJiYgZXJyLnN0YXR1cyA8IDUwMCkgeyAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoc2VydmVyLmVudiA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICAgICAgICAgICAgICBleHRyYS5zdGFjayA9IGVyci5zdGFjaztcbiAgICAgICAgICAgICAgICB9ICAgXG4gICAgICAgICAgICAgICAgc2VydmVyLmxvZygnd2FybicsIGBbJHtlcnIuc3RhdHVzfV0gYCArIGVyci5tZXNzYWdlLCBleHRyYSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgc2VydmVyLmxvZ0Vycm9yKGVycik7XG4gICAgICAgIH0pOyAgICAgICAgICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIHNlcnZlci5odHRwU2VydmVyID0gcmVxdWlyZSgnaHR0cCcpLmNyZWF0ZVNlcnZlcihrb2EuY2FsbGJhY2soKSk7ICAgICAgICAgICAgICAgIFxuXG4gICAgICAgIGxldCBwb3J0ID0gb3B0aW9ucy5odHRwUG9ydCB8fCAyMzMxO1xuXG4gICAgICAgIHNlcnZlci5vbigncmVhZHknLCAoKSA9PiB7XG4gICAgICAgICAgICBzZXJ2ZXIuaHR0cFNlcnZlci5saXN0ZW4ocG9ydCwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHRocm93IGVycjtcblxuICAgICAgICAgICAgICAgIGxldCBhZGRyZXNzID0gc2VydmVyLmh0dHBTZXJ2ZXIuYWRkcmVzcygpO1xuXG4gICAgICAgICAgICAgICAgbGV0IGhvc3Q7XG4gICAgICAgICAgICAgICAgaWYgKGFkZHJlc3MuZmFtaWx5ID09PSAnSVB2NicgJiYgYWRkcmVzcy5hZGRyZXNzID09PSAnOjonKSB7XG4gICAgICAgICAgICAgICAgICAgIGhvc3QgPSAnMTI3LjAuMC4xJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBob3N0ID0gYWRkcmVzcy5hZGRyZXNzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHNlcnZlci5ob3N0ID0gYCR7aG9zdH06JHthZGRyZXNzLnBvcnR9YDtcbiAgICAgICAgICAgICAgICBzZXJ2ZXIucG9ydCA9IGFkZHJlc3MucG9ydDtcblxuICAgICAgICAgICAgICAgIHNlcnZlci5sb2coJ2luZm8nLCBgQSBodHRwIHNlcnZpY2UgaXMgbGlzdGVuaW5nIG9uIHBvcnQgWyR7YWRkcmVzcy5wb3J0fV0gLi4uYCk7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSHR0cCBzZXJ2ZXIgcmVhZHkgZXZlbnRcbiAgICAgICAgICAgICAgICAgKiBAZXZlbnQgV2ViU2VydmVyI2h0dHBSZWFkeVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHNlcnZlci5lbWl0KCdodHRwUmVhZHknKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59OyJdfQ==