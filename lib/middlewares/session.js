"use strict";

require("source-map-support/register");

const session = require('koa-session');

const {
  InvalidConfiguration
} = require('@genx/error');

const DEFAULT_OPTS = {
  key: 'k-server.sid',
  prefix: 'k-server:sess:'
};

module.exports = (options, app) => {
  let store = options.store || {
    type: 'memory'
  };

  if (!store.type) {
    throw new InvalidConfiguration('Missing session store type.', app, 'middlewares.session.store');
  }

  let storeObject;
  let opt = store.options || {};

  if (store.dataSource) {
    let dsService = app.getService(store.dataSource);
    Object.assign(opt, {
      url: dsService.connectionString
    });
  }

  switch (store.type) {
    case 'redis':
      storeObject = app.tryRequire('koa-redis')(opt);
      break;

    case 'mysql':
      storeObject = app.tryRequire('koa-mysql-session')(opt);
      break;

    case 'mongodb':
      const MongoStore = app.tryRequire('koa-generic-session-mongo');
      storeObject = new MongoStore(opt);
      break;

    case 'pgsql':
      storeObject = app.tryRequire('koa-pg-session')(opt);
      break;

    case 'sqlite3':
      storeObject = app.tryRequire('koa-sqlite3-session')(opt);
      break;

    case 'memory':
      const MemoryStore = app.tryRequire('koa-session-memory');
      storeObject = new MemoryStore();
      break;

    default:
      throw new Mowa.Error.InvalidConfiguration('Unsupported session store type: ' + store.type, app, 'middlewares.session.store.type');
  }

  let sessionOptions = Object.assign({}, DEFAULT_OPTS, options, {
    store: storeObject
  });
  return session(sessionOptions, app.server.koa);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlcy9zZXNzaW9uLmpzIl0sIm5hbWVzIjpbInNlc3Npb24iLCJyZXF1aXJlIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJERUZBVUxUX09QVFMiLCJrZXkiLCJwcmVmaXgiLCJtb2R1bGUiLCJleHBvcnRzIiwib3B0aW9ucyIsImFwcCIsInN0b3JlIiwidHlwZSIsInN0b3JlT2JqZWN0Iiwib3B0IiwiZGF0YVNvdXJjZSIsImRzU2VydmljZSIsImdldFNlcnZpY2UiLCJPYmplY3QiLCJhc3NpZ24iLCJ1cmwiLCJjb25uZWN0aW9uU3RyaW5nIiwidHJ5UmVxdWlyZSIsIk1vbmdvU3RvcmUiLCJNZW1vcnlTdG9yZSIsIk1vd2EiLCJFcnJvciIsInNlc3Npb25PcHRpb25zIiwic2VydmVyIiwia29hIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQU9BLE1BQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLGFBQUQsQ0FBdkI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQTJCRCxPQUFPLENBQUMsYUFBRCxDQUF4Qzs7QUFFQSxNQUFNRSxZQUFZLEdBQUc7QUFDakJDLEVBQUFBLEdBQUcsRUFBRSxjQURZO0FBRWpCQyxFQUFBQSxNQUFNLEVBQUU7QUFGUyxDQUFyQjs7QUF1QkFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixDQUFDQyxPQUFELEVBQVVDLEdBQVYsS0FBa0I7QUFFL0IsTUFBSUMsS0FBSyxHQUFHRixPQUFPLENBQUNFLEtBQVIsSUFBaUI7QUFBRUMsSUFBQUEsSUFBSSxFQUFFO0FBQVIsR0FBN0I7O0FBRUEsTUFBSSxDQUFDRCxLQUFLLENBQUNDLElBQVgsRUFBaUI7QUFDYixVQUFNLElBQUlULG9CQUFKLENBQ0YsNkJBREUsRUFFRk8sR0FGRSxFQUdGLDJCQUhFLENBQU47QUFLSDs7QUFFRCxNQUFJRyxXQUFKO0FBRUEsTUFBSUMsR0FBRyxHQUFHSCxLQUFLLENBQUNGLE9BQU4sSUFBaUIsRUFBM0I7O0FBRUEsTUFBSUUsS0FBSyxDQUFDSSxVQUFWLEVBQXNCO0FBQ2xCLFFBQUlDLFNBQVMsR0FBR04sR0FBRyxDQUFDTyxVQUFKLENBQWVOLEtBQUssQ0FBQ0ksVUFBckIsQ0FBaEI7QUFDQUcsSUFBQUEsTUFBTSxDQUFDQyxNQUFQLENBQWNMLEdBQWQsRUFBbUI7QUFBRU0sTUFBQUEsR0FBRyxFQUFFSixTQUFTLENBQUNLO0FBQWpCLEtBQW5CO0FBQ0g7O0FBRUQsVUFBUVYsS0FBSyxDQUFDQyxJQUFkO0FBQ0ksU0FBSyxPQUFMO0FBQ0lDLE1BQUFBLFdBQVcsR0FBR0gsR0FBRyxDQUFDWSxVQUFKLENBQWUsV0FBZixFQUE0QlIsR0FBNUIsQ0FBZDtBQUNBOztBQUNKLFNBQUssT0FBTDtBQUNJRCxNQUFBQSxXQUFXLEdBQUdILEdBQUcsQ0FBQ1ksVUFBSixDQUFlLG1CQUFmLEVBQW9DUixHQUFwQyxDQUFkO0FBQ0E7O0FBQ0osU0FBSyxTQUFMO0FBQ0ksWUFBTVMsVUFBVSxHQUFHYixHQUFHLENBQUNZLFVBQUosQ0FBZSwyQkFBZixDQUFuQjtBQUNBVCxNQUFBQSxXQUFXLEdBQUcsSUFBSVUsVUFBSixDQUFlVCxHQUFmLENBQWQ7QUFDQTs7QUFDSixTQUFLLE9BQUw7QUFDSUQsTUFBQUEsV0FBVyxHQUFHSCxHQUFHLENBQUNZLFVBQUosQ0FBZSxnQkFBZixFQUFpQ1IsR0FBakMsQ0FBZDtBQUNBOztBQUNKLFNBQUssU0FBTDtBQUNJRCxNQUFBQSxXQUFXLEdBQUdILEdBQUcsQ0FBQ1ksVUFBSixDQUFlLHFCQUFmLEVBQXNDUixHQUF0QyxDQUFkO0FBQ0E7O0FBQ0osU0FBSyxRQUFMO0FBQ0ksWUFBTVUsV0FBVyxHQUFHZCxHQUFHLENBQUNZLFVBQUosQ0FBZSxvQkFBZixDQUFwQjtBQUNBVCxNQUFBQSxXQUFXLEdBQUcsSUFBSVcsV0FBSixFQUFkO0FBQ0E7O0FBQ0o7QUFDSSxZQUFNLElBQUlDLElBQUksQ0FBQ0MsS0FBTCxDQUFXdkIsb0JBQWYsQ0FDRixxQ0FBcUNRLEtBQUssQ0FBQ0MsSUFEekMsRUFFRkYsR0FGRSxFQUdGLGdDQUhFLENBQU47QUF0QlI7O0FBNkJBLE1BQUlpQixjQUFjLEdBQUdULE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JmLFlBQWxCLEVBQWdDSyxPQUFoQyxFQUF5QztBQUFDRSxJQUFBQSxLQUFLLEVBQUVFO0FBQVIsR0FBekMsQ0FBckI7QUFFQSxTQUFPWixPQUFPLENBQUMwQixjQUFELEVBQWlCakIsR0FBRyxDQUFDa0IsTUFBSixDQUFXQyxHQUE1QixDQUFkO0FBQ0gsQ0FyREQiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBTZXNzaW9uIG1pZGRsZXdhcmVcbiAqIEBtb2R1bGUgTWlkZGxld2FyZV9TZXNzaW9uXG4gKi9cblxuY29uc3Qgc2Vzc2lvbiA9IHJlcXVpcmUoJ2tvYS1zZXNzaW9uJyk7XG5jb25zdCB7IEludmFsaWRDb25maWd1cmF0aW9uIH0gPSByZXF1aXJlKCdAZ2VueC9lcnJvcicpO1xuXG5jb25zdCBERUZBVUxUX09QVFMgPSB7XG4gICAga2V5OiAnay1zZXJ2ZXIuc2lkJyxcbiAgICBwcmVmaXg6ICdrLXNlcnZlcjpzZXNzOidcbn07XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBzZXNzaW9uIG1pZGRsZXdhcmVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gU2Vzc2lvbiBvcHRpb25zIFxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtvcHRpb25zLmtleT0nbW93YTpzaWQnXSAtIENvb2tpZSBuYW1lIGRlZmF1bHRpbmcgdG8gbW93YS5zaWQgXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW29wdGlvbnMucHJlZml4PSdtb3dhOnNlc3M6J10gLSBTZXNzaW9uIHByZWZpeCBmb3Igc3RvcmUsIGRlZmF1bHRpbmcgdG8gbW93YTpzZXNzOlxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtvcHRpb25zLm1heEFnZV0gLSBTZXNzaW9uU3RvcmUncyBleHBpcmF0aW9uIHRpbWUgKG1zKSwgZGVmYXVsdGluZyB0byA4NjQwMDAwMCAoMSBkYXkpXG4gKiBAcHJvcGVydHkge2Jvb2x9IFtvcHRpb25zLmF1dG9Db21taXQ9dHJ1ZV0gLSBBdXRvbWF0aWNhbGx5IGNvbW1pdCBoZWFkZXJzIChkZWZhdWx0IHRydWUpXG4gKiBAcHJvcGVydHkge2Jvb2x9IFtvcHRpb25zLm92ZXJ3cml0ZT10cnVlXSAtIENhbiBvdmVyd3JpdGUgb3Igbm90IChkZWZhdWx0IHRydWUpIFxuICogQHByb3BlcnR5IHtib29sfSBbb3B0aW9ucy5odHRwT25seT10cnVlXSAtIEh0dHBPbmx5IG9yIG5vdCAoZGVmYXVsdCB0cnVlKVxuICogQHByb3BlcnR5IHtib29sfSBbb3B0aW9ucy5zaWduZWQ9dHJ1ZV0gLSBTaWduZWQgb3Igbm90XG4gKiBAcHJvcGVydHkge2Jvb2x9IFtvcHRpb25zLnJvbGxpbmc9ZmFsc2VdIC0gRm9yY2UgYSBzZXNzaW9uIGlkZW50aWZpZXIgY29va2llIHRvIGJlIHNldCBvbiBldmVyeSByZXNwb25zZS4gVGhlIGV4cGlyYXRpb24gaXMgcmVzZXQgdG8gdGhlIG9yaWdpbmFsIG1heEFnZSwgcmVzZXR0aW5nIHRoZSBleHBpcmF0aW9uIGNvdW50ZG93bi4gKGRlZmF1bHQgaXMgZmFsc2UpIFxuICogQHByb3BlcnR5IHtib29sfSBbb3B0aW9ucy5yZW5ldz1mYWxzZV0gLSBSZW5ldyBzZXNzaW9uIHdoZW4gc2Vzc2lvbiBpcyBuZWFybHkgZXhwaXJlZCwgc28gd2UgY2FuIGFsd2F5cyBrZWVwIHVzZXIgbG9nZ2VkIGluLiAoZGVmYXVsdCBpcyBmYWxzZSlcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFtvcHRpb25zLmdlblNpZF0gLSBUaGUgd2F5IG9mIGdlbmVyYXRpbmcgZXh0ZXJuYWwgc2Vzc2lvbiBpZCBpcyBjb250cm9sbGVkIGJ5IHRoZSBvcHRpb25zLmdlbmlkLCB3aGljaCBkZWZhdWx0cyB0byBEYXRlLm5vdygpICsgJy0nICsgdWlkLnN5bmMoMjQpXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBbb3B0aW9ucy52YWxpZF0gLSB2YWxpZChjdHgsIHNlc3Npb24pLCB2YWxpZCBzZXNzaW9uIHZhbHVlIGJlZm9yZSB1c2UgaXRcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFtvcHRpb25zLmJlZm9yZVNhdmVdIC0gYmVmb3JlU2F2ZShjdHgsIHNlc3Npb24pLCBob29rIGJlZm9yZSBzYXZlIHNlc3Npb25cbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbb3B0aW9ucy5zdG9yZV0gLSBTZXNzaW9uIHN0b3JlIGluc3RhbmNlLiBJdCBjYW4gYmUgYW55IE9iamVjdCB0aGF0IGhhcyB0aGUgbWV0aG9kcyBzZXQsIGdldCwgZGVzdHJveSBsaWtlIE1lbW9yeVN0b3JlLlxuICogQHBhcmFtIHtSb3V0YWJsZX0gYXBwIFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IChvcHRpb25zLCBhcHApID0+IHtcblxuICAgIGxldCBzdG9yZSA9IG9wdGlvbnMuc3RvcmUgfHwgeyB0eXBlOiAnbWVtb3J5JyB9O1xuXG4gICAgaWYgKCFzdG9yZS50eXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICdNaXNzaW5nIHNlc3Npb24gc3RvcmUgdHlwZS4nLFxuICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgJ21pZGRsZXdhcmVzLnNlc3Npb24uc3RvcmUnXG4gICAgICAgICk7ICAgICAgICBcbiAgICB9XG5cbiAgICBsZXQgc3RvcmVPYmplY3Q7XG5cbiAgICBsZXQgb3B0ID0gc3RvcmUub3B0aW9ucyB8fCB7fTtcblxuICAgIGlmIChzdG9yZS5kYXRhU291cmNlKSB7XG4gICAgICAgIGxldCBkc1NlcnZpY2UgPSBhcHAuZ2V0U2VydmljZShzdG9yZS5kYXRhU291cmNlKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihvcHQsIHsgdXJsOiBkc1NlcnZpY2UuY29ubmVjdGlvblN0cmluZyB9KTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHN0b3JlLnR5cGUpIHtcbiAgICAgICAgY2FzZSAncmVkaXMnOlxuICAgICAgICAgICAgc3RvcmVPYmplY3QgPSBhcHAudHJ5UmVxdWlyZSgna29hLXJlZGlzJykob3B0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdteXNxbCc6XG4gICAgICAgICAgICBzdG9yZU9iamVjdCA9IGFwcC50cnlSZXF1aXJlKCdrb2EtbXlzcWwtc2Vzc2lvbicpKG9wdCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbW9uZ29kYic6XG4gICAgICAgICAgICBjb25zdCBNb25nb1N0b3JlID0gYXBwLnRyeVJlcXVpcmUoJ2tvYS1nZW5lcmljLXNlc3Npb24tbW9uZ28nKTtcbiAgICAgICAgICAgIHN0b3JlT2JqZWN0ID0gbmV3IE1vbmdvU3RvcmUob3B0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdwZ3NxbCc6XG4gICAgICAgICAgICBzdG9yZU9iamVjdCA9IGFwcC50cnlSZXF1aXJlKCdrb2EtcGctc2Vzc2lvbicpKG9wdCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnc3FsaXRlMyc6XG4gICAgICAgICAgICBzdG9yZU9iamVjdCA9IGFwcC50cnlSZXF1aXJlKCdrb2Etc3FsaXRlMy1zZXNzaW9uJykob3B0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdtZW1vcnknOlxuICAgICAgICAgICAgY29uc3QgTWVtb3J5U3RvcmUgPSBhcHAudHJ5UmVxdWlyZSgna29hLXNlc3Npb24tbWVtb3J5Jyk7XG4gICAgICAgICAgICBzdG9yZU9iamVjdCA9IG5ldyBNZW1vcnlTdG9yZSgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgTW93YS5FcnJvci5JbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgICAnVW5zdXBwb3J0ZWQgc2Vzc2lvbiBzdG9yZSB0eXBlOiAnICsgc3RvcmUudHlwZSxcbiAgICAgICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICAgICAgJ21pZGRsZXdhcmVzLnNlc3Npb24uc3RvcmUudHlwZSdcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgbGV0IHNlc3Npb25PcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9PUFRTLCBvcHRpb25zLCB7c3RvcmU6IHN0b3JlT2JqZWN0fSk7XG5cbiAgICByZXR1cm4gc2Vzc2lvbihzZXNzaW9uT3B0aW9ucywgYXBwLnNlcnZlci5rb2EpO1xufTsiXX0=