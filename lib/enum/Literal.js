"use strict";

require("source-map-support/register");

const Literal = require('@genx/app/lib/enum/Literal');

module.exports = Object.assign({}, Literal, {
  APP_MODULES_PATH: 'app_modules',
  BACKEND_PATH: 'server',
  BACKEND_SRC_PATH: 'src',
  CLIENT_SRC_PATH: 'client',
  PUBLIC_PATH: 'public',
  MIDDLEWARES_PATH: 'middlewares',
  SERVER_CFG_NAME: 'server',
  SERVER_FEATURES_PATH: 'serverFeatures',
  APP_FEATURES_PATH: 'appFeatures',
  CONTROLLERS_PATH: 'controllers',
  RESOURCES_PATH: 'resources',
  WS_CONTROLLERS_PATH: 'wsControllers',
  VIEWS_PATH: 'views',
  LOCALE_PATH: 'locale',
  ALLOWED_HTTP_METHODS: new Set(['options', 'get', 'head', 'post', 'put', 'delete', 'trace', 'connect'])
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbnVtL0xpdGVyYWwuanMiXSwibmFtZXMiOlsiTGl0ZXJhbCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiT2JqZWN0IiwiYXNzaWduIiwiQVBQX01PRFVMRVNfUEFUSCIsIkJBQ0tFTkRfUEFUSCIsIkJBQ0tFTkRfU1JDX1BBVEgiLCJDTElFTlRfU1JDX1BBVEgiLCJQVUJMSUNfUEFUSCIsIk1JRERMRVdBUkVTX1BBVEgiLCJTRVJWRVJfQ0ZHX05BTUUiLCJTRVJWRVJfRkVBVFVSRVNfUEFUSCIsIkFQUF9GRUFUVVJFU19QQVRIIiwiQ09OVFJPTExFUlNfUEFUSCIsIlJFU09VUkNFU19QQVRIIiwiV1NfQ09OVFJPTExFUlNfUEFUSCIsIlZJRVdTX1BBVEgiLCJMT0NBTEVfUEFUSCIsIkFMTE9XRURfSFRUUF9NRVRIT0RTIiwiU2V0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLDRCQUFELENBQXZCOztBQWdCQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCQyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCTCxPQUFsQixFQUEyQjtBQUl4Q00sRUFBQUEsZ0JBQWdCLEVBQUUsYUFKc0I7QUFTeENDLEVBQUFBLFlBQVksRUFBRSxRQVQwQjtBQWN4Q0MsRUFBQUEsZ0JBQWdCLEVBQUUsS0Fkc0I7QUFtQnhDQyxFQUFBQSxlQUFlLEVBQUUsUUFuQnVCO0FBd0J4Q0MsRUFBQUEsV0FBVyxFQUFFLFFBeEIyQjtBQTZCeENDLEVBQUFBLGdCQUFnQixFQUFFLGFBN0JzQjtBQWtDeENDLEVBQUFBLGVBQWUsRUFBRSxRQWxDdUI7QUF1Q3hDQyxFQUFBQSxvQkFBb0IsRUFBRSxnQkF2Q2tCO0FBNEN4Q0MsRUFBQUEsaUJBQWlCLEVBQUUsYUE1Q3FCO0FBaUR4Q0MsRUFBQUEsZ0JBQWdCLEVBQUUsYUFqRHNCO0FBc0R4Q0MsRUFBQUEsY0FBYyxFQUFFLFdBdER3QjtBQTJEeENDLEVBQUFBLG1CQUFtQixFQUFFLGVBM0RtQjtBQWdFeENDLEVBQUFBLFVBQVUsRUFBRSxPQWhFNEI7QUFxRXhDQyxFQUFBQSxXQUFXLEVBQUUsUUFyRTJCO0FBMEV4Q0MsRUFBQUEsb0JBQW9CLEVBQUUsSUFBSUMsR0FBSixDQUFRLENBQUMsU0FBRCxFQUFZLEtBQVosRUFBbUIsTUFBbkIsRUFBMkIsTUFBM0IsRUFBbUMsS0FBbkMsRUFBMEMsUUFBMUMsRUFBb0QsT0FBcEQsRUFBNkQsU0FBN0QsQ0FBUjtBQTFFa0IsQ0FBM0IsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgTGl0ZXJhbCA9IHJlcXVpcmUoJ0BnZW54L2FwcC9saWIvZW51bS9MaXRlcmFsJyk7XG5cbi8qKlxuICogQ29tbW9uIGNvbnN0YW50c1xuICogQG1vZHVsZSBMaXRlcmFsXG4gKiBcbiAqIEBleGFtcGxlXG4gKiAgIGNvbnN0IExpdGVyYWwgPSByZXF1aXJlKCdAZ2VueC9zZXJ2ZXIvbGliL2VudW0vTGl0ZXJhbCcpO1xuICovXG5cbi8qKlxuICogQ29tbW9uIGNvbnN0YW50IGRlZmluaXRpb25zLlxuICogQHJlYWRvbmx5XG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbih7fSwgTGl0ZXJhbCwge1xuICAgIC8qKlxuICAgICAqIEFwcCBtb2R1bGVzIHBhdGhcbiAgICAgKi9cbiAgICBBUFBfTU9EVUxFU19QQVRIOiAnYXBwX21vZHVsZXMnLCAgICAgXG5cbiAgICAvKipcbiAgICAgKiBCYWNrZW5kIGZpbGVzIHBhdGhcbiAgICAgKi9cbiAgICBCQUNLRU5EX1BBVEg6ICdzZXJ2ZXInLCAgIFxuXG4gICAgLyoqXG4gICAgICogQmFja2VuZCBzb3VyY2UgZmlsZXMgcGF0aFxuICAgICAqL1xuICAgIEJBQ0tFTkRfU1JDX1BBVEg6ICdzcmMnLCAgIFxuXG4gICAgLyoqXG4gICAgICogRnJvbnRlbmQgc291cmNlIGZpbGVzIHBhdGgsIGUuZy4gcmVhY3Qgc291cmNlXG4gICAgICovXG4gICAgQ0xJRU5UX1NSQ19QQVRIOiAnY2xpZW50JyxcblxuICAgIC8qKlxuICAgICAqIEZyb250ZW5kIHN0YXRpYyBmaWxlcyBwYXRoLCBlLmcuIGltYWdlcywgY3NzLCBqc1xuICAgICAqL1xuICAgIFBVQkxJQ19QQVRIOiAncHVibGljJyxcblxuICAgIC8qKlxuICAgICAqIE1pZGRsZXdhcmUgZmlsZXMgcGF0aFxuICAgICAqL1xuICAgIE1JRERMRVdBUkVTX1BBVEg6ICdtaWRkbGV3YXJlcycsICAgIFxuXG4gICAgLyoqXG4gICAgICogU2VydmVyLXdpZGUgY29uZmlnIGZpbGUgbmFtZVxuICAgICAqL1xuICAgIFNFUlZFUl9DRkdfTkFNRTogJ3NlcnZlcicsICAgIFxuXG4gICAgLyoqXG4gICAgICogU2VydmVyIGZlYXR1cmVzIHBhdGhcbiAgICAgKi9cbiAgICBTRVJWRVJfRkVBVFVSRVNfUEFUSDogJ3NlcnZlckZlYXR1cmVzJyxcblxuICAgIC8qKlxuICAgICAqIEFwcCBzcGVjaWZpYyBmZWF0dXJlcyBwYXRoXG4gICAgICovXG4gICAgQVBQX0ZFQVRVUkVTX1BBVEg6ICdhcHBGZWF0dXJlcycsXG5cbiAgICAvKipcbiAgICAgKiBDb250cm9sbGVycyBmaWxlcyBwYXRoLCB1bmRlciBiYWNrZW5kIGZvbGRlclxuICAgICAqL1xuICAgIENPTlRST0xMRVJTX1BBVEg6ICdjb250cm9sbGVycycsXG5cbiAgICAvKipcbiAgICAgKiBDb250cm9sbGVycyBmaWxlcyBwYXRoLCB1bmRlciBiYWNrZW5kIGZvbGRlclxuICAgICAqL1xuICAgIFJFU09VUkNFU19QQVRIOiAncmVzb3VyY2VzJyxcblxuICAgIC8qKlxuICAgICAqIFdlYi1zb2NrZXQgY29udHJvbGxlcnMgcGF0aFxuICAgICAqL1xuICAgIFdTX0NPTlRST0xMRVJTX1BBVEg6ICd3c0NvbnRyb2xsZXJzJyxcblxuICAgIC8qKlxuICAgICAqIFZpZXdzIGZpbGVzIHBhdGgsIHVuZGVyIGJhY2tlbmQgZm9sZGVyXG4gICAgICovXG4gICAgVklFV1NfUEFUSDogJ3ZpZXdzJyxcblxuICAgIC8qKlxuICAgICAqIExvY2FsZSBkaWN0aW9uYXJ5IGZpbGVzIHBhdGhcbiAgICAgKi9cbiAgICBMT0NBTEVfUEFUSDogJ2xvY2FsZScsXG5cbiAgICAvKipcbiAgICAgKiBBbGxvd2VkIGh0dHAgbWV0aG9kc1xuICAgICAqL1xuICAgIEFMTE9XRURfSFRUUF9NRVRIT0RTOiBuZXcgU2V0KFsnb3B0aW9ucycsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdkZWxldGUnLCAndHJhY2UnLCAnY29ubmVjdCddKVxufSk7Il19