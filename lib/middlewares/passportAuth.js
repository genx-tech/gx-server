"use strict";

require("source-map-support/register");

const {
  InvalidConfiguration,
  BadRequest
} = require('../utils/Errors');

let createMiddleware = (opt, app) => {
  if (!opt || !opt.strategy) {
    throw new InvalidConfiguration('Missing strategy name.', app, 'middlewares.passportAuth.strategy');
  }

  let passportService = app.getService('passport');

  if (!passportService) {
    throw new InvalidConfiguration('Passport feature is not enabled.', app, 'passport');
  }

  if (opt.customHandler) {
    return (ctx, next) => passportService.authenticate(opt.strategy, opt.options, (err, user, info) => {
      if (err) {
        throw err;
      }

      if (!user) {
        if (info instanceof Error) {
          throw info;
        }

        throw new BadRequest(info || `Invalid credential.`);
      }

      return ctx.login(user, opt && opt.options || {
        session: false
      }).then(next);
    })(ctx, next);
  }

  return passportService.authenticate(opt.strategy, opt.options);
};

module.exports = createMiddleware;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlcy9wYXNzcG9ydEF1dGguanMiXSwibmFtZXMiOlsiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJCYWRSZXF1ZXN0IiwicmVxdWlyZSIsImNyZWF0ZU1pZGRsZXdhcmUiLCJvcHQiLCJhcHAiLCJzdHJhdGVneSIsInBhc3Nwb3J0U2VydmljZSIsImdldFNlcnZpY2UiLCJjdXN0b21IYW5kbGVyIiwiY3R4IiwibmV4dCIsImF1dGhlbnRpY2F0ZSIsIm9wdGlvbnMiLCJlcnIiLCJ1c2VyIiwiaW5mbyIsIkVycm9yIiwibG9naW4iLCJzZXNzaW9uIiwidGhlbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTTtBQUFFQSxFQUFBQSxvQkFBRjtBQUF3QkMsRUFBQUE7QUFBeEIsSUFBdUNDLE9BQU8sQ0FBQyxpQkFBRCxDQUFwRDs7QUFnQkEsSUFBSUMsZ0JBQWdCLEdBQUcsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDakMsTUFBSSxDQUFDRCxHQUFELElBQVEsQ0FBQ0EsR0FBRyxDQUFDRSxRQUFqQixFQUEyQjtBQUN2QixVQUFNLElBQUlOLG9CQUFKLENBQ0Ysd0JBREUsRUFFRkssR0FGRSxFQUdGLG1DQUhFLENBQU47QUFLSDs7QUFFRCxNQUFJRSxlQUFlLEdBQUdGLEdBQUcsQ0FBQ0csVUFBSixDQUFlLFVBQWYsQ0FBdEI7O0FBRUEsTUFBSSxDQUFDRCxlQUFMLEVBQXNCO0FBQ2xCLFVBQU0sSUFBSVAsb0JBQUosQ0FDRixrQ0FERSxFQUVGSyxHQUZFLEVBR0YsVUFIRSxDQUFOO0FBS0g7O0FBRUQsTUFBSUQsR0FBRyxDQUFDSyxhQUFSLEVBQXVCO0FBQ25CLFdBQU8sQ0FBQ0MsR0FBRCxFQUFNQyxJQUFOLEtBQWVKLGVBQWUsQ0FBQ0ssWUFBaEIsQ0FBNkJSLEdBQUcsQ0FBQ0UsUUFBakMsRUFBMkNGLEdBQUcsQ0FBQ1MsT0FBL0MsRUFBd0QsQ0FBQ0MsR0FBRCxFQUFNQyxJQUFOLEVBQVlDLElBQVosS0FBcUI7QUFDM0YsVUFBSUYsR0FBSixFQUFTO0FBQ0wsY0FBTUEsR0FBTjtBQUNIOztBQUVELFVBQUksQ0FBQ0MsSUFBTCxFQUFXO0FBQ1AsWUFBSUMsSUFBSSxZQUFZQyxLQUFwQixFQUEyQjtBQUN2QixnQkFBTUQsSUFBTjtBQUNIOztBQUVELGNBQU0sSUFBSWYsVUFBSixDQUFlZSxJQUFJLElBQUsscUJBQXhCLENBQU47QUFDSDs7QUFFRCxhQUFPTixHQUFHLENBQUNRLEtBQUosQ0FBVUgsSUFBVixFQUFpQlgsR0FBRyxJQUFJQSxHQUFHLENBQUNTLE9BQVosSUFBd0I7QUFBRU0sUUFBQUEsT0FBTyxFQUFFO0FBQVgsT0FBeEMsRUFBNERDLElBQTVELENBQWlFVCxJQUFqRSxDQUFQO0FBQ1AsS0FkcUIsRUFjbkJELEdBZG1CLEVBY2RDLElBZGMsQ0FBdEI7QUFlSDs7QUFFRCxTQUFPSixlQUFlLENBQUNLLFlBQWhCLENBQTZCUixHQUFHLENBQUNFLFFBQWpDLEVBQTJDRixHQUFHLENBQUNTLE9BQS9DLENBQVA7QUFDSCxDQXRDRDs7QUF3Q0FRLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQm5CLGdCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB7IEludmFsaWRDb25maWd1cmF0aW9uLCBCYWRSZXF1ZXN0IH0gPSByZXF1aXJlKCcuLi91dGlscy9FcnJvcnMnKTtcblxuLyoqXG4gKiBQYXNzcG9ydCBpbml0aWFsaXphdGlvbiBtaWRkbGV3YXJlLCByZXF1aXJlZCB0byBpbml0aWFsaXplIFBhc3Nwb3J0IHNlcnZpY2UuXG4gKiBAbW9kdWxlIE1pZGRsZXdhcmVfUGFzc3BvcnRBdXRoXG4gKi9cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXNzcG9ydCBhdXRoZW50aWNhdGlvbiBtaWRkbGV3YXJlLlxuICogQHBhcmFtIHtvYmplY3R9IG9wdCAtIFBhc3Nwb3J0IG9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBvcHQuc3RyYXRlZ3kgLSBQYXNzcG9ydCBzdHJhdGVneVxuICogQHByb3BlcnR5IHtvYmplY3R9IFtvcHQub3B0aW9uc10gLSBQYXNzcG9ydCBzdHJhdGVneSBvcHRpb25zXG4gKiBAcHJvcGVydHkge29iamVjdH0gW29wdC5jdXN0b21IYW5kbGVyXSAtIEZsYWcgdG8gdXNlIHBhc3Nwb3J0IHN0cmF0ZWd5IGN1c3RvbUhhbmRsZXIgXG4gKiBAcGFyYW0ge1JvdXRhYmxlfSBhcHBcbiAqIEByZXR1cm5zIHtLb2FBY3Rpb25GdW5jdGlvbn1cbiAqL1xubGV0IGNyZWF0ZU1pZGRsZXdhcmUgPSAob3B0LCBhcHApID0+IHtcbiAgICBpZiAoIW9wdCB8fCAhb3B0LnN0cmF0ZWd5KSB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICdNaXNzaW5nIHN0cmF0ZWd5IG5hbWUuJywgXG4gICAgICAgICAgICBhcHAsIFxuICAgICAgICAgICAgJ21pZGRsZXdhcmVzLnBhc3Nwb3J0QXV0aC5zdHJhdGVneSdcbiAgICAgICAgKTtcbiAgICB9ICAgIFxuICAgIFxuICAgIGxldCBwYXNzcG9ydFNlcnZpY2UgPSBhcHAuZ2V0U2VydmljZSgncGFzc3BvcnQnKTtcblxuICAgIGlmICghcGFzc3BvcnRTZXJ2aWNlKSB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICdQYXNzcG9ydCBmZWF0dXJlIGlzIG5vdCBlbmFibGVkLicsXG4gICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICAncGFzc3BvcnQnXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKG9wdC5jdXN0b21IYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiAoY3R4LCBuZXh0KSA9PiBwYXNzcG9ydFNlcnZpY2UuYXV0aGVudGljYXRlKG9wdC5zdHJhdGVneSwgb3B0Lm9wdGlvbnMsIChlcnIsIHVzZXIsIGluZm8pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIXVzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8gaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgaW5mbztcbiAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEJhZFJlcXVlc3QoaW5mbyB8fCBgSW52YWxpZCBjcmVkZW50aWFsLmApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBjdHgubG9naW4odXNlciwgKG9wdCAmJiBvcHQub3B0aW9ucykgfHwgeyBzZXNzaW9uOiBmYWxzZSB9KS50aGVuKG5leHQpO1xuICAgICAgICB9KShjdHgsIG5leHQpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gcGFzc3BvcnRTZXJ2aWNlLmF1dGhlbnRpY2F0ZShvcHQuc3RyYXRlZ3ksIG9wdC5vcHRpb25zKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlTWlkZGxld2FyZTsiXX0=