{"version":3,"sources":["../../src/middlewares/jsonError.js"],"names":["http","require","module","exports","opt","app","handler","customHandler","getBackendAction","ctx","next","errorHandled","status","type","throw","body","err","emit","error","innerError","expose","message","STATUS_CODES"],"mappings":"AAAA;;;;AAOA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC3B,MAAIC,OAAJ;;AAEA,MAAIF,GAAG,IAAIA,GAAG,CAACG,aAAf,EAA8B;AAC1BD,IAAAA,OAAO,GAAGD,GAAG,CAACG,gBAAJ,CAAqBJ,GAAG,CAACG,aAAzB,CAAV;AACH;;AAED,SAAO,OAAOE,GAAP,EAAYC,IAAZ,KAAqB;AACxB,QAAI;AACA,YAAMA,IAAI,EAAV;;AAEA,UAAID,GAAG,CAACE,YAAR,EAAsB;AAClB;AACH;;AAED,UAAIF,GAAG,CAACG,MAAJ,IAAc,GAAlB,EAAuB;AACnB,YAAIH,GAAG,CAACI,IAAJ,KAAa,YAAjB,EAA+B;AAC3BJ,UAAAA,GAAG,CAACK,KAAJ,CAAUL,GAAG,CAACG,MAAd,EAAsBH,GAAG,CAACM,IAA1B;AACH,SAFD,MAEO;AACHN,UAAAA,GAAG,CAACK,KAAJ,CAAUL,GAAG,CAACG,MAAd;AACH;AACJ;AACJ,KAdD,CAcE,OAAOI,GAAP,EAAY;AACVP,MAAAA,GAAG,CAACG,MAAJ,GAAa,OAAOI,GAAG,CAACJ,MAAX,KAAsB,QAAtB,IAAkCI,GAAG,CAACJ,MAAJ,IAAc,GAAhD,GAAsDI,GAAG,CAACJ,MAA1D,GAAmE,GAAhF;AACAH,MAAAA,GAAG,CAACI,IAAJ,GAAW,kBAAX;;AAGA,UAAIP,OAAJ,EAAa;AACT,YAAI;AACAG,UAAAA,GAAG,CAACM,IAAJ,GAAW,MAAMT,OAAO,CAACG,GAAD,EAAMO,GAAN,CAAxB;AACAP,UAAAA,GAAG,CAACJ,GAAJ,CAAQY,IAAR,CAAa,OAAb,EAAsBD,GAAtB,EAA2BP,GAA3B;AACAA,UAAAA,GAAG,CAACE,YAAJ,GAAmB,IAAnB;AACA;AACH,SALD,CAKE,OAAOO,KAAP,EAAc;AACZA,UAAAA,KAAK,CAACC,UAAN,GAAmBH,GAAnB;AACAA,UAAAA,GAAG,GAAGE,KAAN;AACH;AACJ;;AAEDT,MAAAA,GAAG,CAACM,IAAJ,GAAW;AAAEG,QAAAA,KAAK,EAAGF,GAAG,CAACI,MAAJ,IAAcJ,GAAG,CAACK,OAAnB,GAA8BL,GAAG,CAACK,OAAlC,GAA4CrB,IAAI,CAACsB,YAAL,CAAkBb,GAAG,CAACG,MAAtB;AAArD,OAAX;AACAH,MAAAA,GAAG,CAACJ,GAAJ,CAAQY,IAAR,CAAa,OAAb,EAAsBD,GAAtB,EAA2BP,GAA3B;AACH;AACJ,GAnCD;AAoCH,CA3CD","sourcesContent":["\"use strict\";\n\n/**\n * Error response middleware with json\n * @module Middleware_JsonError\n */\n\nconst http = require('http');\n\nmodule.exports = (opt, app) => { \n    let handler;\n\n    if (opt && opt.customHandler) {\n        handler = app.getBackendAction(opt.customHandler);\n    }\n\n    return async (ctx, next) => {\n        try {\n            await next();\n\n            if (ctx.errorHandled) {\n                return;\n            }\n\n            if (ctx.status >= 400) {\n                if (ctx.type === 'text/plain') {\n                    ctx.throw(ctx.status, ctx.body);\n                } else {\n                    ctx.throw(ctx.status);\n                }  \n            }\n        } catch (err) {        \n            ctx.status = typeof err.status === 'number' && err.status >= 100 ? err.status : 500;               \n            ctx.type = 'application/json';\n\n            // accepted types\n            if (handler) {      \n                try {                    \n                    ctx.body = await handler(ctx, err);     \n                    ctx.app.emit('error', err, ctx);  \n                    ctx.errorHandled = true;      \n                    return;\n                } catch (error) {\n                    error.innerError = err;\n                    err = error;\n                }                   \n            }             \n\n            ctx.body = { error: (err.expose && err.message) ? err.message : http.STATUS_CODES[ctx.status] };\n            ctx.app.emit('error', err, ctx);\n        }        \n    } \n};       "],"file":"jsonError.js"}