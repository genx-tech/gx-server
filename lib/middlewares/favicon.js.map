{"version":3,"sources":["../../src/middlewares/favicon.js"],"names":["_","require","fs","path","HttpCode","InvalidConfiguration","favicon","options","app","isString","faviconPath","toAbsolutePath","join","publicPath","existsSync","icon","maxAge","Math","min","max","cacheControl","ctx","next","method","stats","stat","size","log","throw","NOT_FOUND","readFile","set","type","body","module","exports"],"mappings":"AAAA;;;;AAOA,MAAM;AAAEA,EAAAA;AAAF,IAAQC,OAAO,CAAC,YAAD,CAArB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAASD,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,MAAM;AAAEG,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,IAAqCJ,OAAO,CAAC,aAAD,CAAlD;;AAEA,IAAIK,OAAO,GAAG,CAACC,OAAD,EAAUC,GAAV,KAAkB;AAC5B,MAAIR,CAAC,CAACS,QAAF,CAAWF,OAAX,CAAJ,EAAyB;AACrBA,IAAAA,OAAO,GAAG;AAAEJ,MAAAA,IAAI,EAAEI;AAAR,KAAV;AACH;;AAED,MAAIG,WAAW,GAAGH,OAAO,IAAIA,OAAO,CAACJ,IAAnB,IAA2BK,GAAG,CAACG,cAAJ,CAAmBJ,OAAO,CAACJ,IAA3B,CAA3B,IAA+DA,IAAI,CAACS,IAAL,CAAUJ,GAAG,CAACK,UAAd,EAA0B,aAA1B,CAAjF;;AACA,MAAI,CAACX,EAAE,CAACY,UAAH,CAAcJ,WAAd,CAAL,EAAiC;AAC7B,UAAM,IAAIL,oBAAJ,CACD,iBAAgBK,WAAY,eAD3B,EAEFF,GAFE,EAGF,qBAHE,CAAN;AAKH;;AAED,MAAIO,IAAJ;AACA,QAAMC,MAAM,GAAGT,OAAO,CAACS,MAAR,IAAkB,IAAlB,GACT,QADS,GAETC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYZ,OAAO,CAACS,MAApB,CAAT,EAAsC,WAAtC,CAFN;AAGA,QAAMI,YAAY,GAAI,mBAAkBJ,MAAM,GAAG,IAAT,GAAgB,CAAE,EAA1D;AAEA,SAAO,OAAOK,GAAP,EAAYC,IAAZ,KAAqB;AACxB,QAAI,mBAAmBD,GAAG,CAAClB,IAAvB,IAAgC,UAAUkB,GAAG,CAACE,MAAd,IAAwB,WAAWF,GAAG,CAACE,MAA3E,EAAoF;AAChF,aAAOD,IAAI,EAAX;AACH;;AAED,QAAI,CAACP,IAAL,EAAW;AACP,UAAIS,KAAK,GAAG,MAAMtB,EAAE,CAACuB,IAAH,CAAQf,WAAR,CAAlB;;AAEA,UAAIc,KAAK,CAACE,IAAN,GAAa,OAAjB,EAA0B;AACtBlB,QAAAA,GAAG,CAACmB,GAAJ,CAAQ,MAAR,EAAgB,wBAAhB,EAA0CH,KAA1C;AACAH,QAAAA,GAAG,CAACO,KAAJ,CAAUxB,QAAQ,CAACyB,SAAnB;AACH;;AAEDd,MAAAA,IAAI,GAAG,MAAMb,EAAE,CAAC4B,QAAH,CAAYpB,WAAZ,CAAb;AACH;;AACDW,IAAAA,GAAG,CAACU,GAAJ,CAAQ,eAAR,EAAyBX,YAAzB;AACAC,IAAAA,GAAG,CAACW,IAAJ,GAAW,cAAX;AACAX,IAAAA,GAAG,CAACY,IAAJ,GAAWlB,IAAX;AACH,GAlBD;AAmBH,CAvCD;;AAyCAmB,MAAM,CAACC,OAAP,GAAiB7B,OAAjB","sourcesContent":["\"use strict\";\n\n/**\n * Middleware to serve favicon request.\n * @module Middleware_Favicon\n */\n\nconst { _ } = require('@genx/july');\nconst { fs } = require('@genx/sys');\nconst path = require('path');\nconst { HttpCode, InvalidConfiguration } = require('@genx/error');\n\nlet favicon = (options, app) => {\n    if (_.isString(options)) {\n        options = { path: options };\n    } \n    \n    let faviconPath = options && options.path && app.toAbsolutePath(options.path) || path.join(app.publicPath, 'favicon.ico');\n    if (!fs.existsSync(faviconPath)) {\n        throw new InvalidConfiguration(\n            `Favicon path \"${faviconPath}\" not exists.`,\n            app,\n            'middlewares.favicon'\n        );\n    }   \n\n    let icon;\n    const maxAge = options.maxAge == null\n        ? 86400000\n        : Math.min(Math.max(0, options.maxAge), 31556926000);\n    const cacheControl = `public, max-age=${maxAge / 1000 | 0}`;\n\n    return async (ctx, next) => {\n        if ('/favicon.ico' !== ctx.path || ('GET' !== ctx.method && 'HEAD' !== ctx.method)) {\n            return next();\n        }\n\n        if (!icon) {\n            let stats = await fs.stat(faviconPath);\n            //maximum 1M\n            if (stats.size > 1048576) {\n                app.log('warn', 'favicon.ico too large.', stats);\n                ctx.throw(HttpCode.NOT_FOUND);                \n            }\n            \n            icon = await fs.readFile(faviconPath);\n        }\n        ctx.set('Cache-Control', cacheControl);\n        ctx.type = 'image/x-icon';\n        ctx.body = icon;\n    };\n};\n\nmodule.exports = favicon;"],"file":"favicon.js"}