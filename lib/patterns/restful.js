"use strict";

require("source-map-support/register");

const http = require('http');

const {
  _
} = require('rk-utils');

const statusToError = {
  400: 'invalid_request',
  404: 'resource_not_found'
};
const unknownError = 'unknown_error';

const wrapRequest = ctx => ({
  method: ctx.method,
  endpoint: ctx._matchedRoute,
  query: _.toPlainObject(ctx.query)
});

exports.wrapQuery = (ctx, actualQuery, result, extra) => {
  let {
    status,
    ...others
  } = extra || {};
  let request = wrapRequest(ctx);

  if (status && status !== 200) {
    ctx.status = status;
    status = 'error';
    others = {
      code: statusToError[ctx.status] || unknownError,
      ...others
    };
  } else {
    status = 'success';
  }

  return {
    status,
    request,
    response: result,
    actualQuery,
    ...others
  };
};

exports.wrapError = (ctx, error) => {
  let request = wrapRequest(ctx);
  let response = {
    message: error.expose ? error.message : http.STATUS_CODES[ctx.status]
  };
  let code = statusToError[ctx.status] || unknownError;

  if (ctx.app.env !== 'production') {
    response.app = ctx.app.name;
    response.stack = err.stack;
  }

  return {
    status: 'error',
    request,
    response,
    code
  };
};

exports.wrapOperation = (ctx, operation, result, extra) => {
  let {
    status,
    ...others
  } = extra || {};
  let request = wrapRequest(ctx);

  if (status && status !== 200) {
    ctx.status = status;
    status = 'error';
    others = {
      code: statusToError[ctx.status] || unknownError,
      ...others
    };
  } else {
    status = 'success';
  }

  return {
    status,
    request,
    response: result,
    operation,
    ...others
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXR0ZXJucy9yZXN0ZnVsLmpzIl0sIm5hbWVzIjpbImh0dHAiLCJyZXF1aXJlIiwiXyIsInN0YXR1c1RvRXJyb3IiLCJ1bmtub3duRXJyb3IiLCJ3cmFwUmVxdWVzdCIsImN0eCIsIm1ldGhvZCIsImVuZHBvaW50IiwiX21hdGNoZWRSb3V0ZSIsInF1ZXJ5IiwidG9QbGFpbk9iamVjdCIsImV4cG9ydHMiLCJ3cmFwUXVlcnkiLCJhY3R1YWxRdWVyeSIsInJlc3VsdCIsImV4dHJhIiwic3RhdHVzIiwib3RoZXJzIiwicmVxdWVzdCIsImNvZGUiLCJyZXNwb25zZSIsIndyYXBFcnJvciIsImVycm9yIiwibWVzc2FnZSIsImV4cG9zZSIsIlNUQVRVU19DT0RFUyIsImFwcCIsImVudiIsIm5hbWUiLCJzdGFjayIsImVyciIsIndyYXBPcGVyYXRpb24iLCJvcGVyYXRpb24iXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFRRCxPQUFPLENBQUMsVUFBRCxDQUFyQjs7QUFFQSxNQUFNRSxhQUFhLEdBQUc7QUFDbEIsT0FBSyxpQkFEYTtBQUVsQixPQUFLO0FBRmEsQ0FBdEI7QUFLQSxNQUFNQyxZQUFZLEdBQUcsZUFBckI7O0FBRUEsTUFBTUMsV0FBVyxHQUFJQyxHQUFELEtBQVU7QUFDMUJDLEVBQUFBLE1BQU0sRUFBRUQsR0FBRyxDQUFDQyxNQURjO0FBRTFCQyxFQUFBQSxRQUFRLEVBQUVGLEdBQUcsQ0FBQ0csYUFGWTtBQUcxQkMsRUFBQUEsS0FBSyxFQUFFUixDQUFDLENBQUNTLGFBQUYsQ0FBZ0JMLEdBQUcsQ0FBQ0ksS0FBcEI7QUFIbUIsQ0FBVixDQUFwQjs7QUFNQUUsT0FBTyxDQUFDQyxTQUFSLEdBQW9CLENBQUNQLEdBQUQsRUFBTVEsV0FBTixFQUFtQkMsTUFBbkIsRUFBMkJDLEtBQTNCLEtBQXFDO0FBQ3JELE1BQUk7QUFBRUMsSUFBQUEsTUFBRjtBQUFVLE9BQUdDO0FBQWIsTUFBd0JGLEtBQUssSUFBSSxFQUFyQztBQUNBLE1BQUlHLE9BQU8sR0FBR2QsV0FBVyxDQUFDQyxHQUFELENBQXpCOztBQUVBLE1BQUlXLE1BQU0sSUFBSUEsTUFBTSxLQUFLLEdBQXpCLEVBQThCO0FBQzFCWCxJQUFBQSxHQUFHLENBQUNXLE1BQUosR0FBYUEsTUFBYjtBQUVBQSxJQUFBQSxNQUFNLEdBQUcsT0FBVDtBQUVBQyxJQUFBQSxNQUFNLEdBQUc7QUFDTEUsTUFBQUEsSUFBSSxFQUFFakIsYUFBYSxDQUFDRyxHQUFHLENBQUNXLE1BQUwsQ0FBYixJQUE2QmIsWUFEOUI7QUFFTCxTQUFHYztBQUZFLEtBQVQ7QUFJSCxHQVRELE1BU087QUFDSEQsSUFBQUEsTUFBTSxHQUFHLFNBQVQ7QUFDSDs7QUFFRCxTQUFPO0FBQ0hBLElBQUFBLE1BREc7QUFFSEUsSUFBQUEsT0FGRztBQUdIRSxJQUFBQSxRQUFRLEVBQUVOLE1BSFA7QUFJSEQsSUFBQUEsV0FKRztBQUtILE9BQUdJO0FBTEEsR0FBUDtBQU9ILENBeEJEOztBQTBCQU4sT0FBTyxDQUFDVSxTQUFSLEdBQW9CLENBQUNoQixHQUFELEVBQU1pQixLQUFOLEtBQWdCO0FBQ2hDLE1BQUlKLE9BQU8sR0FBR2QsV0FBVyxDQUFDQyxHQUFELENBQXpCO0FBRUEsTUFBSWUsUUFBUSxHQUFHO0FBQ1hHLElBQUFBLE9BQU8sRUFBRUQsS0FBSyxDQUFDRSxNQUFOLEdBQWVGLEtBQUssQ0FBQ0MsT0FBckIsR0FBK0J4QixJQUFJLENBQUMwQixZQUFMLENBQWtCcEIsR0FBRyxDQUFDVyxNQUF0QjtBQUQ3QixHQUFmO0FBSUEsTUFBSUcsSUFBSSxHQUFHakIsYUFBYSxDQUFDRyxHQUFHLENBQUNXLE1BQUwsQ0FBYixJQUE2QmIsWUFBeEM7O0FBRUEsTUFBSUUsR0FBRyxDQUFDcUIsR0FBSixDQUFRQyxHQUFSLEtBQWdCLFlBQXBCLEVBQWtDO0FBQzlCUCxJQUFBQSxRQUFRLENBQUNNLEdBQVQsR0FBZXJCLEdBQUcsQ0FBQ3FCLEdBQUosQ0FBUUUsSUFBdkI7QUFDQVIsSUFBQUEsUUFBUSxDQUFDUyxLQUFULEdBQWlCQyxHQUFHLENBQUNELEtBQXJCO0FBQ0g7O0FBRUQsU0FBTztBQUNIYixJQUFBQSxNQUFNLEVBQUUsT0FETDtBQUVIRSxJQUFBQSxPQUZHO0FBR0hFLElBQUFBLFFBSEc7QUFJSEQsSUFBQUE7QUFKRyxHQUFQO0FBTUgsQ0FwQkQ7O0FBc0JBUixPQUFPLENBQUNvQixhQUFSLEdBQXdCLENBQUMxQixHQUFELEVBQU0yQixTQUFOLEVBQWlCbEIsTUFBakIsRUFBeUJDLEtBQXpCLEtBQW1DO0FBQ3ZELE1BQUk7QUFBRUMsSUFBQUEsTUFBRjtBQUFVLE9BQUdDO0FBQWIsTUFBd0JGLEtBQUssSUFBSSxFQUFyQztBQUNBLE1BQUlHLE9BQU8sR0FBR2QsV0FBVyxDQUFDQyxHQUFELENBQXpCOztBQUVBLE1BQUlXLE1BQU0sSUFBSUEsTUFBTSxLQUFLLEdBQXpCLEVBQThCO0FBQzFCWCxJQUFBQSxHQUFHLENBQUNXLE1BQUosR0FBYUEsTUFBYjtBQUVBQSxJQUFBQSxNQUFNLEdBQUcsT0FBVDtBQUVBQyxJQUFBQSxNQUFNLEdBQUc7QUFDTEUsTUFBQUEsSUFBSSxFQUFFakIsYUFBYSxDQUFDRyxHQUFHLENBQUNXLE1BQUwsQ0FBYixJQUE2QmIsWUFEOUI7QUFFTCxTQUFHYztBQUZFLEtBQVQ7QUFLSCxHQVZELE1BVU87QUFDSEQsSUFBQUEsTUFBTSxHQUFHLFNBQVQ7QUFDSDs7QUFFRCxTQUFPO0FBQ0hBLElBQUFBLE1BREc7QUFFSEUsSUFBQUEsT0FGRztBQUdIRSxJQUFBQSxRQUFRLEVBQUVOLE1BSFA7QUFJSGtCLElBQUFBLFNBSkc7QUFLSCxPQUFHZjtBQUxBLEdBQVA7QUFPSCxDQXpCRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG5jb25zdCB7IF8gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5cbmNvbnN0IHN0YXR1c1RvRXJyb3IgPSB7XG4gICAgNDAwOiAnaW52YWxpZF9yZXF1ZXN0JyxcbiAgICA0MDQ6ICdyZXNvdXJjZV9ub3RfZm91bmQnXG59O1xuXG5jb25zdCB1bmtub3duRXJyb3IgPSAndW5rbm93bl9lcnJvcic7XG5cbmNvbnN0IHdyYXBSZXF1ZXN0ID0gKGN0eCkgPT4gKHtcbiAgICBtZXRob2Q6IGN0eC5tZXRob2QsXG4gICAgZW5kcG9pbnQ6IGN0eC5fbWF0Y2hlZFJvdXRlLFxuICAgIHF1ZXJ5OiBfLnRvUGxhaW5PYmplY3QoY3R4LnF1ZXJ5KVxufSk7XG5cbmV4cG9ydHMud3JhcFF1ZXJ5ID0gKGN0eCwgYWN0dWFsUXVlcnksIHJlc3VsdCwgZXh0cmEpID0+IHtcbiAgICBsZXQgeyBzdGF0dXMsIC4uLm90aGVycyB9ID0gZXh0cmEgfHwge307XG4gICAgbGV0IHJlcXVlc3QgPSB3cmFwUmVxdWVzdChjdHgpOyAgICBcblxuICAgIGlmIChzdGF0dXMgJiYgc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgY3R4LnN0YXR1cyA9IHN0YXR1cztcblxuICAgICAgICBzdGF0dXMgPSAnZXJyb3InO1xuXG4gICAgICAgIG90aGVycyA9IHtcbiAgICAgICAgICAgIGNvZGU6IHN0YXR1c1RvRXJyb3JbY3R4LnN0YXR1c10gfHwgdW5rbm93bkVycm9yLFxuICAgICAgICAgICAgLi4ub3RoZXJzXG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdHVzID0gJ3N1Y2Nlc3MnO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1cyxcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgcmVzcG9uc2U6IHJlc3VsdCxcbiAgICAgICAgYWN0dWFsUXVlcnksXG4gICAgICAgIC4uLm90aGVyc1xuICAgIH07XG59O1xuXG5leHBvcnRzLndyYXBFcnJvciA9IChjdHgsIGVycm9yKSA9PiB7XG4gICAgbGV0IHJlcXVlc3QgPSB3cmFwUmVxdWVzdChjdHgpOyAgICBcblxuICAgIGxldCByZXNwb25zZSA9IHsgXG4gICAgICAgIG1lc3NhZ2U6IGVycm9yLmV4cG9zZSA/IGVycm9yLm1lc3NhZ2UgOiBodHRwLlNUQVRVU19DT0RFU1tjdHguc3RhdHVzXVxuICAgIH07XG5cbiAgICBsZXQgY29kZSA9IHN0YXR1c1RvRXJyb3JbY3R4LnN0YXR1c10gfHwgdW5rbm93bkVycm9yO1xuXG4gICAgaWYgKGN0eC5hcHAuZW52ICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgcmVzcG9uc2UuYXBwID0gY3R4LmFwcC5uYW1lO1xuICAgICAgICByZXNwb25zZS5zdGFjayA9IGVyci5zdGFjazsgICAgICAgIFxuICAgIH0gICAgICAgIFxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiAnZXJyb3InLFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICByZXNwb25zZSxcbiAgICAgICAgY29kZVxuICAgIH07XG59O1xuXG5leHBvcnRzLndyYXBPcGVyYXRpb24gPSAoY3R4LCBvcGVyYXRpb24sIHJlc3VsdCwgZXh0cmEpID0+IHtcbiAgICBsZXQgeyBzdGF0dXMsIC4uLm90aGVycyB9ID0gZXh0cmEgfHwge307XG4gICAgbGV0IHJlcXVlc3QgPSB3cmFwUmVxdWVzdChjdHgpOyBcblxuICAgIGlmIChzdGF0dXMgJiYgc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgY3R4LnN0YXR1cyA9IHN0YXR1cztcblxuICAgICAgICBzdGF0dXMgPSAnZXJyb3InO1xuXG4gICAgICAgIG90aGVycyA9IHsgXG4gICAgICAgICAgICBjb2RlOiBzdGF0dXNUb0Vycm9yW2N0eC5zdGF0dXNdIHx8IHVua25vd25FcnJvcixcbiAgICAgICAgICAgIC4uLm90aGVyc1xuICAgICAgICB9OyAgICAgICBcbiAgICAgICAgXG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdHVzID0gJ3N1Y2Nlc3MnO1xuICAgIH0gXG5cbiAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXMsXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIHJlc3BvbnNlOiByZXN1bHQsXG4gICAgICAgIG9wZXJhdGlvbixcbiAgICAgICAgLi4ub3RoZXJzXG4gICAgfTtcbn0iXX0=