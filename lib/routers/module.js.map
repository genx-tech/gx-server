{"version":3,"sources":["../../src/routers/module.js"],"names":["path","require","_","url","urlUtil","text","Literal","Router","InvalidConfiguration","module","exports","app","baseRoute","moduleItem","controllerPath","join","backendPath","CONTROLLERS_PATH","controller","currentPrefix","route","router","prefix","dropIfEndsWith","middlewares","useMiddlewares","controllers","castArray","forEach","moduleController","controllerFile","isController","actionName","action","__metaHttpMethod","method","subRoute","ensureStartsWith","__metaRoute","kebabCase","bindAction","bind","ALLOWED_HTTP_METHODS","has","addRoute","__metaMiddlewares","concat","addRouter"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst path = require(\"path\");\nconst { _, url: urlUtil, text } = require(\"@genx/july\");\nconst Literal = require(\"../enum/Literal\");\nconst Router = require(\"@koa/router\");\nconst { InvalidConfiguration } = require(\"@genx/error\");\n\n/**\n * Module router for mounting a specific controller.\n * @module Router_Module\n */\n\n/**\n * Create a module-based router.\n * @param {Routable} app\n * @param {string} baseRoute\n * @param {*} moduleItem\n * @example\n *   '<base path>': {\n *       module: {\n *           middlewares:\n *           controller:\n *       }\n *   }\n *\n *   '<base path>': {\n *       module: \"controller\"\n *   }\n */\nmodule.exports = function (app, baseRoute, moduleItem) {\n    let controllerPath = path.join(app.backendPath, Literal.CONTROLLERS_PATH);\n\n    if (typeof moduleItem === \"string\") {\n        // [ 'controllerName' ]\n        moduleItem = {\n            controller: moduleItem,\n        };\n    }\n\n    let currentPrefix = urlUtil.join(baseRoute, moduleItem.route || \"/\");\n    let router = currentPrefix === \"/\" ? new Router() : new Router({ prefix: text.dropIfEndsWith(currentPrefix, \"/\") });\n\n    if (moduleItem.middlewares) {\n        //module-wide middlewares\n        app.useMiddlewares(router, moduleItem.middlewares);\n    }\n\n    const controllers = _.castArray(moduleItem.controller);\n\n    controllers.forEach((moduleController) => {\n        let controllerFile = path.join(controllerPath, moduleController + \".js\");\n        let controller;\n\n        controller = require(controllerFile);\n        let isController = false;\n\n        if (typeof controller === \"function\") {\n            controller = new controller(app);\n            isController = true;\n        }\n\n        for (let actionName in controller) {\n            let action = controller[actionName];\n            if (typeof action !== \"function\" || !action.__metaHttpMethod) continue; // only marked httpMethod should be mounted\n\n            const method = action.__metaHttpMethod;\n            let subRoute = text.ensureStartsWith(action.__metaRoute || _.kebabCase(actionName), \"/\");\n\n            let bindAction;\n\n            if (isController) {\n                bindAction = action.bind(controller);\n            } else {\n                bindAction = action;\n            }\n\n            if (!Literal.ALLOWED_HTTP_METHODS.has(method)) {\n                throw new InvalidConfiguration(\n                    \"Unsupported http method: \" + method,\n                    app,\n                    `routing.${baseRoute}.modules ${moduleItem.controller}.${actionName}`\n                );\n            }\n\n            app.addRoute(\n                router,\n                method,\n                subRoute,\n                action.__metaMiddlewares ? action.__metaMiddlewares.concat([bindAction]) : bindAction\n            );\n        }\n    });\n\n    app.addRouter(router);\n};\n"],"file":"module.js"}