"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  eachAsync_
} = require('@genx/july');

const {
  Feature
} = require('..').Enums;

const {
  InvalidConfiguration
} = require('@genx/error');

module.exports = {
  type: Feature.SERVICE,
  load_: function (app, config) {
    const KoaPassport = app.tryRequire('koa-passport').KoaPassport;
    let passport = new KoaPassport();

    if (_.isEmpty(config) || _.isEmpty(config.strategies)) {
      throw new InvalidConfiguration('Missing passport strategies.', app, 'passport.strategies');
    }

    let initializeMiddleware = passport.initialize(config.init);
    passport.middlewares = config.useSession ? [initializeMiddleware, passport.session()] : initializeMiddleware;
    app.on('before:' + Feature.READY, () => {
      app.useMiddlewares(app.router, passport.middlewares);
    });

    passport.hasStrategy = name => {
      return name in passport._strategies;
    };

    app.registerService('passport', passport);

    if (config.exposeToServer && app !== app.server) {
      app.server.registerService('passport', passport);
    }

    let strategies = Array.isArray(config.strategies) ? config.strategies : [config.strategies];
    return eachAsync_(strategies, async strategy => {
      let strategyScript = path.join(app.backendPath, 'passports', strategy + '.js');

      let strategyInitiator = require(strategyScript);

      return strategyInitiator(app, passport);
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcHBGZWF0dXJlcy9wYXNzcG9ydC5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIl8iLCJlYWNoQXN5bmNfIiwiRmVhdHVyZSIsIkVudW1zIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwidHlwZSIsIlNFUlZJQ0UiLCJsb2FkXyIsImFwcCIsImNvbmZpZyIsIktvYVBhc3Nwb3J0IiwidHJ5UmVxdWlyZSIsInBhc3Nwb3J0IiwiaXNFbXB0eSIsInN0cmF0ZWdpZXMiLCJpbml0aWFsaXplTWlkZGxld2FyZSIsImluaXRpYWxpemUiLCJpbml0IiwibWlkZGxld2FyZXMiLCJ1c2VTZXNzaW9uIiwic2Vzc2lvbiIsIm9uIiwiUkVBRFkiLCJ1c2VNaWRkbGV3YXJlcyIsInJvdXRlciIsImhhc1N0cmF0ZWd5IiwibmFtZSIsIl9zdHJhdGVnaWVzIiwicmVnaXN0ZXJTZXJ2aWNlIiwiZXhwb3NlVG9TZXJ2ZXIiLCJzZXJ2ZXIiLCJBcnJheSIsImlzQXJyYXkiLCJzdHJhdGVneSIsInN0cmF0ZWd5U2NyaXB0Iiwiam9pbiIsImJhY2tlbmRQYXRoIiwic3RyYXRlZ3lJbml0aWF0b3IiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBT0EsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLENBQUY7QUFBS0MsRUFBQUE7QUFBTCxJQUFvQkYsT0FBTyxDQUFDLFlBQUQsQ0FBakM7O0FBQ0EsTUFBTTtBQUFFRyxFQUFBQTtBQUFGLElBQWNILE9BQU8sQ0FBQyxJQUFELENBQVAsQ0FBY0ksS0FBbEM7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQTJCTCxPQUFPLENBQUMsYUFBRCxDQUF4Qzs7QUFFQU0sTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBTWJDLEVBQUFBLElBQUksRUFBRUwsT0FBTyxDQUFDTSxPQU5EO0FBcUJiQyxFQUFBQSxLQUFLLEVBQUUsVUFBVUMsR0FBVixFQUFlQyxNQUFmLEVBQXVCO0FBQzFCLFVBQU1DLFdBQVcsR0FBR0YsR0FBRyxDQUFDRyxVQUFKLENBQWUsY0FBZixFQUErQkQsV0FBbkQ7QUFDQSxRQUFJRSxRQUFRLEdBQUcsSUFBSUYsV0FBSixFQUFmOztBQUNBLFFBQUlaLENBQUMsQ0FBQ2UsT0FBRixDQUFVSixNQUFWLEtBQXFCWCxDQUFDLENBQUNlLE9BQUYsQ0FBVUosTUFBTSxDQUFDSyxVQUFqQixDQUF6QixFQUF1RDtBQUNuRCxZQUFNLElBQUlaLG9CQUFKLENBQ0YsOEJBREUsRUFFRk0sR0FGRSxFQUdGLHFCQUhFLENBQU47QUFLSDs7QUFFRCxRQUFJTyxvQkFBb0IsR0FBR0gsUUFBUSxDQUFDSSxVQUFULENBQW9CUCxNQUFNLENBQUNRLElBQTNCLENBQTNCO0FBRUFMLElBQUFBLFFBQVEsQ0FBQ00sV0FBVCxHQUF1QlQsTUFBTSxDQUFDVSxVQUFQLEdBQW9CLENBQUVKLG9CQUFGLEVBQXdCSCxRQUFRLENBQUNRLE9BQVQsRUFBeEIsQ0FBcEIsR0FBbUVMLG9CQUExRjtBQUVBUCxJQUFBQSxHQUFHLENBQUNhLEVBQUosQ0FBTyxZQUFZckIsT0FBTyxDQUFDc0IsS0FBM0IsRUFBa0MsTUFBTTtBQUNwQ2QsTUFBQUEsR0FBRyxDQUFDZSxjQUFKLENBQW1CZixHQUFHLENBQUNnQixNQUF2QixFQUErQlosUUFBUSxDQUFDTSxXQUF4QztBQUNILEtBRkQ7O0FBSUFOLElBQUFBLFFBQVEsQ0FBQ2EsV0FBVCxHQUF3QkMsSUFBRCxJQUFVO0FBQzdCLGFBQU9BLElBQUksSUFBSWQsUUFBUSxDQUFDZSxXQUF4QjtBQUNILEtBRkQ7O0FBSUFuQixJQUFBQSxHQUFHLENBQUNvQixlQUFKLENBQW9CLFVBQXBCLEVBQWdDaEIsUUFBaEM7O0FBRUEsUUFBSUgsTUFBTSxDQUFDb0IsY0FBUCxJQUF5QnJCLEdBQUcsS0FBS0EsR0FBRyxDQUFDc0IsTUFBekMsRUFBaUQ7QUFDN0N0QixNQUFBQSxHQUFHLENBQUNzQixNQUFKLENBQVdGLGVBQVgsQ0FBMkIsVUFBM0IsRUFBdUNoQixRQUF2QztBQUNIOztBQUVELFFBQUlFLFVBQVUsR0FBR2lCLEtBQUssQ0FBQ0MsT0FBTixDQUFjdkIsTUFBTSxDQUFDSyxVQUFyQixJQUFtQ0wsTUFBTSxDQUFDSyxVQUExQyxHQUF1RCxDQUFFTCxNQUFNLENBQUNLLFVBQVQsQ0FBeEU7QUFFQSxXQUFPZixVQUFVLENBQUNlLFVBQUQsRUFBYSxNQUFNbUIsUUFBTixJQUFrQjtBQUM1QyxVQUFJQyxjQUFjLEdBQUd0QyxJQUFJLENBQUN1QyxJQUFMLENBQVUzQixHQUFHLENBQUM0QixXQUFkLEVBQTJCLFdBQTNCLEVBQXdDSCxRQUFRLEdBQUcsS0FBbkQsQ0FBckI7O0FBQ0EsVUFBSUksaUJBQWlCLEdBQUd4QyxPQUFPLENBQUNxQyxjQUFELENBQS9COztBQUNBLGFBQU9HLGlCQUFpQixDQUFDN0IsR0FBRCxFQUFNSSxRQUFOLENBQXhCO0FBQ0gsS0FKZ0IsQ0FBakI7QUFLSDtBQXpEWSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEVuYWJsZSBwYXNzcG9ydCBmZWF0dXJlXG4gKiBAbW9kdWxlIEZlYXR1cmVfUGFzc3BvcnRcbiAqL1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgeyBfLCBlYWNoQXN5bmNfIH0gPSByZXF1aXJlKCdAZ2VueC9qdWx5Jyk7XG5jb25zdCB7IEZlYXR1cmUgfSA9IHJlcXVpcmUoJy4uJykuRW51bXM7XG5jb25zdCB7IEludmFsaWRDb25maWd1cmF0aW9uIH0gPSByZXF1aXJlKCdAZ2VueC9lcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZmVhdHVyZSBpcyBsb2FkZWQgYXQgc2VydmljZSBzdGFnZVxuICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgKi9cbiAgICB0eXBlOiBGZWF0dXJlLlNFUlZJQ0UsXG5cbiAgICAvKipcbiAgICAgKiBMb2FkIHRoZSBmZWF0dXJlXG4gICAgICogQHBhcmFtIHtSb3V0YWJsZX0gYXBwIC0gVGhlIGFwcCBtb2R1bGUgb2JqZWN0XG4gICAgICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyAtIFBhc3Nwb3J0IHNldHRpbmdzXG4gICAgICogQHByb3BlcnR5IHtib29sfSBbY29uZmlnLnVzZVNlc3Npb249ZmFsc2VdIC0gVXNlIHNlc3Npb24gb3Igbm90LCBkZWZhdWx0OiBmYWxzZVxuICAgICAqICBcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gY29uZmlnLmluaXQgLSBQYXNzcG9ydCBpbml0aWFsaXphdGlvbiBzZXR0aW5ncyAgICAgXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtjb25maWcuaW5pdC51c2VyUHJvcGVydHk9J3VzZXInXSAtIFVzZXIgcHJvcGVydHkgbmFtZSwgZGVmYXVsdDogdXNlciAgICAgIFxuICAgICAqIFxuICAgICAqIEBwcm9wZXJ0eSB7YXJyYXl9IGNvbmZpZy5zdHJhdGVnaWVzIC0gUGFzc3BvcnQgc3RyYXRlZ2llcywgZS5nLiBbICdsb2NhbCcsICdmYWNlYm9vaycgXVxuICAgICAqIEBwcm9wZXJ0eSB7YXJyYXl9IGNvbmZpZy5leHBvc2VUb1NlcnZlciAtIEV4cG9zZSB0aGUgcGFzc3BvcnQgc2VydmNpZSB0byB3aGlsZSBzZXJ2ZXJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZS48Kj59XG4gICAgICovXG4gICAgbG9hZF86IGZ1bmN0aW9uIChhcHAsIGNvbmZpZykge1xuICAgICAgICBjb25zdCBLb2FQYXNzcG9ydCA9IGFwcC50cnlSZXF1aXJlKCdrb2EtcGFzc3BvcnQnKS5Lb2FQYXNzcG9ydDtcbiAgICAgICAgbGV0IHBhc3Nwb3J0ID0gbmV3IEtvYVBhc3Nwb3J0KCk7XG4gICAgICAgIGlmIChfLmlzRW1wdHkoY29uZmlnKSB8fCBfLmlzRW1wdHkoY29uZmlnLnN0cmF0ZWdpZXMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgICAgJ01pc3NpbmcgcGFzc3BvcnQgc3RyYXRlZ2llcy4nLFxuICAgICAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgICAgICAncGFzc3BvcnQuc3RyYXRlZ2llcydcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gICAgICAgIFxuXG4gICAgICAgIGxldCBpbml0aWFsaXplTWlkZGxld2FyZSA9IHBhc3Nwb3J0LmluaXRpYWxpemUoY29uZmlnLmluaXQpO1xuXG4gICAgICAgIHBhc3Nwb3J0Lm1pZGRsZXdhcmVzID0gY29uZmlnLnVzZVNlc3Npb24gPyBbIGluaXRpYWxpemVNaWRkbGV3YXJlLCBwYXNzcG9ydC5zZXNzaW9uKCkgXSA6IGluaXRpYWxpemVNaWRkbGV3YXJlO1xuXG4gICAgICAgIGFwcC5vbignYmVmb3JlOicgKyBGZWF0dXJlLlJFQURZLCAoKSA9PiB7XG4gICAgICAgICAgICBhcHAudXNlTWlkZGxld2FyZXMoYXBwLnJvdXRlciwgcGFzc3BvcnQubWlkZGxld2FyZXMpO1xuICAgICAgICB9KTtcblxuICAgICAgICBwYXNzcG9ydC5oYXNTdHJhdGVneSA9IChuYW1lKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gbmFtZSBpbiBwYXNzcG9ydC5fc3RyYXRlZ2llcztcbiAgICAgICAgfTtcblxuICAgICAgICBhcHAucmVnaXN0ZXJTZXJ2aWNlKCdwYXNzcG9ydCcsIHBhc3Nwb3J0KTsgICAgICAgIFxuXG4gICAgICAgIGlmIChjb25maWcuZXhwb3NlVG9TZXJ2ZXIgJiYgYXBwICE9PSBhcHAuc2VydmVyKSB7XG4gICAgICAgICAgICBhcHAuc2VydmVyLnJlZ2lzdGVyU2VydmljZSgncGFzc3BvcnQnLCBwYXNzcG9ydCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc3RyYXRlZ2llcyA9IEFycmF5LmlzQXJyYXkoY29uZmlnLnN0cmF0ZWdpZXMpID8gY29uZmlnLnN0cmF0ZWdpZXMgOiBbIGNvbmZpZy5zdHJhdGVnaWVzIF07XG5cbiAgICAgICAgcmV0dXJuIGVhY2hBc3luY18oc3RyYXRlZ2llcywgYXN5bmMgc3RyYXRlZ3kgPT4ge1xuICAgICAgICAgICAgbGV0IHN0cmF0ZWd5U2NyaXB0ID0gcGF0aC5qb2luKGFwcC5iYWNrZW5kUGF0aCwgJ3Bhc3Nwb3J0cycsIHN0cmF0ZWd5ICsgJy5qcycpO1xuICAgICAgICAgICAgbGV0IHN0cmF0ZWd5SW5pdGlhdG9yID0gcmVxdWlyZShzdHJhdGVneVNjcmlwdCk7XG4gICAgICAgICAgICByZXR1cm4gc3RyYXRlZ3lJbml0aWF0b3IoYXBwLCBwYXNzcG9ydCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn07Il19