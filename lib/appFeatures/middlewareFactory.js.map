{"version":3,"sources":["../../src/appFeatures/middlewareFactory.js"],"names":["_","require","Feature","Enums","InvalidConfiguration","module","exports","type","INIT","load_","app","factories","forOwn","factoryInfo","name","registerMiddlewareFactory","opt","ownerApp","assert","isEmpty","chains","isPlainObject","options","middleware","push","getMiddlewareFactory","Array","isArray","map","middlewareInfo","i","length","undefined"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/**\n * Enable object store feature\n * @module Feature_ObjectStore\n * \n * @example\n *   \"middlewareFactory\": {\n *       //new middleware name\n *       \"listOfMiddleware\": {\n *           \"middleware1\": { // options\n *               ...\n *           },\n *           \"middleware2\": { // options\n *               ...\n *           }\n *       },\n *        \"altListOfMiddleware\": [\n *           {\n *               \"name\": \"middleware1\",\n *               \"options\": { ... } \n *           },\n *           [ \"middleware2\", { ... } ],\n *           \"middleware3\"\n *       ]\n *   },\n */\n\nconst { _ } = require('@genx/july');\nconst { Feature } = require('..').Enums;\nconst { InvalidConfiguration } = require('@genx/error');\n\nmodule.exports = {\n    /**\n     * This feature is loaded at init stage\n     * @member {string}\n     */\n    type: Feature.INIT,\n\n    /**\n     * Load the feature\n     * @param {App} app - The app module object\n     * @param {object} factories - Object factories\n     * @returns {Promise.<*>}\n     */\n    load_: (app, factories) => {\n        _.forOwn(factories, (factoryInfo, name) => {\n            app.registerMiddlewareFactory(name, (opt, ownerApp) => { \n                assert: _.isEmpty(opt), `Pre-configured middleware factory \"${name}\" should be used with empty options.`;\n                let chains;\n\n                if (_.isPlainObject(factoryInfo)) {\n                    chains = [];\n    \n                    _.forOwn(factoryInfo, (options, middleware) => {\n                        chains.push(app.getMiddlewareFactory(middleware)(options, ownerApp));\n                    });                    \n                } else if (Array.isArray(factoryInfo)) {\n                    chains = factoryInfo.map((middlewareInfo, i) => {\n                        if (_.isPlainObject(middlewareInfo)) {\n                            if (!middlewareInfo.name) {\n                                throw new InvalidConfiguration(\n                                    'Missing referenced middleware name.',\n                                    app,\n                                    `middlewareFactory.${name}[${i}].name`);\n                            }\n\n                            return app.getMiddlewareFactory(middlewareInfo.name)(middlewareInfo.options, ownerApp);\n                        }\n\n                        if (Array.isArray(middlewareInfo)) {\n                            if (middlewareInfo.length < 1 || middlewareInfo.length > 2 || typeof middlewareInfo[0] !== 'string') {\n                                throw new InvalidConfiguration(\n                                    'Invalid middleware factory item config.',\n                                    app,\n                                    `middlewareFactory.${name}[${i}]`);\n                            }\n\n                            return app.getMiddlewareFactory(middlewareInfo[0])(middlewareInfo.length > 1 ? middlewareInfo[1] : undefined, ownerApp);\n                        }\n\n                        if (typeof middlewareInfo === 'string') {\n                            return app.getMiddlewareFactory(middlewareInfo)(undefined, ownerApp);\n                        }\n\n                        throw new InvalidConfiguration(\n                            'Invalid middleware factory item config.',\n                            app,\n                            `middlewareFactory.${name}[${i}]`);\n                    });\n                } else {\n                    throw new InvalidConfiguration(\n                        'Invalid middleware factory config.',\n                        app,\n                        `middlewareFactory.${name}`);\n                }\n\n                return chains.length === 1 ? chains[0] : chains;\n            });\n        });\n    }\n};"],"file":"middlewareFactory.js"}