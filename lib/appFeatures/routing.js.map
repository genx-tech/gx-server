{"version":3,"file":"routing.js","names":["require","Feature","Enums","_","eachAsync_","module","exports","type","PLUGIN","load_","app","routes","on","waitFor","push","routersConfig","route","isPlainObject","options","loader_","log","name","mainRoute","baseRoute","pos","indexOf","substring","Array","isArray","rules"],"sources":["../../src/appFeatures/routing.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Enable web request routing.\n * @module Feature_Routing\n */\n\nconst { Feature } = require(\"..\").Enums;\nconst { _, eachAsync_ } = require(\"@genx/july\");\n\nmodule.exports = {\n    /**\n     * This feature is loaded at ready (final) stage.\n     * @member {string}\n     */\n    type: Feature.PLUGIN,\n\n    /**\n     * Load the feature.\n     * @param {Routable} app - The app module object\n     * @param {object} routes - Routes and configuration\n     * @returns {Promise.<*>}\n     */\n    load_: (app, routes) => {\n        app.on(\"after:\" + Feature.PLUGIN, (waitFor) => {\n            waitFor.push(\n                eachAsync_(routes, async (routersConfig, route) => {\n                    if (_.isPlainObject(routersConfig)) {\n                        return eachAsync_(routersConfig, async (options, type) => {\n                            let loader_ = require(\"../routers/\" + type);\n\n                            app.log(\"verbose\", `A \"${type}\" router is created at \"${route}\" in app [${app.name}].`);\n\n                            return loader_(app, route, options);\n                        });\n                    } else {\n                        // 'route': 'method:/path'\n                        let mainRoute = \"/\",\n                            baseRoute = route;\n                        let pos = route.indexOf(\":/\");\n\n                        if (pos !== -1) {\n                            mainRoute = route.substring(0, pos + 2);\n                            baseRoute = route.substring(pos + 1);\n                        } else if (Array.isArray(routersConfig)) {\n                            //all handled by middleware chains\n                            mainRoute = \"all:/\";\n                        }\n\n                        let rules = {\n                            [mainRoute]: routersConfig,\n                        };\n\n                        let loader_ = require(\"../routers/rule\");\n                        app.log(\"verbose\", `A \"rule\" router is created at \"${baseRoute}\" in app [${app.name}].`);\n\n                        return loader_(app, baseRoute, { rules: rules });\n                    }\n                })\n            );\n        });\n    },\n};\n"],"mappings":"AAAA,YAAY;AAACA,OAAA;AAOb,MAAM;EAAEC;AAAQ,CAAC,GAAGD,OAAO,CAAC,IAAI,CAAC,CAACE,KAAK;AACvC,MAAM;EAAEC,CAAC;EAAEC;AAAW,CAAC,GAAGJ,OAAO,CAAC,YAAY,CAAC;AAE/CK,MAAM,CAACC,OAAO,GAAG;EAKbC,IAAI,EAAEN,OAAO,CAACO,MAAM;EAQpBC,KAAK,EAAEA,CAACC,GAAG,EAAEC,MAAM,KAAK;IACpBD,GAAG,CAACE,EAAE,CAAC,QAAQ,GAAGX,OAAO,CAACO,MAAM,EAAGK,OAAO,IAAK;MAC3CA,OAAO,CAACC,IAAI,CACRV,UAAU,CAACO,MAAM,EAAE,OAAOI,aAAa,EAAEC,KAAK,KAAK;QAC/C,IAAIb,CAAC,CAACc,aAAa,CAACF,aAAa,CAAC,EAAE;UAChC,OAAOX,UAAU,CAACW,aAAa,EAAE,OAAOG,OAAO,EAAEX,IAAI,KAAK;YACtD,IAAIY,OAAO,GAAGnB,OAAO,CAAC,aAAa,GAAGO,IAAI,CAAC;YAE3CG,GAAG,CAACU,GAAG,CAAC,SAAS,EAAG,MAAKb,IAAK,2BAA0BS,KAAM,aAAYN,GAAG,CAACW,IAAK,IAAG,CAAC;YAEvF,OAAOF,OAAO,CAACT,GAAG,EAAEM,KAAK,EAAEE,OAAO,CAAC;UACvC,CAAC,CAAC;QACN,CAAC,MAAM;UAEH,IAAII,SAAS,GAAG,GAAG;YACfC,SAAS,GAAGP,KAAK;UACrB,IAAIQ,GAAG,GAAGR,KAAK,CAACS,OAAO,CAAC,IAAI,CAAC;UAE7B,IAAID,GAAG,KAAK,CAAC,CAAC,EAAE;YACZF,SAAS,GAAGN,KAAK,CAACU,SAAS,CAAC,CAAC,EAAEF,GAAG,GAAG,CAAC,CAAC;YACvCD,SAAS,GAAGP,KAAK,CAACU,SAAS,CAACF,GAAG,GAAG,CAAC,CAAC;UACxC,CAAC,MAAM,IAAIG,KAAK,CAACC,OAAO,CAACb,aAAa,CAAC,EAAE;YAErCO,SAAS,GAAG,OAAO;UACvB;UAEA,IAAIO,KAAK,GAAG;YACR,CAACP,SAAS,GAAGP;UACjB,CAAC;UAED,IAAII,OAAO,GAAGnB,OAAO,CAAC,iBAAiB,CAAC;UACxCU,GAAG,CAACU,GAAG,CAAC,SAAS,EAAG,kCAAiCG,SAAU,aAAYb,GAAG,CAACW,IAAK,IAAG,CAAC;UAExF,OAAOF,OAAO,CAACT,GAAG,EAAEa,SAAS,EAAE;YAAEM,KAAK,EAAEA;UAAM,CAAC,CAAC;QACpD;MACJ,CAAC,CACL,CAAC;IACL,CAAC,CAAC;EACN;AACJ,CAAC"}