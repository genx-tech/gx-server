"use strict";

require("source-map-support/register");

const http = require('http');

const {
  _
} = require('rk-utils');

const statusToError = {
  400: 'invalid_request',
  404: 'resource_not_found'
};
const unknownError = 'unknown_error';

const wrapRequest = ctx => {
  let req = {
    method: ctx.method,
    endpoint: ctx._matchedRoute,
    query: _.toPlainObject(ctx.query)
  };

  if (!_.isEmpty(ctx.params)) {
    req.params = ctx.params;
  }

  return req;
};

exports.wrapQuery = (ctx, actualQuery, result, extra) => {
  let {
    status,
    ...others
  } = extra || {};
  let request = wrapRequest(ctx);

  if (status && status !== 200) {
    ctx.status = status;
    status = 'error';
    others = {
      code: statusToError[ctx.status] || unknownError,
      ...others
    };
  } else {
    status = 'success';
  }

  return {
    status,
    request,
    actualQuery,
    response: result,
    ...others
  };
};

exports.wrapError = (ctx, error) => {
  let request = wrapRequest(ctx);
  let response = {
    message: error.expose ? error.message : http.STATUS_CODES[ctx.status]
  };
  let code = statusToError[ctx.status] || unknownError;
  return {
    status: 'error',
    code,
    request,
    response
  };
};

exports.wrapOperation = (ctx, operation, result, extra) => {
  let {
    status,
    ...others
  } = extra || {};
  let request = wrapRequest(ctx);

  if (status && status !== 200) {
    ctx.status = status;
    status = 'error';
    others = {
      code: statusToError[ctx.status] || unknownError,
      ...others
    };
  } else {
    status = 'success';
  }

  return {
    status,
    request,
    operation,
    response: result,
    ...others
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXR0ZXJucy9yZXN0ZnVsLmpzIl0sIm5hbWVzIjpbImh0dHAiLCJyZXF1aXJlIiwiXyIsInN0YXR1c1RvRXJyb3IiLCJ1bmtub3duRXJyb3IiLCJ3cmFwUmVxdWVzdCIsImN0eCIsInJlcSIsIm1ldGhvZCIsImVuZHBvaW50IiwiX21hdGNoZWRSb3V0ZSIsInF1ZXJ5IiwidG9QbGFpbk9iamVjdCIsImlzRW1wdHkiLCJwYXJhbXMiLCJleHBvcnRzIiwid3JhcFF1ZXJ5IiwiYWN0dWFsUXVlcnkiLCJyZXN1bHQiLCJleHRyYSIsInN0YXR1cyIsIm90aGVycyIsInJlcXVlc3QiLCJjb2RlIiwicmVzcG9uc2UiLCJ3cmFwRXJyb3IiLCJlcnJvciIsIm1lc3NhZ2UiLCJleHBvc2UiLCJTVEFUVVNfQ09ERVMiLCJ3cmFwT3BlcmF0aW9uIiwib3BlcmF0aW9uIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBUUQsT0FBTyxDQUFDLFVBQUQsQ0FBckI7O0FBRUEsTUFBTUUsYUFBYSxHQUFHO0FBQ2xCLE9BQUssaUJBRGE7QUFFbEIsT0FBSztBQUZhLENBQXRCO0FBS0EsTUFBTUMsWUFBWSxHQUFHLGVBQXJCOztBQUVBLE1BQU1DLFdBQVcsR0FBSUMsR0FBRCxJQUFTO0FBQ3pCLE1BQUlDLEdBQUcsR0FBRztBQUNOQyxJQUFBQSxNQUFNLEVBQUVGLEdBQUcsQ0FBQ0UsTUFETjtBQUVOQyxJQUFBQSxRQUFRLEVBQUVILEdBQUcsQ0FBQ0ksYUFGUjtBQUdOQyxJQUFBQSxLQUFLLEVBQUVULENBQUMsQ0FBQ1UsYUFBRixDQUFnQk4sR0FBRyxDQUFDSyxLQUFwQjtBQUhELEdBQVY7O0FBTUEsTUFBSSxDQUFDVCxDQUFDLENBQUNXLE9BQUYsQ0FBVVAsR0FBRyxDQUFDUSxNQUFkLENBQUwsRUFBNEI7QUFDeEJQLElBQUFBLEdBQUcsQ0FBQ08sTUFBSixHQUFhUixHQUFHLENBQUNRLE1BQWpCO0FBQ0g7O0FBRUQsU0FBT1AsR0FBUDtBQUNILENBWkQ7O0FBY0FRLE9BQU8sQ0FBQ0MsU0FBUixHQUFvQixDQUFDVixHQUFELEVBQU1XLFdBQU4sRUFBbUJDLE1BQW5CLEVBQTJCQyxLQUEzQixLQUFxQztBQUNyRCxNQUFJO0FBQUVDLElBQUFBLE1BQUY7QUFBVSxPQUFHQztBQUFiLE1BQXdCRixLQUFLLElBQUksRUFBckM7QUFDQSxNQUFJRyxPQUFPLEdBQUdqQixXQUFXLENBQUNDLEdBQUQsQ0FBekI7O0FBRUEsTUFBSWMsTUFBTSxJQUFJQSxNQUFNLEtBQUssR0FBekIsRUFBOEI7QUFDMUJkLElBQUFBLEdBQUcsQ0FBQ2MsTUFBSixHQUFhQSxNQUFiO0FBRUFBLElBQUFBLE1BQU0sR0FBRyxPQUFUO0FBRUFDLElBQUFBLE1BQU0sR0FBRztBQUNMRSxNQUFBQSxJQUFJLEVBQUVwQixhQUFhLENBQUNHLEdBQUcsQ0FBQ2MsTUFBTCxDQUFiLElBQTZCaEIsWUFEOUI7QUFFTCxTQUFHaUI7QUFGRSxLQUFUO0FBSUgsR0FURCxNQVNPO0FBQ0hELElBQUFBLE1BQU0sR0FBRyxTQUFUO0FBQ0g7O0FBRUQsU0FBTztBQUNIQSxJQUFBQSxNQURHO0FBRUhFLElBQUFBLE9BRkc7QUFHSEwsSUFBQUEsV0FIRztBQUlITyxJQUFBQSxRQUFRLEVBQUVOLE1BSlA7QUFLSCxPQUFHRztBQUxBLEdBQVA7QUFPSCxDQXhCRDs7QUEwQkFOLE9BQU8sQ0FBQ1UsU0FBUixHQUFvQixDQUFDbkIsR0FBRCxFQUFNb0IsS0FBTixLQUFnQjtBQUNoQyxNQUFJSixPQUFPLEdBQUdqQixXQUFXLENBQUNDLEdBQUQsQ0FBekI7QUFFQSxNQUFJa0IsUUFBUSxHQUFHO0FBQ1hHLElBQUFBLE9BQU8sRUFBRUQsS0FBSyxDQUFDRSxNQUFOLEdBQWVGLEtBQUssQ0FBQ0MsT0FBckIsR0FBK0IzQixJQUFJLENBQUM2QixZQUFMLENBQWtCdkIsR0FBRyxDQUFDYyxNQUF0QjtBQUQ3QixHQUFmO0FBSUEsTUFBSUcsSUFBSSxHQUFHcEIsYUFBYSxDQUFDRyxHQUFHLENBQUNjLE1BQUwsQ0FBYixJQUE2QmhCLFlBQXhDO0FBRUEsU0FBTztBQUNIZ0IsSUFBQUEsTUFBTSxFQUFFLE9BREw7QUFFSEcsSUFBQUEsSUFGRztBQUdIRCxJQUFBQSxPQUhHO0FBSUhFLElBQUFBO0FBSkcsR0FBUDtBQU1ILENBZkQ7O0FBaUJBVCxPQUFPLENBQUNlLGFBQVIsR0FBd0IsQ0FBQ3hCLEdBQUQsRUFBTXlCLFNBQU4sRUFBaUJiLE1BQWpCLEVBQXlCQyxLQUF6QixLQUFtQztBQUN2RCxNQUFJO0FBQUVDLElBQUFBLE1BQUY7QUFBVSxPQUFHQztBQUFiLE1BQXdCRixLQUFLLElBQUksRUFBckM7QUFDQSxNQUFJRyxPQUFPLEdBQUdqQixXQUFXLENBQUNDLEdBQUQsQ0FBekI7O0FBRUEsTUFBSWMsTUFBTSxJQUFJQSxNQUFNLEtBQUssR0FBekIsRUFBOEI7QUFDMUJkLElBQUFBLEdBQUcsQ0FBQ2MsTUFBSixHQUFhQSxNQUFiO0FBRUFBLElBQUFBLE1BQU0sR0FBRyxPQUFUO0FBRUFDLElBQUFBLE1BQU0sR0FBRztBQUNMRSxNQUFBQSxJQUFJLEVBQUVwQixhQUFhLENBQUNHLEdBQUcsQ0FBQ2MsTUFBTCxDQUFiLElBQTZCaEIsWUFEOUI7QUFFTCxTQUFHaUI7QUFGRSxLQUFUO0FBS0gsR0FWRCxNQVVPO0FBQ0hELElBQUFBLE1BQU0sR0FBRyxTQUFUO0FBQ0g7O0FBRUQsU0FBTztBQUNIQSxJQUFBQSxNQURHO0FBRUhFLElBQUFBLE9BRkc7QUFHSFMsSUFBQUEsU0FIRztBQUlIUCxJQUFBQSxRQUFRLEVBQUVOLE1BSlA7QUFLSCxPQUFHRztBQUxBLEdBQVA7QUFPSCxDQXpCRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG5jb25zdCB7IF8gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5cbmNvbnN0IHN0YXR1c1RvRXJyb3IgPSB7XG4gICAgNDAwOiAnaW52YWxpZF9yZXF1ZXN0JyxcbiAgICA0MDQ6ICdyZXNvdXJjZV9ub3RfZm91bmQnXG59O1xuXG5jb25zdCB1bmtub3duRXJyb3IgPSAndW5rbm93bl9lcnJvcic7XG5cbmNvbnN0IHdyYXBSZXF1ZXN0ID0gKGN0eCkgPT4geyBcbiAgICBsZXQgcmVxID0ge1xuICAgICAgICBtZXRob2Q6IGN0eC5tZXRob2QsXG4gICAgICAgIGVuZHBvaW50OiBjdHguX21hdGNoZWRSb3V0ZSxcbiAgICAgICAgcXVlcnk6IF8udG9QbGFpbk9iamVjdChjdHgucXVlcnkpXG4gICAgfTtcblxuICAgIGlmICghXy5pc0VtcHR5KGN0eC5wYXJhbXMpKSB7XG4gICAgICAgIHJlcS5wYXJhbXMgPSBjdHgucGFyYW1zXG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcTtcbn07XG5cbmV4cG9ydHMud3JhcFF1ZXJ5ID0gKGN0eCwgYWN0dWFsUXVlcnksIHJlc3VsdCwgZXh0cmEpID0+IHtcbiAgICBsZXQgeyBzdGF0dXMsIC4uLm90aGVycyB9ID0gZXh0cmEgfHwge307XG4gICAgbGV0IHJlcXVlc3QgPSB3cmFwUmVxdWVzdChjdHgpOyAgICBcblxuICAgIGlmIChzdGF0dXMgJiYgc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgY3R4LnN0YXR1cyA9IHN0YXR1cztcblxuICAgICAgICBzdGF0dXMgPSAnZXJyb3InO1xuXG4gICAgICAgIG90aGVycyA9IHtcbiAgICAgICAgICAgIGNvZGU6IHN0YXR1c1RvRXJyb3JbY3R4LnN0YXR1c10gfHwgdW5rbm93bkVycm9yLFxuICAgICAgICAgICAgLi4ub3RoZXJzXG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdHVzID0gJ3N1Y2Nlc3MnO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1cyxcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgYWN0dWFsUXVlcnksXG4gICAgICAgIHJlc3BvbnNlOiByZXN1bHQsICAgICAgICBcbiAgICAgICAgLi4ub3RoZXJzXG4gICAgfTtcbn07XG5cbmV4cG9ydHMud3JhcEVycm9yID0gKGN0eCwgZXJyb3IpID0+IHtcbiAgICBsZXQgcmVxdWVzdCA9IHdyYXBSZXF1ZXN0KGN0eCk7ICAgIFxuXG4gICAgbGV0IHJlc3BvbnNlID0geyBcbiAgICAgICAgbWVzc2FnZTogZXJyb3IuZXhwb3NlID8gZXJyb3IubWVzc2FnZSA6IGh0dHAuU1RBVFVTX0NPREVTW2N0eC5zdGF0dXNdXG4gICAgfTtcblxuICAgIGxldCBjb2RlID0gc3RhdHVzVG9FcnJvcltjdHguc3RhdHVzXSB8fCB1bmtub3duRXJyb3I7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXM6ICdlcnJvcicsXG4gICAgICAgIGNvZGUsXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIHJlc3BvbnNlXG4gICAgfTtcbn07XG5cbmV4cG9ydHMud3JhcE9wZXJhdGlvbiA9IChjdHgsIG9wZXJhdGlvbiwgcmVzdWx0LCBleHRyYSkgPT4ge1xuICAgIGxldCB7IHN0YXR1cywgLi4ub3RoZXJzIH0gPSBleHRyYSB8fCB7fTtcbiAgICBsZXQgcmVxdWVzdCA9IHdyYXBSZXF1ZXN0KGN0eCk7IFxuXG4gICAgaWYgKHN0YXR1cyAmJiBzdGF0dXMgIT09IDIwMCkge1xuICAgICAgICBjdHguc3RhdHVzID0gc3RhdHVzO1xuXG4gICAgICAgIHN0YXR1cyA9ICdlcnJvcic7XG5cbiAgICAgICAgb3RoZXJzID0geyBcbiAgICAgICAgICAgIGNvZGU6IHN0YXR1c1RvRXJyb3JbY3R4LnN0YXR1c10gfHwgdW5rbm93bkVycm9yLFxuICAgICAgICAgICAgLi4ub3RoZXJzXG4gICAgICAgIH07ICAgICAgIFxuICAgICAgICBcbiAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0dXMgPSAnc3VjY2Vzcyc7XG4gICAgfSBcblxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1cyxcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgb3BlcmF0aW9uLFxuICAgICAgICByZXNwb25zZTogcmVzdWx0LCAgICAgICAgXG4gICAgICAgIC4uLm90aGVyc1xuICAgIH07XG59Il19