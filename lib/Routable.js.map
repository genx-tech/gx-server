{"version":3,"file":"Routable.js","names":["require","path","fs","glob","_","url","urlUtil","text","ApplicationError","InvalidConfiguration","Literal","Koa","mount","Routable","T","constructor","name","options","clientPath","toAbsolutePath","CLIENT_SRC_PATH","publicPath","PUBLIC_PATH","routable","router","use","ctx","next","appModule","on","middlewareDir","join","backendPath","MIDDLEWARES_PATH","existsSync","loadMiddlewaresFrom","start_","middlewareFactoryRegistry","stop_","getBackendAction","actionByPath","lpos","lastIndexOf","Error","controller","substr","method","controllerObj","resolve","error","methodFunc","dir","files","sync","nodir","forEach","file","registerMiddlewareFactory","basename","factoryMethod","pre","log","getMiddlewareFactory","hasOwnProperty","server","npmMiddleware","tryRequire","useMiddlewares","middlewares","middlewareFactory","middleware","middlewareFunctions","isPlainObject","forOwn","push","castArray","each","middlewareEntry","type","undefined","Array","isArray","length","m","useMiddleware","addRoute","route","actions","handlers","_wrapMiddlewareTracer","lastIndex","action","i","middlewareItem","assert","endpoint","opts","prefix","addRouter","nestedRouter","routes","allowedMethods","mountRouter","toWebPath","relativePath","pathOrQuery","query","isObject","pop","unshift","ensureStartsWith","appendQuery","replace","traceMiddlewares","ret","_getFeatureFallbackPath","concat","FEATURES_PATH","module","exports"],"sources":["../src/Routable.js"],"sourcesContent":["\"use strict\";\n\nconst path = require(\"path\");\nconst { fs, glob } = require(\"@genx/sys\");\nconst { _, url: urlUtil, text } = require(\"@genx/july\");\nconst { ApplicationError, InvalidConfiguration } = require(\"@genx/error\");\nconst Literal = require(\"./enum/Literal\");\nconst Koa = require(\"koa\");\nconst mount = require(\"koa-mount\");\n\nconst Routable = (T) =>\n    class extends T {\n        /**\n         * @param {string} name - The name of the routable instance.\n         * @param {object} [options] - Routable options\n         * @property {string} [options.backendPath='server'] - Relative path of back-end server source files\n         * @property {string} [options.clientPath='client'] - Relative path of front-end client source files\n         * @property {string} [options.publicPath='public'] - Relative path of front-end static files\n         */\n        constructor(name, options) {\n            super(name, options);\n\n            /**\n             * Frontend source files path.\n             * @member {string}\n             **/\n            this.clientPath = this.toAbsolutePath(this.options.clientPath || Literal.CLIENT_SRC_PATH);\n\n            /**\n             * Frontend static files path.\n             * @member {string}\n             **/\n            this.publicPath = this.toAbsolutePath(this.options.publicPath || Literal.PUBLIC_PATH);\n\n            this.routable = true;\n\n            /**\n             * Each app has its own router.\n             * @member {Koa}\n             **/\n            this.router = new Koa();\n\n            //inject the appModule instance in the first middleware\n            this.router.use((ctx, next) => {\n                ctx.appModule = this;\n                return next();\n            });\n\n            this.on(\"configLoaded\", () => {\n                //load middlewares if exists in server or app path\n                let middlewareDir = path.join(this.backendPath, Literal.MIDDLEWARES_PATH);\n\n                if (fs.existsSync(middlewareDir)) {\n                    this.loadMiddlewaresFrom(middlewareDir);\n                }\n            });\n        }\n\n        async start_() {\n            /**\n             * Middleware factory registry.\n             * @member {object}\n             */\n            this.middlewareFactoryRegistry = {};\n\n            return super.start_();\n        }\n\n        async stop_() {\n            delete this.middlewareFactoryRegistry;\n\n            return super.stop_();\n        }\n\n        getBackendAction(actionByPath) {\n            let lpos = actionByPath.lastIndexOf(\".\");\n\n            if (lpos === -1) {\n                throw new Error(`Invalid action path: ${actionByPath}`);\n            }\n\n            let controller = actionByPath.substr(0, lpos);\n            let method = actionByPath.substr(lpos + 1);\n            let controllerObj;\n\n            try {\n                controllerObj = require(path.resolve(this.backendPath, controller));\n            } catch (error) {\n                throw new Error(`Backend controller not found: ${controller}`);\n            }\n\n            let methodFunc = controllerObj[method];\n            if (typeof methodFunc !== \"function\") {\n                throw new Error(`The specified action is not a function: ${actionByPath}`);\n            }\n\n            return methodFunc;\n        }\n\n        /**\n         * Load and regsiter middleware files from a specified path.\n         * @param dir\n         */\n        loadMiddlewaresFrom(dir) {\n            let files = glob.sync(path.join(dir, \"*.js\"), { nodir: true });\n            files.forEach((file) => this.registerMiddlewareFactory(path.basename(file, \".js\"), require(file)));\n        }\n\n        /**\n         * Register the factory method of a named middleware.\n         * @param {string} name - The name of the middleware\n         * @param {function} factoryMethod - The factory method of a middleware\n         */\n        registerMiddlewareFactory(name, factoryMethod) {\n            pre: typeof factoryMethod === \"function\", \"Invalid middleware factory: \" + name;\n\n            if (name in this.middlewareFactoryRegistry) {\n                throw new ApplicationError('Middleware \"' + name + '\" already registered!');\n            }\n\n            this.middlewareFactoryRegistry[name] = factoryMethod;\n            this.log(\"verbose\", `Registered named middleware [${name}].`);\n        }\n\n        /**\n         * Get the factory method of a middleware from module hierarchy.\n         * @param name\n         * @returns {function}\n         */\n        getMiddlewareFactory(name) {\n            if (this.middlewareFactoryRegistry.hasOwnProperty(name)) {\n                return this.middlewareFactoryRegistry[name];\n            }\n\n            if (this.server && this.server !== this) {\n                return this.server.getMiddlewareFactory(name);\n            }\n\n            let npmMiddleware = this.tryRequire(name);\n            if (npmMiddleware) {\n                return npmMiddleware;\n            }\n\n            throw new ApplicationError(`Don't know where to load middleware \"${name}\".`);\n        }\n\n        /**\n         * Use middlewares\n         * @param {Router} router\n         * @param {*} middlewares - Can be an array of middleware entries or a key-value list of registerred middlewares\n         * @returns {Routable}\n         */\n        useMiddlewares(router, middlewares) {\n            let middlewareFactory, middleware;\n            let middlewareFunctions = [];\n\n            if (_.isPlainObject(middlewares)) {\n                _.forOwn(middlewares, (options, name) => {\n                    middlewareFactory = this.getMiddlewareFactory(name);\n                    middleware = middlewareFactory(options, this);\n                    middlewareFunctions.push({ name, middleware });\n                });\n            } else {\n                middlewares = _.castArray(middlewares);\n\n                _.each(middlewares, (middlewareEntry) => {\n                    let type = typeof middlewareEntry;\n\n                    if (type === \"string\") {\n                        // [ 'namedMiddleware' ]\n                        middlewareFactory = this.getMiddlewareFactory(middlewareEntry);\n                        middleware = middlewareFactory(undefined, this);\n                        middlewareFunctions.push({ name: middlewareEntry, middleware });\n                    } else if (type === \"function\") {\n                        middlewareFunctions.push({\n                            name: middlewareEntry.name || \"unamed middleware\",\n                            middleware: middlewareEntry,\n                        });\n                    } else if (Array.isArray(middlewareEntry)) {\n                        // [ [ 'namedMiddleware', config ] ]\n                        if (middlewareEntry.length === 0) {\n                            throw new InvalidConfiguration(\n                                \"Empty array found as middleware entry!\",\n                                this,\n                                \"middlewares\"\n                            );\n                        }\n\n                        middlewareFactory = this.getMiddlewareFactory(middlewareEntry[0]);\n                        middleware = middlewareFactory(middlewareEntry.length > 1 ? middlewareEntry[1] : null, this);\n                        middlewareFunctions.push({ name: middlewareEntry[0], middleware });\n                    } else {\n                        if (!_.isPlainObject(middlewareEntry) || !(\"name\" in middlewareEntry)) {\n                            throw new InvalidConfiguration(\"Invalid middleware entry!\", this, \"middlewares\");\n                        }\n\n                        middlewareFactory = this.getMiddlewareFactory(middlewareEntry.name);\n                        middleware = middlewareFactory(middlewareEntry.options, this);\n                        middlewareFunctions.push({ name: middlewareEntry.name, middleware });\n                    }\n                });\n            }\n\n            middlewareFunctions.forEach(({ name, middleware }) => {\n                if (Array.isArray(middleware)) {\n                    middleware.forEach((m) => this.useMiddleware(router, m, name));\n                } else {\n                    this.useMiddleware(router, middleware, name);\n                }\n            });\n\n            return this;\n        }\n\n        /**\n         * Add a route to a router, skipped while the server running in deaf mode.\n         * @param router\n         * @param method\n         * @param route\n         * @param actions\n         */\n        addRoute(router, method, route, actions) {\n            let handlers = [],\n                middlewareFactory;\n\n            if (_.isPlainObject(actions)) {\n                _.forOwn(actions, (options, name) => {\n                    middlewareFactory = this.getMiddlewareFactory(name);\n                    handlers.push(this._wrapMiddlewareTracer(middlewareFactory(options, this), name));\n                });\n            } else {\n                actions = _.castArray(actions);\n                let lastIndex = actions.length - 1;\n\n                _.each(actions, (action, i) => {\n                    let type = typeof action;\n\n                    if (i === lastIndex) {\n                        // last middleware may be an action\n                        if (type === \"string\" && action.lastIndexOf(\".\") > 0) {\n                            action = {\n                                name: \"action\",\n                                options: action,\n                            };\n\n                            type = \"object\";\n                        }\n                    }\n\n                    if (type === \"string\") {\n                        // [ 'namedMiddleware' ]\n                        middlewareFactory = this.getMiddlewareFactory(action);\n\n                        let middleware = middlewareFactory(null, this);\n\n                        //in case it's register by the middlewareFactory feature\n                        if (Array.isArray(middleware)) {\n                            middleware.forEach((middlewareItem, i) =>\n                                handlers.push(\n                                    this._wrapMiddlewareTracer(\n                                        middlewareItem,\n                                        `${action}-${i}` + (middleware.name ? \"-\" + middleware.name : \"\")\n                                    )\n                                )\n                            );\n                        } else {\n                            handlers.push(this._wrapMiddlewareTracer(middleware, action));\n                        }\n                    } else if (type === \"function\") {\n                        handlers.push(this._wrapMiddlewareTracer(action));\n                    } else if (Array.isArray(action)) {\n                        assert: action.length > 0 && action.length <= 2, \"Invalid middleware entry\";\n\n                        middlewareFactory = this.getMiddlewareFactory(action[0]);\n                        handlers.push(\n                            this._wrapMiddlewareTracer(\n                                middlewareFactory(action.length > 1 ? action[1] : undefined, this)\n                            )\n                        );\n                    } else {\n                        assert: _.isPlainObject(action) && \"name\" in action, \"Invalid middleware entry\";\n\n                        middlewareFactory = this.getMiddlewareFactory(action.name);\n                        handlers.push(this._wrapMiddlewareTracer(middlewareFactory(action.options, this), action.name));\n                    }\n                });\n            }\n\n            router[method](route, ...handlers);\n\n            let endpoint = router.opts.prefix\n                ? urlUtil.join(this.route, router.opts.prefix, route)\n                : urlUtil.join(this.route, route);\n\n            this.log(\"verbose\", `Route \"${method}:${endpoint}\" is added from module [${this.name}].`);\n\n            return this;\n        }\n\n        /**\n         * Attach a router to this app module, skipped while the server running in deaf mode\n         * @param {Router} nestedRouter\n         */\n        addRouter(nestedRouter) {\n            this.router.use(nestedRouter.routes());\n            this.router.use(nestedRouter.allowedMethods());\n\n            //for debugging all registered routes\n            //console.log(nestedRouter.stack.map(i => i.path));\n            return this;\n        }\n\n        /**\n         * Attach a router to this app module by mounting the router to a route\n         * @param {*} route\n         * @param {*} router\n         */\n        mountRouter(route, router) {\n            this.router.use(mount(route, router));\n        }\n\n        /**\n         * Translate a relative path and query parameters if any to a url path\n         * @param {string} relativePath - Relative path\n         * @param {...*} [pathOrQuery] - Queries\n         * @returns {string}\n         */\n        toWebPath(relativePath, ...pathOrQuery) {\n            let url, query;\n\n            if (pathOrQuery && pathOrQuery.length > 0 && (pathOrQuery.length > 1 || pathOrQuery[0] !== undefined)) {\n                if (_.isObject(pathOrQuery[pathOrQuery.length - 1])) {\n                    query = pathOrQuery.pop();\n                }\n                pathOrQuery.unshift(relativePath);\n                url = urlUtil.join(this.route, ...pathOrQuery);\n            } else {\n                url = urlUtil.join(this.route, relativePath);\n            }\n\n            url = text.ensureStartsWith(url, \"/\");\n\n            if (query) {\n                url = urlUtil.appendQuery(url, query);\n                url = url.replace(\"/?\", \"?\");\n            }\n\n            return url;\n        }\n\n        useMiddleware(router, middleware, name) {\n            assert: typeof middleware === \"function\", middleware;\n            router.use(this._wrapMiddlewareTracer(middleware, name));\n            this.log(\"verbose\", `Attached middleware [${name}].`);\n        }\n\n        _wrapMiddlewareTracer(middleware, name) {\n            if (this.options.traceMiddlewares) {\n                return async (ctx, next) => {\n                    this.log(\"debug\", `Step in middleware \"${name || middleware.name}\" ...`);\n                    let ret = await middleware(ctx, next);\n                    this.log(\"debug\", `Step out from middleware \"${name || middleware.name}\".`);\n                    return ret;\n                };\n            }\n\n            return middleware;\n        }\n\n        _getFeatureFallbackPath() {\n            return super._getFeatureFallbackPath().concat([path.join(this.backendPath, Literal.FEATURES_PATH)]);\n        }\n    };\n\nmodule.exports = Routable;\n"],"mappings":"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"}