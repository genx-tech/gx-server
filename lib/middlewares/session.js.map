{"version":3,"file":"session.js","names":["require","InvalidConfiguration","DEFAULT_OPTS","key","prefix","module","exports","options","app","session","tryRequire","store","type","storeObject","opt","dataSource","dsService","getService","Object","assign","url","connectionString","MongoStore","MemoryStore","sessionOptions","server","koa"],"sources":["../../src/middlewares/session.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Session middleware\n * @module Middleware_Session\n */\n\nconst { InvalidConfiguration } = require('@genx/error');\n\nconst DEFAULT_OPTS = {\n    key: 'gx-server.sid',\n    prefix: 'gx-server:sess:'\n};\n\n/**\n * Initialize session middleware\n * @param {object} options - Session options \n * @property {string} [options.key='mowa:sid'] - Cookie name defaulting to mowa.sid \n * @property {string} [options.prefix='mowa:sess:'] - Session prefix for store, defaulting to mowa:sess:\n * @property {number} [options.maxAge] - SessionStore's expiration time (ms), defaulting to 86400000 (1 day)\n * @property {bool} [options.autoCommit=true] - Automatically commit headers (default true)\n * @property {bool} [options.overwrite=true] - Can overwrite or not (default true) \n * @property {bool} [options.httpOnly=true] - HttpOnly or not (default true)\n * @property {bool} [options.signed=true] - Signed or not\n * @property {bool} [options.rolling=false] - Force a session identifier cookie to be set on every response. The expiration is reset to the original maxAge, resetting the expiration countdown. (default is false) \n * @property {bool} [options.renew=false] - Renew session when session is nearly expired, so we can always keep user logged in. (default is false)\n * @property {function} [options.genSid] - The way of generating external session id is controlled by the options.genid, which defaults to Date.now() + '-' + uid.sync(24)\n * @property {function} [options.valid] - valid(ctx, session), valid session value before use it\n * @property {function} [options.beforeSave] - beforeSave(ctx, session), hook before save session\n * @property {object} [options.store] - Session store instance. It can be any Object that has the methods set, get, destroy like MemoryStore.\n * @param {Routable} app \n */\nmodule.exports = (options, app) => {\n    const session = app.tryRequire('koa-session');\n\n    let store = options.store || { type: 'memory' };\n\n    if (!store.type) {\n        throw new InvalidConfiguration(\n            'Missing session store type.',\n            app,\n            'middlewares.session.store'\n        );        \n    }\n\n    let storeObject;\n\n    let opt = store.options || {};\n\n    if (store.dataSource) {\n        let dsService = app.getService(store.dataSource);\n        Object.assign(opt, { url: dsService.connectionString });\n    }\n\n    switch (store.type) {\n        case 'redis':\n            storeObject = app.tryRequire('koa-redis')(opt);\n            break;\n        case 'mysql':\n            storeObject = app.tryRequire('koa-mysql-session')(opt);\n            break;\n        case 'mongodb':\n            const MongoStore = app.tryRequire('koa-generic-session-mongo');\n            storeObject = new MongoStore(opt);\n            break;\n        case 'pgsql':\n            storeObject = app.tryRequire('koa-pg-session')(opt);\n            break;\n        case 'sqlite3':\n            storeObject = app.tryRequire('koa-sqlite3-session')(opt);\n            break;\n        case 'memory':\n            const MemoryStore = app.tryRequire('koa-session-memory');\n            storeObject = new MemoryStore();\n            break;\n        default:\n            throw new InvalidConfiguration(\n                'Unsupported session store type: ' + store.type,\n                app,\n                'middlewares.session.store.type'\n            );\n    }\n\n    let sessionOptions = Object.assign({}, DEFAULT_OPTS, options, {store: storeObject});\n\n    return session(sessionOptions, app.server.koa);\n};"],"mappings":"AAAA,YAAY;AAACA,OAAA;AAOb,MAAM;EAAEC;AAAqB,CAAC,GAAGD,OAAO,CAAC,aAAa,CAAC;AAEvD,MAAME,YAAY,GAAG;EACjBC,GAAG,EAAE,eAAe;EACpBC,MAAM,EAAE;AACZ,CAAC;AAoBDC,MAAM,CAACC,OAAO,GAAG,CAACC,OAAO,EAAEC,GAAG,KAAK;EAC/B,MAAMC,OAAO,GAAGD,GAAG,CAACE,UAAU,CAAC,aAAa,CAAC;EAE7C,IAAIC,KAAK,GAAGJ,OAAO,CAACI,KAAK,IAAI;IAAEC,IAAI,EAAE;EAAS,CAAC;EAE/C,IAAI,CAACD,KAAK,CAACC,IAAI,EAAE;IACb,MAAM,IAAIX,oBAAoB,CAC1B,6BAA6B,EAC7BO,GAAG,EACH,2BACJ,CAAC;EACL;EAEA,IAAIK,WAAW;EAEf,IAAIC,GAAG,GAAGH,KAAK,CAACJ,OAAO,IAAI,CAAC,CAAC;EAE7B,IAAII,KAAK,CAACI,UAAU,EAAE;IAClB,IAAIC,SAAS,GAAGR,GAAG,CAACS,UAAU,CAACN,KAAK,CAACI,UAAU,CAAC;IAChDG,MAAM,CAACC,MAAM,CAACL,GAAG,EAAE;MAAEM,GAAG,EAAEJ,SAAS,CAACK;IAAiB,CAAC,CAAC;EAC3D;EAEA,QAAQV,KAAK,CAACC,IAAI;IACd,KAAK,OAAO;MACRC,WAAW,GAAGL,GAAG,CAACE,UAAU,CAAC,WAAW,CAAC,CAACI,GAAG,CAAC;MAC9C;IACJ,KAAK,OAAO;MACRD,WAAW,GAAGL,GAAG,CAACE,UAAU,CAAC,mBAAmB,CAAC,CAACI,GAAG,CAAC;MACtD;IACJ,KAAK,SAAS;MACV,MAAMQ,UAAU,GAAGd,GAAG,CAACE,UAAU,CAAC,2BAA2B,CAAC;MAC9DG,WAAW,GAAG,IAAIS,UAAU,CAACR,GAAG,CAAC;MACjC;IACJ,KAAK,OAAO;MACRD,WAAW,GAAGL,GAAG,CAACE,UAAU,CAAC,gBAAgB,CAAC,CAACI,GAAG,CAAC;MACnD;IACJ,KAAK,SAAS;MACVD,WAAW,GAAGL,GAAG,CAACE,UAAU,CAAC,qBAAqB,CAAC,CAACI,GAAG,CAAC;MACxD;IACJ,KAAK,QAAQ;MACT,MAAMS,WAAW,GAAGf,GAAG,CAACE,UAAU,CAAC,oBAAoB,CAAC;MACxDG,WAAW,GAAG,IAAIU,WAAW,CAAC,CAAC;MAC/B;IACJ;MACI,MAAM,IAAItB,oBAAoB,CAC1B,kCAAkC,GAAGU,KAAK,CAACC,IAAI,EAC/CJ,GAAG,EACH,gCACJ,CAAC;EACT;EAEA,IAAIgB,cAAc,GAAGN,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEjB,YAAY,EAAEK,OAAO,EAAE;IAACI,KAAK,EAAEE;EAAW,CAAC,CAAC;EAEnF,OAAOJ,OAAO,CAACe,cAAc,EAAEhB,GAAG,CAACiB,MAAM,CAACC,GAAG,CAAC;AAClD,CAAC"}