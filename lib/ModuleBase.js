"use strict";

require("source-map-support/register");

const path = require('path');

const Literal = require('./enum/Literal');

const {
  defaultBackendPath
} = require('./utils/Helpers');

const ModuleBase = Base => class extends Base {
  constructor(server, name, appPath, options) {
    super(name, Object.assign({
      workingPath: appPath,
      configPath: path.join(appPath, Literal.DEFAULT_CONFIG_PATH)
    }, options));
    this.server = server;
    this.isServer = false;
    this.backendPath = this.toAbsolutePath(this.options.backendPath || defaultBackendPath);
  }

  getService(name, currentModuleOnly) {
    return super.getService(name) || !currentModuleOnly && this.server.getService(name);
  }

  require(relativePath) {
    let modPath = path.join(this.backendPath, relativePath);
    return require(modPath);
  }

  requireFromLib(appName, relativePath) {
    return this.server.requireFromLib(appName, relativePath);
  }

  log(level, message, ...rest) {
    if (this.options.logWithAppName) {
      message = '[' + this.name + '] ' + message;
    }

    this.server.log(level, message, ...rest);
    return this;
  }

  _getFeatureFallbackPath() {
    let pathArray = super._getFeatureFallbackPath();

    pathArray.splice(1, 0, path.resolve(__dirname, Literal.FEATURES_PATH));
    return pathArray;
  }

};

module.exports = ModuleBase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Nb2R1bGVCYXNlLmpzIl0sIm5hbWVzIjpbInBhdGgiLCJyZXF1aXJlIiwiTGl0ZXJhbCIsImRlZmF1bHRCYWNrZW5kUGF0aCIsIk1vZHVsZUJhc2UiLCJCYXNlIiwiY29uc3RydWN0b3IiLCJzZXJ2ZXIiLCJuYW1lIiwiYXBwUGF0aCIsIm9wdGlvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJ3b3JraW5nUGF0aCIsImNvbmZpZ1BhdGgiLCJqb2luIiwiREVGQVVMVF9DT05GSUdfUEFUSCIsImlzU2VydmVyIiwiYmFja2VuZFBhdGgiLCJ0b0Fic29sdXRlUGF0aCIsImdldFNlcnZpY2UiLCJjdXJyZW50TW9kdWxlT25seSIsInJlbGF0aXZlUGF0aCIsIm1vZFBhdGgiLCJyZXF1aXJlRnJvbUxpYiIsImFwcE5hbWUiLCJsb2ciLCJsZXZlbCIsIm1lc3NhZ2UiLCJyZXN0IiwibG9nV2l0aEFwcE5hbWUiLCJfZ2V0RmVhdHVyZUZhbGxiYWNrUGF0aCIsInBhdGhBcnJheSIsInNwbGljZSIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJGRUFUVVJFU19QQVRIIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU1DLE9BQU8sR0FBR0QsT0FBTyxDQUFDLGdCQUFELENBQXZCOztBQUNBLE1BQU07QUFBRUUsRUFBQUE7QUFBRixJQUF5QkYsT0FBTyxDQUFDLGlCQUFELENBQXRDOztBQUVBLE1BQU1HLFVBQVUsR0FBR0MsSUFBSSxJQUFJLGNBQWNBLElBQWQsQ0FBbUI7QUFTMUNDLEVBQUFBLFdBQVcsQ0FBQ0MsTUFBRCxFQUFTQyxJQUFULEVBQWVDLE9BQWYsRUFBd0JDLE9BQXhCLEVBQWlDO0FBQ3hDLFVBQU1GLElBQU4sRUFBWUcsTUFBTSxDQUFDQyxNQUFQLENBQWM7QUFDdEJDLE1BQUFBLFdBQVcsRUFBRUosT0FEUztBQUV0QkssTUFBQUEsVUFBVSxFQUFFZCxJQUFJLENBQUNlLElBQUwsQ0FBVU4sT0FBVixFQUFtQlAsT0FBTyxDQUFDYyxtQkFBM0I7QUFGVSxLQUFkLEVBR1ROLE9BSFMsQ0FBWjtBQVNBLFNBQUtILE1BQUwsR0FBY0EsTUFBZDtBQU1BLFNBQUtVLFFBQUwsR0FBZ0IsS0FBaEI7QUFNQSxTQUFLQyxXQUFMLEdBQW1CLEtBQUtDLGNBQUwsQ0FBb0IsS0FBS1QsT0FBTCxDQUFhUSxXQUFiLElBQTRCZixrQkFBaEQsQ0FBbkI7QUFDSDs7QUFPRGlCLEVBQUFBLFVBQVUsQ0FBQ1osSUFBRCxFQUFPYSxpQkFBUCxFQUEwQjtBQUNoQyxXQUFPLE1BQU1ELFVBQU4sQ0FBaUJaLElBQWpCLEtBQTJCLENBQUNhLGlCQUFELElBQXNCLEtBQUtkLE1BQUwsQ0FBWWEsVUFBWixDQUF1QlosSUFBdkIsQ0FBeEQ7QUFDSDs7QUFNRFAsRUFBQUEsT0FBTyxDQUFDcUIsWUFBRCxFQUFlO0FBQ2xCLFFBQUlDLE9BQU8sR0FBR3ZCLElBQUksQ0FBQ2UsSUFBTCxDQUFVLEtBQUtHLFdBQWYsRUFBNEJJLFlBQTVCLENBQWQ7QUFDQSxXQUFPckIsT0FBTyxDQUFDc0IsT0FBRCxDQUFkO0FBQ0g7O0FBTURDLEVBQUFBLGNBQWMsQ0FBQ0MsT0FBRCxFQUFVSCxZQUFWLEVBQXdCO0FBQ2xDLFdBQU8sS0FBS2YsTUFBTCxDQUFZaUIsY0FBWixDQUEyQkMsT0FBM0IsRUFBb0NILFlBQXBDLENBQVA7QUFDSDs7QUFTREksRUFBQUEsR0FBRyxDQUFDQyxLQUFELEVBQVFDLE9BQVIsRUFBaUIsR0FBR0MsSUFBcEIsRUFBMEI7QUFDekIsUUFBSSxLQUFLbkIsT0FBTCxDQUFhb0IsY0FBakIsRUFBaUM7QUFDN0JGLE1BQUFBLE9BQU8sR0FBRyxNQUFNLEtBQUtwQixJQUFYLEdBQWtCLElBQWxCLEdBQXlCb0IsT0FBbkM7QUFDSDs7QUFDRCxTQUFLckIsTUFBTCxDQUFZbUIsR0FBWixDQUFnQkMsS0FBaEIsRUFBdUJDLE9BQXZCLEVBQWdDLEdBQUdDLElBQW5DO0FBQ0EsV0FBTyxJQUFQO0FBQ0g7O0FBRURFLEVBQUFBLHVCQUF1QixHQUFHO0FBQ3RCLFFBQUlDLFNBQVMsR0FBRyxNQUFNRCx1QkFBTixFQUFoQjs7QUFDQUMsSUFBQUEsU0FBUyxDQUFDQyxNQUFWLENBQWlCLENBQWpCLEVBQW9CLENBQXBCLEVBQXVCakMsSUFBSSxDQUFDa0MsT0FBTCxDQUFhQyxTQUFiLEVBQXdCakMsT0FBTyxDQUFDa0MsYUFBaEMsQ0FBdkI7QUFDQSxXQUFPSixTQUFQO0FBQ0g7O0FBL0V5QyxDQUE5Qzs7QUFrRkFLLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmxDLFVBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBMaXRlcmFsID0gcmVxdWlyZSgnLi9lbnVtL0xpdGVyYWwnKTtcbmNvbnN0IHsgZGVmYXVsdEJhY2tlbmRQYXRoIH0gPSByZXF1aXJlKCcuL3V0aWxzL0hlbHBlcnMnKTtcblxuY29uc3QgTW9kdWxlQmFzZSA9IEJhc2UgPT4gY2xhc3MgZXh0ZW5kcyBCYXNlIHtcbiAgICAvKiogICAgIFxuICAgICAqIEBwYXJhbSB7V2ViU2VydmVyfSBzZXJ2ZXJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBhcHAgbW9kdWxlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSByb3V0ZSAtIFRoZSBiYXNlIHJvdXRlIG9mIHRoZSBhcHAgbW9kdWxlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhcHBQYXRoIC0gVGhlIHBhdGggdG8gbG9hZCB0aGUgYXBwJ3MgbW9kdWxlIGZpbGVzXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSAtIFRoZSBhcHAgbW9kdWxlJ3MgZXh0cmEgb3B0aW9ucyBkZWZpbmVkIGluIGl0cyBwYXJlbnQncyBjb25maWd1cmF0aW9uLiAgICAgICAgICBcbiAgICAgKiBAcHJvcGVydHkge2Jvb2x9IFtvcHRpb25zLmxvZ1dpdGhBcHBOYW1lPWZhbHNlXSAtIEZsYWcgdG8gaW5jbHVkZSBhcHAgbmFtZSBpbiBsb2cgbWVzc2FnZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihzZXJ2ZXIsIG5hbWUsIGFwcFBhdGgsIG9wdGlvbnMpIHsgICAgXG4gICAgICAgIHN1cGVyKG5hbWUsIE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgd29ya2luZ1BhdGg6IGFwcFBhdGgsIFxuICAgICAgICAgICAgY29uZmlnUGF0aDogcGF0aC5qb2luKGFwcFBhdGgsIExpdGVyYWwuREVGQVVMVF9DT05GSUdfUEFUSClcbiAgICAgICAgfSwgb3B0aW9ucykpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIb3N0aW5nIHNlcnZlci5cbiAgICAgICAgICogQG1lbWJlciB7V2ViU2VydmVyfVxuICAgICAgICAgKiovXG4gICAgICAgIHRoaXMuc2VydmVyID0gc2VydmVyOyAgICAgICAgXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZXRoZXIgaXQgaXMgYSBzZXJ2ZXIuXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqKi9cbiAgICAgICAgdGhpcy5pc1NlcnZlciA9IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCYWNrZW5kIGZpbGVzIHBhdGguXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gICAgICAgICBcbiAgICAgICAgICoqL1xuICAgICAgICB0aGlzLmJhY2tlbmRQYXRoID0gdGhpcy50b0Fic29sdXRlUGF0aCh0aGlzLm9wdGlvbnMuYmFja2VuZFBhdGggfHwgZGVmYXVsdEJhY2tlbmRQYXRoKTsgXG4gICAgfSAgXG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBzZXJ2aWNlIGZyb20gbW9kdWxlIGhpZXJhcmNoeSAgICAgXG4gICAgICogQHBhcmFtIG5hbWVcbiAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxuICAgICAqL1xuICAgIGdldFNlcnZpY2UobmFtZSwgY3VycmVudE1vZHVsZU9ubHkpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldFNlcnZpY2UobmFtZSkgfHwgKCFjdXJyZW50TW9kdWxlT25seSAmJiB0aGlzLnNlcnZlci5nZXRTZXJ2aWNlKG5hbWUpKTtcbiAgICB9ICAgIFxuXG4gICAgLyoqXG4gICAgICogUmVxdWlyZSBhIGpzIG1vZHVsZSBmcm9tIGJhY2tlbmQgcGF0aFxuICAgICAqIEBwYXJhbSB7Kn0gcmVsYXRpdmVQYXRoIFxuICAgICAqL1xuICAgIHJlcXVpcmUocmVsYXRpdmVQYXRoKSB7XG4gICAgICAgIGxldCBtb2RQYXRoID0gcGF0aC5qb2luKHRoaXMuYmFja2VuZFBhdGgsIHJlbGF0aXZlUGF0aCk7XG4gICAgICAgIHJldHVybiByZXF1aXJlKG1vZFBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcXVpcmUgYSBtb2R1bGUgZnJvbSB0aGUgc291cmNlIHBhdGggb2YgYSBsaWJyYXJ5IG1vZHVsZVxuICAgICAqIEBwYXJhbSB7Kn0gcmVsYXRpdmVQYXRoIFxuICAgICAqL1xuICAgIHJlcXVpcmVGcm9tTGliKGFwcE5hbWUsIHJlbGF0aXZlUGF0aCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXJ2ZXIucmVxdWlyZUZyb21MaWIoYXBwTmFtZSwgcmVsYXRpdmVQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IGxvZyBtZXRob2QsIG1heSBiZSBvdmVycmlkZSBieSBsb2dnZXJzIGZlYXR1cmVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGV2ZWwgLSBMb2cgbGV2ZWxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAtIExvZyBtZXNzYWdlXG4gICAgICogQHBhcmFtIHsuLi5vYmplY3R9IHJlc3QgLSBFeHRyYSBtZXRhIGRhdGFcbiAgICAgKiBAcmV0dXJucyB7Um91dGFibGV9XG4gICAgICovXG4gICAgbG9nKGxldmVsLCBtZXNzYWdlLCAuLi5yZXN0KSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubG9nV2l0aEFwcE5hbWUpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSAnWycgKyB0aGlzLm5hbWUgKyAnXSAnICsgbWVzc2FnZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlcnZlci5sb2cobGV2ZWwsIG1lc3NhZ2UsIC4uLnJlc3QpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBfZ2V0RmVhdHVyZUZhbGxiYWNrUGF0aCgpIHtcbiAgICAgICAgbGV0IHBhdGhBcnJheSA9IHN1cGVyLl9nZXRGZWF0dXJlRmFsbGJhY2tQYXRoKCk7XG4gICAgICAgIHBhdGhBcnJheS5zcGxpY2UoMSwgMCwgcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgTGl0ZXJhbC5GRUFUVVJFU19QQVRIKSk7XG4gICAgICAgIHJldHVybiBwYXRoQXJyYXk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1vZHVsZUJhc2U7Il19