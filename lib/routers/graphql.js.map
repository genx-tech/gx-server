{"version":3,"file":"graphql.js","names":["path","require","InvalidConfiguration","Koa","mount","module","exports","app","baseRoute","options","graphqlHTTP","tryRequire","middlewares","schemaProvider","graphqlOpts","schemaFactory","resolve","backendPath","schemaObj","schema","rootValue","router","useMiddlewares","use","mountRouter"],"sources":["../../src/routers/graphql.js"],"sourcesContent":["\"use strict\";\n\nconst path = require('path');\nconst { InvalidConfiguration } = require('@genx/error');\nconst Koa = require('koa');\nconst mount = require('koa-mount');\n\n/**\n * GraphQL router.\n * @module Router_GraphQL\n */\n\n/**\n * Create a GraphQL router.\n * @param {*} app \n * @param {string} baseRoute \n * @param {objects} options \n * @property {string} options.schema\n * @property {object|array} [options.middlewares]\n * @property {boolean} [options.graphiql]\n * @example\n *  '<base path>': {\n *      graphql: {          \n *          middlewares: {},\n *          schema: 'graphql/schema',\n *          rootValue: '',\n *          graphiql: true\n *      }\n *  }\n */\nmodule.exports = async (app, baseRoute, options) => {\n    const graphqlHTTP = app.tryRequire('koa-graphql');        \n\n    const { middlewares, schemaProvider, ...graphqlOpts } = options;\n\n    if (!schemaProvider) {\n        throw new InvalidConfiguration(\n            'Missing schemaProvider config.',\n            app,\n            `routing.${baseRoute}.graphql.schemaProvider`\n        );\n    }\n\n    const schemaFactory = require(path.resolve(app.backendPath, schemaProvider));\n    const schemaObj = await schemaFactory(app);\n\n    if (!schemaObj.schema) {\n        throw new InvalidConfiguration(\n            'The object returned from schemaProvider doesnot contain the schema body.',\n            app,\n            `routing.${baseRoute}.graphql.schemaProvider`\n        );\n    }\n \n    graphqlOpts.schema = schemaObj.schema;\n    if (schemaObj.rootValue) {\n        graphqlOpts.rootValue = schemaObj.rootValue;\n    }\n    \n    let router = new Koa();\n\n    if (middlewares) {\n        app.useMiddlewares(router, middlewares);\n    }\n\n    router.use(mount('/', graphqlHTTP(graphqlOpts)));\n    app.mountRouter(baseRoute, router);\n};"],"mappings":"AAAA;;;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAM;EAAEC;AAAF,IAA2BD,OAAO,CAAC,aAAD,CAAxC;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,WAAD,CAArB;;AAyBAI,MAAM,CAACC,OAAP,GAAiB,OAAOC,GAAP,EAAYC,SAAZ,EAAuBC,OAAvB,KAAmC;EAChD,MAAMC,WAAW,GAAGH,GAAG,CAACI,UAAJ,CAAe,aAAf,CAApB;EAEA,MAAM;IAAEC,WAAF;IAAeC,cAAf;IAA+B,GAAGC;EAAlC,IAAkDL,OAAxD;;EAEA,IAAI,CAACI,cAAL,EAAqB;IACjB,MAAM,IAAIX,oBAAJ,CACF,gCADE,EAEFK,GAFE,EAGD,WAAUC,SAAU,yBAHnB,CAAN;EAKH;;EAED,MAAMO,aAAa,GAAGd,OAAO,CAACD,IAAI,CAACgB,OAAL,CAAaT,GAAG,CAACU,WAAjB,EAA8BJ,cAA9B,CAAD,CAA7B;;EACA,MAAMK,SAAS,GAAG,MAAMH,aAAa,CAACR,GAAD,CAArC;;EAEA,IAAI,CAACW,SAAS,CAACC,MAAf,EAAuB;IACnB,MAAM,IAAIjB,oBAAJ,CACF,0EADE,EAEFK,GAFE,EAGD,WAAUC,SAAU,yBAHnB,CAAN;EAKH;;EAEDM,WAAW,CAACK,MAAZ,GAAqBD,SAAS,CAACC,MAA/B;;EACA,IAAID,SAAS,CAACE,SAAd,EAAyB;IACrBN,WAAW,CAACM,SAAZ,GAAwBF,SAAS,CAACE,SAAlC;EACH;;EAED,IAAIC,MAAM,GAAG,IAAIlB,GAAJ,EAAb;;EAEA,IAAIS,WAAJ,EAAiB;IACbL,GAAG,CAACe,cAAJ,CAAmBD,MAAnB,EAA2BT,WAA3B;EACH;;EAEDS,MAAM,CAACE,GAAP,CAAWnB,KAAK,CAAC,GAAD,EAAMM,WAAW,CAACI,WAAD,CAAjB,CAAhB;EACAP,GAAG,CAACiB,WAAJ,CAAgBhB,SAAhB,EAA2Ba,MAA3B;AACH,CArCD"}