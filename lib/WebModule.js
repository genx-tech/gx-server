"use strict";

require("source-map-support/register");

const {
  _,
  ensureLeftSlash,
  trimRightSlash
} = require('rk-utils');

const path = require('path');

const {
  ServiceContainer
} = require('@genx/app');

const Routable = require('./Routable');

const Literal = require('./enum/Literal');

class WebModule extends Routable(ServiceContainer) {
  constructor(server, name, route, appPath, options) {
    super(name, Object.assign({
      workingPath: appPath,
      configPath: path.join(appPath, Literal.DEFAULT_CONFIG_PATH)
    }, options));
    this.server = server;
    this.isServer = false;
    this.route = ensureLeftSlash(trimRightSlash(route));
  }

  getService(name, currentModuleOnly) {
    return super.getService(name) || !currentModuleOnly && this.server.getService(name);
  }

  log(level, message, ...rest) {
    if (this.options.logWithAppName) {
      message = '[' + this.name + '] ' + message;
    }

    this.server.log(level, message, ...rest);
    return this;
  }

  _getFeatureFallbackPath() {
    let pathArray = super._getFeatureFallbackPath();

    pathArray.splice(1, 0, path.resolve(__dirname, Literal.FEATURES_PATH), path.resolve(__dirname, Literal.APP_FEATURES_PATH));
    return pathArray;
  }

  _initialize() {}

  _uninitialize() {}

  _getConfigVariables() {
    return { ...super._getConfigVariables(),
      custom: this.customConfig
    };
  }

}

module.exports = WebModule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9XZWJNb2R1bGUuanMiXSwibmFtZXMiOlsiXyIsImVuc3VyZUxlZnRTbGFzaCIsInRyaW1SaWdodFNsYXNoIiwicmVxdWlyZSIsInBhdGgiLCJTZXJ2aWNlQ29udGFpbmVyIiwiUm91dGFibGUiLCJMaXRlcmFsIiwiV2ViTW9kdWxlIiwiY29uc3RydWN0b3IiLCJzZXJ2ZXIiLCJuYW1lIiwicm91dGUiLCJhcHBQYXRoIiwib3B0aW9ucyIsIk9iamVjdCIsImFzc2lnbiIsIndvcmtpbmdQYXRoIiwiY29uZmlnUGF0aCIsImpvaW4iLCJERUZBVUxUX0NPTkZJR19QQVRIIiwiaXNTZXJ2ZXIiLCJnZXRTZXJ2aWNlIiwiY3VycmVudE1vZHVsZU9ubHkiLCJsb2ciLCJsZXZlbCIsIm1lc3NhZ2UiLCJyZXN0IiwibG9nV2l0aEFwcE5hbWUiLCJfZ2V0RmVhdHVyZUZhbGxiYWNrUGF0aCIsInBhdGhBcnJheSIsInNwbGljZSIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJGRUFUVVJFU19QQVRIIiwiQVBQX0ZFQVRVUkVTX1BBVEgiLCJfaW5pdGlhbGl6ZSIsIl91bmluaXRpYWxpemUiLCJfZ2V0Q29uZmlnVmFyaWFibGVzIiwiY3VzdG9tIiwiY3VzdG9tQ29uZmlnIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNO0FBQUVBLEVBQUFBLENBQUY7QUFBS0MsRUFBQUEsZUFBTDtBQUFzQkMsRUFBQUE7QUFBdEIsSUFBeUNDLE9BQU8sQ0FBQyxVQUFELENBQXREOztBQUNBLE1BQU1DLElBQUksR0FBR0QsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQTtBQUFGLElBQXVCRixPQUFPLENBQUMsV0FBRCxDQUFwQzs7QUFDQSxNQUFNRyxRQUFRLEdBQUdILE9BQU8sQ0FBQyxZQUFELENBQXhCOztBQUNBLE1BQU1JLE9BQU8sR0FBR0osT0FBTyxDQUFDLGdCQUFELENBQXZCOztBQU9BLE1BQU1LLFNBQU4sU0FBd0JGLFFBQVEsQ0FBQ0QsZ0JBQUQsQ0FBaEMsQ0FBbUQ7QUFTL0NJLEVBQUFBLFdBQVcsQ0FBQ0MsTUFBRCxFQUFTQyxJQUFULEVBQWVDLEtBQWYsRUFBc0JDLE9BQXRCLEVBQStCQyxPQUEvQixFQUF3QztBQUMvQyxVQUFNSCxJQUFOLEVBQVlJLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjO0FBQ3RCQyxNQUFBQSxXQUFXLEVBQUVKLE9BRFM7QUFFdEJLLE1BQUFBLFVBQVUsRUFBRWQsSUFBSSxDQUFDZSxJQUFMLENBQVVOLE9BQVYsRUFBbUJOLE9BQU8sQ0FBQ2EsbUJBQTNCO0FBRlUsS0FBZCxFQUdUTixPQUhTLENBQVo7QUFTQSxTQUFLSixNQUFMLEdBQWNBLE1BQWQ7QUFNQSxTQUFLVyxRQUFMLEdBQWdCLEtBQWhCO0FBTUEsU0FBS1QsS0FBTCxHQUFhWCxlQUFlLENBQUNDLGNBQWMsQ0FBQ1UsS0FBRCxDQUFmLENBQTVCO0FBQ0g7O0FBT0RVLEVBQUFBLFVBQVUsQ0FBQ1gsSUFBRCxFQUFPWSxpQkFBUCxFQUEwQjtBQUNoQyxXQUFPLE1BQU1ELFVBQU4sQ0FBaUJYLElBQWpCLEtBQTJCLENBQUNZLGlCQUFELElBQXNCLEtBQUtiLE1BQUwsQ0FBWVksVUFBWixDQUF1QlgsSUFBdkIsQ0FBeEQ7QUFDSDs7QUFTRGEsRUFBQUEsR0FBRyxDQUFDQyxLQUFELEVBQVFDLE9BQVIsRUFBaUIsR0FBR0MsSUFBcEIsRUFBMEI7QUFDekIsUUFBSSxLQUFLYixPQUFMLENBQWFjLGNBQWpCLEVBQWlDO0FBQzdCRixNQUFBQSxPQUFPLEdBQUcsTUFBTSxLQUFLZixJQUFYLEdBQWtCLElBQWxCLEdBQXlCZSxPQUFuQztBQUNIOztBQUNELFNBQUtoQixNQUFMLENBQVljLEdBQVosQ0FBZ0JDLEtBQWhCLEVBQXVCQyxPQUF2QixFQUFnQyxHQUFHQyxJQUFuQztBQUNBLFdBQU8sSUFBUDtBQUNIOztBQUVERSxFQUFBQSx1QkFBdUIsR0FBRztBQUN0QixRQUFJQyxTQUFTLEdBQUcsTUFBTUQsdUJBQU4sRUFBaEI7O0FBQ0FDLElBQUFBLFNBQVMsQ0FBQ0MsTUFBVixDQUFpQixDQUFqQixFQUFvQixDQUFwQixFQUF1QjNCLElBQUksQ0FBQzRCLE9BQUwsQ0FBYUMsU0FBYixFQUF3QjFCLE9BQU8sQ0FBQzJCLGFBQWhDLENBQXZCLEVBQXVFOUIsSUFBSSxDQUFDNEIsT0FBTCxDQUFhQyxTQUFiLEVBQXdCMUIsT0FBTyxDQUFDNEIsaUJBQWhDLENBQXZFO0FBQ0EsV0FBT0wsU0FBUDtBQUNIOztBQUVETSxFQUFBQSxXQUFXLEdBQUcsQ0FDYjs7QUFFREMsRUFBQUEsYUFBYSxHQUFHLENBQ2Y7O0FBRURDLEVBQUFBLG1CQUFtQixHQUFHO0FBQ2xCLFdBQU8sRUFBRSxHQUFHLE1BQU1BLG1CQUFOLEVBQUw7QUFBa0NDLE1BQUFBLE1BQU0sRUFBRSxLQUFLQztBQUEvQyxLQUFQO0FBQ0g7O0FBeEU4Qzs7QUEyRW5EQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJsQyxTQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB7IF8sIGVuc3VyZUxlZnRTbGFzaCwgdHJpbVJpZ2h0U2xhc2ggfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgeyBTZXJ2aWNlQ29udGFpbmVyIH0gPSByZXF1aXJlKCdAZ2VueC9hcHAnKTtcbmNvbnN0IFJvdXRhYmxlID0gcmVxdWlyZSgnLi9Sb3V0YWJsZScpO1xuY29uc3QgTGl0ZXJhbCA9IHJlcXVpcmUoJy4vZW51bS9MaXRlcmFsJyk7XG5cbi8qKlxuICogV2ViIGFwcGxpY2F0aW9uIG1vZHVsZSBjbGFzcy5cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUm91dGFibGUoU2VydmljZUNvbnRhaW5lcilcbiAqL1xuY2xhc3MgV2ViTW9kdWxlIGV4dGVuZHMgUm91dGFibGUoU2VydmljZUNvbnRhaW5lcikge1xuICAgIC8qKiAgICAgXG4gICAgICogQHBhcmFtIHtXZWJTZXJ2ZXJ9IHNlcnZlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGFwcCBtb2R1bGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJvdXRlIC0gVGhlIGJhc2Ugcm91dGUgb2YgdGhlIGFwcCBtb2R1bGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGFwcFBhdGggLSBUaGUgcGF0aCB0byBsb2FkIHRoZSBhcHAncyBtb2R1bGUgZmlsZXNcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIC0gVGhlIGFwcCBtb2R1bGUncyBleHRyYSBvcHRpb25zIGRlZmluZWQgaW4gaXRzIHBhcmVudCdzIGNvbmZpZ3VyYXRpb24uICAgICAgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW29wdGlvbnMubG9nV2l0aEFwcE5hbWU9ZmFsc2VdIC0gRmxhZyB0byBpbmNsdWRlIGFwcCBuYW1lIGluIGxvZyBtZXNzYWdlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNlcnZlciwgbmFtZSwgcm91dGUsIGFwcFBhdGgsIG9wdGlvbnMpIHsgICAgXG4gICAgICAgIHN1cGVyKG5hbWUsIE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgd29ya2luZ1BhdGg6IGFwcFBhdGgsIFxuICAgICAgICAgICAgY29uZmlnUGF0aDogcGF0aC5qb2luKGFwcFBhdGgsIExpdGVyYWwuREVGQVVMVF9DT05GSUdfUEFUSClcbiAgICAgICAgfSwgb3B0aW9ucykpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIb3N0aW5nIHNlcnZlci5cbiAgICAgICAgICogQG1lbWJlciB7V2ViU2VydmVyfVxuICAgICAgICAgKiovXG4gICAgICAgIHRoaXMuc2VydmVyID0gc2VydmVyOyAgICAgICAgXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZXRoZXIgaXQgaXMgYSBzZXJ2ZXIuXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqKi9cbiAgICAgICAgdGhpcy5pc1NlcnZlciA9IGZhbHNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNb3VudGluZyByb3V0ZS5cbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yb3V0ZSA9IGVuc3VyZUxlZnRTbGFzaCh0cmltUmlnaHRTbGFzaChyb3V0ZSkpOyAgICAgICAgICAgICAgIFxuICAgIH0gIFxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgc2VydmljZSBmcm9tIG1vZHVsZSBoaWVyYXJjaHkgICAgIFxuICAgICAqIEBwYXJhbSBuYW1lXG4gICAgICogQHJldHVybnMge29iamVjdH1cbiAgICAgKi9cbiAgICBnZXRTZXJ2aWNlKG5hbWUsIGN1cnJlbnRNb2R1bGVPbmx5KSB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXRTZXJ2aWNlKG5hbWUpIHx8ICghY3VycmVudE1vZHVsZU9ubHkgJiYgdGhpcy5zZXJ2ZXIuZ2V0U2VydmljZShuYW1lKSk7XG4gICAgfSAgICBcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgbG9nIG1ldGhvZCwgbWF5IGJlIG92ZXJyaWRlIGJ5IGxvZ2dlcnMgZmVhdHVyZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsZXZlbCAtIExvZyBsZXZlbFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gTG9nIG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0gey4uLm9iamVjdH0gcmVzdCAtIEV4dHJhIG1ldGEgZGF0YVxuICAgICAqIEByZXR1cm5zIHtSb3V0YWJsZX1cbiAgICAgKi9cbiAgICBsb2cobGV2ZWwsIG1lc3NhZ2UsIC4uLnJlc3QpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5sb2dXaXRoQXBwTmFtZSkge1xuICAgICAgICAgICAgbWVzc2FnZSA9ICdbJyArIHRoaXMubmFtZSArICddICcgKyBtZXNzYWdlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2VydmVyLmxvZyhsZXZlbCwgbWVzc2FnZSwgLi4ucmVzdCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIF9nZXRGZWF0dXJlRmFsbGJhY2tQYXRoKCkge1xuICAgICAgICBsZXQgcGF0aEFycmF5ID0gc3VwZXIuX2dldEZlYXR1cmVGYWxsYmFja1BhdGgoKTtcbiAgICAgICAgcGF0aEFycmF5LnNwbGljZSgxLCAwLCBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBMaXRlcmFsLkZFQVRVUkVTX1BBVEgpLCBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBMaXRlcmFsLkFQUF9GRUFUVVJFU19QQVRIKSk7XG4gICAgICAgIHJldHVybiBwYXRoQXJyYXk7XG4gICAgfVxuXG4gICAgX2luaXRpYWxpemUoKSB7XG4gICAgfVxuXG4gICAgX3VuaW5pdGlhbGl6ZSgpIHtcbiAgICB9XG5cbiAgICBfZ2V0Q29uZmlnVmFyaWFibGVzKCkge1xuICAgICAgICByZXR1cm4geyAuLi5zdXBlci5fZ2V0Q29uZmlnVmFyaWFibGVzKCksIGN1c3RvbTogdGhpcy5jdXN0b21Db25maWcgfTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gV2ViTW9kdWxlOyJdfQ==