{"version":3,"sources":["../../src/routers/rule.js"],"names":["_","text","require","Router","InvalidConfiguration","Literal","load_","app","baseRoute","options","router","prefix","dropIfEndsWith","middlewares","useMiddlewares","forOwn","rules","methods","subRoute","pos","indexOf","embeddedMethod","substr","toLocaleLowerCase","ensureStartsWith","Array","isArray","get","method","ALLOWED_HTTP_METHODS","has","addRoute","addRouter","module","exports"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA,CAAF;AAAKC,EAAAA;AAAL,IAAcC,OAAO,CAAC,YAAD,CAA3B;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,aAAD,CAAtB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAA2BF,OAAO,CAAC,aAAD,CAAxC;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,iBAAD,CAAvB;;AA2CA,SAASI,KAAT,CAAeC,GAAf,EAAoBC,SAApB,EAA+BC,OAA/B,EAAwC;AACpC,MAAIC,MAAM,GAAGF,SAAS,KAAK,GAAd,GAAoB,IAAIL,MAAJ,EAApB,GAAmC,IAAIA,MAAJ,CAAW;AAAEQ,IAAAA,MAAM,EAAEV,IAAI,CAACW,cAAL,CAAoBJ,SAApB,EAA+B,GAA/B;AAAV,GAAX,CAAhD;;AAEA,MAAIC,OAAO,CAACI,WAAZ,EAAyB;AACrBN,IAAAA,GAAG,CAACO,cAAJ,CAAmBJ,MAAnB,EAA2BD,OAAO,CAACI,WAAnC;AACH;;AAEDb,EAAAA,CAAC,CAACe,MAAF,CAASN,OAAO,CAACO,KAAR,IAAiB,EAA1B,EAA8B,CAACC,OAAD,EAAUC,QAAV,KAAuB;AACjD,QAAIC,GAAG,GAAGD,QAAQ,CAACE,OAAT,CAAiB,IAAjB,CAAV;;AAEA,QAAID,GAAG,KAAK,CAAC,CAAb,EAAgB;AACZ,UAAIA,GAAG,KAAK,CAAZ,EAAe;AACX,cAAM,IAAIf,oBAAJ,CACF,gCAAgCc,QAD9B,EAEFX,GAFE,EAGD,WAAUC,SAAU,cAHnB,CAAN;AAKH;;AAID,UAAIa,cAAc,GAAGH,QAAQ,CAACI,MAAT,CAAgB,CAAhB,EAAmBH,GAAnB,EAAwBI,iBAAxB,EAArB;AACAL,MAAAA,QAAQ,GAAGA,QAAQ,CAACI,MAAT,CAAgBH,GAAG,GAAG,CAAtB,CAAX;AAEAF,MAAAA,OAAO,GAAG;AAAE,SAACI,cAAD,GAAkBJ;AAApB,OAAV;AACH;;AAEDC,IAAAA,QAAQ,GAAGjB,IAAI,CAACuB,gBAAL,CAAsBN,QAAtB,EAAgC,GAAhC,CAAX;;AAEA,QAAI,OAAOD,OAAP,KAAmB,QAAnB,IAA+BQ,KAAK,CAACC,OAAN,CAAcT,OAAd,CAAnC,EAA2D;AACvDA,MAAAA,OAAO,GAAG;AAAEU,QAAAA,GAAG,EAAEV;AAAP,OAAV;AACH;;AAEDjB,IAAAA,CAAC,CAACe,MAAF,CAASE,OAAT,EAAkB,CAACJ,WAAD,EAAce,MAAd,KAAyB;AACvC,UAAI,CAACvB,OAAO,CAACwB,oBAAR,CAA6BC,GAA7B,CAAiCF,MAAjC,CAAD,IAA6CA,MAAM,KAAK,KAA5D,EAAmE;AAC/D,cAAM,IAAIxB,oBAAJ,CACF,8BAA8BwB,MAD5B,EAEFrB,GAFE,EAGD,WAAUC,SAAU,gBAAeU,QAAS,GAH3C,CAAN;AAKH;;AAEDX,MAAAA,GAAG,CAACwB,QAAJ,CAAarB,MAAb,EAAqBkB,MAArB,EAA6BV,QAA7B,EAAuCL,WAAvC;AACH,KAVD;AAWH,GArCD;;AAuCAN,EAAAA,GAAG,CAACyB,SAAJ,CAActB,MAAd;AACH;;AAEDuB,MAAM,CAACC,OAAP,GAAiB5B,KAAjB","sourcesContent":["\"use strict\";\n\nconst { _, text } = require(\"@genx/july\");\nconst Router = require(\"@koa/router\");\nconst { InvalidConfiguration } = require(\"@genx/error\");\nconst Literal = require(\"../enum/Literal\");\n\n/**\n * Rule based router.\n * @module Router_Rule\n */\n\n/**\n * Create a rule-based router.\n * @param {WebModule} app\n * @param {string} baseRoute\n * @param {object} options\n * @example\n * '<base path>': {\n *     rule: {\n *         middlewares:\n *         rules: {\n *             // type 1, default is \"get\", methods mapped to one action\n *             '<sub route>': '<controller with relative path>.<action>',\n *\n *             // type 2, different methods mapped to different method\n *             '<sub route>': {\n *                '<method>': '<controller with relative path>.<action>'\n *             },\n *\n *             // type 3, with middleware\n *             '<sub route>': {\n *                 '<method>': {\n *                    '<middleware name>': { //middleware options }\n *                 }\n *             },\n *\n *             // type 4, all methods mapped to one action\n *             '<method>:/<sub route>': '<controller with relative path>.<action>'\n *\n *             // type 5, all methods mapped to one action\n *             '<method>:/<sub route>': {\n *                 '<middleware name>': { //middleware options }\n *             }\n *         }\n *     }\n * }\n */\nfunction load_(app, baseRoute, options) {\n    let router = baseRoute === \"/\" ? new Router() : new Router({ prefix: text.dropIfEndsWith(baseRoute, \"/\") });\n\n    if (options.middlewares) {\n        app.useMiddlewares(router, options.middlewares);\n    }\n\n    _.forOwn(options.rules || {}, (methods, subRoute) => {\n        let pos = subRoute.indexOf(\":/\");\n\n        if (pos !== -1) {\n            if (pos === 0) {\n                throw new InvalidConfiguration(\n                    \"Invalid route rule syntax: \" + subRoute,\n                    app,\n                    `routing[${baseRoute}].rule.rules`\n                );\n            }\n\n            // like get:/, or post:/\n\n            let embeddedMethod = subRoute.substr(0, pos).toLocaleLowerCase();\n            subRoute = subRoute.substr(pos + 2);\n\n            methods = { [embeddedMethod]: methods };\n        }\n\n        subRoute = text.ensureStartsWith(subRoute, \"/\");\n\n        if (typeof methods === \"string\" || Array.isArray(methods)) {\n            methods = { get: methods };\n        }\n\n        _.forOwn(methods, (middlewares, method) => {\n            if (!Literal.ALLOWED_HTTP_METHODS.has(method) && method !== \"all\") {\n                throw new InvalidConfiguration(\n                    \"Unsupported http method: \" + method,\n                    app,\n                    `routing[${baseRoute}].rule.rules[${subRoute}]`\n                );\n            }\n\n            app.addRoute(router, method, subRoute, middlewares);\n        });\n    });\n\n    app.addRouter(router);\n}\n\nmodule.exports = load_;\n"],"file":"rule.js"}