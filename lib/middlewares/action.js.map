{"version":3,"sources":["../../src/middlewares/action.js"],"names":["path","require","InvalidConfiguration","Literal","module","exports","controllerAction","app","pos","lastIndexOf","controller","substr","action","controllerBasePath","join","backendPath","CONTROLLERS_PATH","controllerPath","resolve","ctrl","actioner","Array","isArray","actionFunction","concat","pop"],"mappings":"AAAA;;;;AAOA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA2BD,OAAO,CAAC,aAAD,CAAxC;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,iBAAD,CAAvB;;AAOAG,MAAM,CAACC,OAAP,GAAiB,CAACC,gBAAD,EAAmBC,GAAnB,KAA2B;AACxC,MAAI,OAAOD,gBAAP,KAA4B,QAAhC,EAA0C;AACtC,UAAM,IAAIJ,oBAAJ,CAAyB,wBAAzB,EAAmDK,GAAnD,CAAN;AACH;;AAED,MAAIC,GAAG,GAAGF,gBAAgB,CAACG,WAAjB,CAA6B,GAA7B,CAAV;;AACA,MAAID,GAAG,GAAG,CAAV,EAAa;AACT,UAAM,IAAIN,oBAAJ,CAA0B,4CAA2CI,gBAAiB,GAAtF,EAA0FC,GAA1F,CAAN;AACH;;AAED,MAAIG,UAAU,GAAGJ,gBAAgB,CAACK,MAAjB,CAAwB,CAAxB,EAA2BH,GAA3B,CAAjB;AACA,MAAII,MAAM,GAAGN,gBAAgB,CAACK,MAAjB,CAAwBH,GAAG,GAAG,CAA9B,CAAb;AACA,MAAIK,kBAAkB,GAAGb,IAAI,CAACc,IAAL,CAAUP,GAAG,CAACQ,WAAd,EAA2BZ,OAAO,CAACa,gBAAnC,CAAzB;AAEA,MAAIC,cAAc,GAAGjB,IAAI,CAACkB,OAAL,CAAaL,kBAAb,EAAiCH,UAAU,GAAG,KAA9C,CAArB;;AACA,MAAIS,IAAI,GAAGlB,OAAO,CAACgB,cAAD,CAAlB;;AAEA,MAAIG,QAAQ,GAAGD,IAAI,CAACP,MAAD,CAAnB;;AAEA,MAAIS,KAAK,CAACC,OAAN,CAAcF,QAAd,CAAJ,EAA6B;AACzB,QAAIG,cAAc,GAAGH,QAAQ,CAACI,MAAT,GAAkBC,GAAlB,EAArB;;AACA,QAAI,OAAOF,cAAP,KAA0B,UAA9B,EAA0C;AACtC,YAAM,IAAIrB,oBAAJ,CAA0B,GAAEI,gBAAiB,gEAA7C,EAA8GC,GAA9G,CAAN;AACH;;AAED,WAAOa,QAAQ,CAACI,MAAT,CAAgBD,cAAhB,CAAP;AACH;;AAED,MAAI,OAAOH,QAAP,KAAoB,UAAxB,EAAoC;AAChC,UAAM,IAAIlB,oBAAJ,CAA0B,GAAEI,gBAAiB,yBAA7C,EAAuEC,GAAvE,CAAN;AACH;;AAED,SAAOa,QAAP;AACH,CAjCD","sourcesContent":["\"use strict\";\n\n/**\n * Response action as middleware\n * @module Middleware_Action\n */\n\nconst path = require('path');\nconst { InvalidConfiguration } = require('@genx/error');\nconst Literal = require('../enum/Literal');\n\n/**\n * Action middleware creator\n * @param {string} controllerAction \n * @param {Routable} app \n */\nmodule.exports = (controllerAction, app) => {\n    if (typeof controllerAction !== 'string') {\n        throw new InvalidConfiguration('Invalid action syntax.', app);\n    }\n\n    let pos = controllerAction.lastIndexOf('.');\n    if (pos < 0) {\n        throw new InvalidConfiguration(`Unrecognized controller & action syntax: ${controllerAction}.`, app);\n    }\n\n    let controller = controllerAction.substr(0, pos);\n    let action = controllerAction.substr(pos + 1);\n    let controllerBasePath = path.join(app.backendPath, Literal.CONTROLLERS_PATH);\n\n    let controllerPath = path.resolve(controllerBasePath, controller + '.js');\n    let ctrl = require(controllerPath);    \n\n    let actioner = ctrl[action];   \n\n    if (Array.isArray(actioner)) {\n        let actionFunction = actioner.concat().pop();\n        if (typeof actionFunction !== 'function') {\n            throw new InvalidConfiguration(`${controllerAction} does not contain a valid action in returned middleware chain.`, app);\n        }    \n\n        return actioner.concat(actionFunction);\n    } \n\n    if (typeof actioner !== 'function') {\n        throw new InvalidConfiguration(`${controllerAction} is not a valid action.`, app);\n    }    \n\n    return actioner;\n};"],"file":"action.js"}