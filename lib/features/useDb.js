"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  pascalCase
} = require('rk-utils');

const {
  InvalidConfiguration
} = require('../utils/Errors');

const {
  Feature
} = require('..').enum;

const Literal = require('../enum/Literal');

const DbCache = {};
module.exports = {
  type: Feature.INIT,
  load_: async (app, dbRefs) => {
    app.db = schemaName => {
      if (DbCache[schemaName]) return DbCache[schemaName];
      let schemaInfo = dbRefs[schemaName];

      if (!schemaInfo || !schemaInfo.fromLib && !schemaInfo.dataSource) {
        throw new InvalidConfiguration('Missing "lib" or "dataSource".', app, `useDb.${schemaName}`);
      }

      let db;

      if (schemaInfo.fromLib) {
        let refSchemaName = schemaInfo.schemaName || schemaName;
        let lib = app.server.getLib(schemaInfo.fromLib);
        db = lib.db(refSchemaName);
      } else {
        let connector = app.getService(schemaInfo.dataSource);

        if (!connector) {
          throw new InvalidConfiguration(`Data source [${schemaInfo.dataSource}] not found.`, app, `useDb.${schemaName}.dataSource`);
        }

        let i18n = app.getService('i18n') || app.__;

        let modelPath;

        if (app.backendPath) {
          modelPath = path.join(app.backendPath, Literal.MODELS_PATH);
        } else {
          modelPath = app.toAbsolutePath(Literal.MODELS_PATH);
        }

        const Db = require(path.join(modelPath, pascalCase(schemaName)));

        db = new Db(app, connector, i18n);
      }

      DbCache[schemaName] = db;
      return db;
    };

    app.model = (schemaName, modelName) => {
      if (!modelName) {
        let [s, m] = schemaName.split('.');
        schemaName = s;
        modelName = m;
      }

      return app.db(schemaName).model(modelName);
    };
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy91c2VEYi5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIl8iLCJwYXNjYWxDYXNlIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJGZWF0dXJlIiwiZW51bSIsIkxpdGVyYWwiLCJEYkNhY2hlIiwibW9kdWxlIiwiZXhwb3J0cyIsInR5cGUiLCJJTklUIiwibG9hZF8iLCJhcHAiLCJkYlJlZnMiLCJkYiIsInNjaGVtYU5hbWUiLCJzY2hlbWFJbmZvIiwiZnJvbUxpYiIsImRhdGFTb3VyY2UiLCJyZWZTY2hlbWFOYW1lIiwibGliIiwic2VydmVyIiwiZ2V0TGliIiwiY29ubmVjdG9yIiwiZ2V0U2VydmljZSIsImkxOG4iLCJfXyIsIm1vZGVsUGF0aCIsImJhY2tlbmRQYXRoIiwiam9pbiIsIk1PREVMU19QQVRIIiwidG9BYnNvbHV0ZVBhdGgiLCJEYiIsIm1vZGVsIiwibW9kZWxOYW1lIiwicyIsIm0iLCJzcGxpdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFPQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQTtBQUFMLElBQW9CRixPQUFPLENBQUMsVUFBRCxDQUFqQzs7QUFDQSxNQUFNO0FBQUVHLEVBQUFBO0FBQUYsSUFBMkJILE9BQU8sQ0FBQyxpQkFBRCxDQUF4Qzs7QUFDQSxNQUFNO0FBQUVJLEVBQUFBO0FBQUYsSUFBY0osT0FBTyxDQUFDLElBQUQsQ0FBUCxDQUFjSyxJQUFsQzs7QUFDQSxNQUFNQyxPQUFPLEdBQUdOLE9BQU8sQ0FBQyxpQkFBRCxDQUF2Qjs7QUFFQSxNQUFNTyxPQUFPLEdBQUcsRUFBaEI7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBS2JDLEVBQUFBLElBQUksRUFBRU4sT0FBTyxDQUFDTyxJQUxEO0FBYWJDLEVBQUFBLEtBQUssRUFBRSxPQUFPQyxHQUFQLEVBQVlDLE1BQVosS0FBdUI7QUFDMUJELElBQUFBLEdBQUcsQ0FBQ0UsRUFBSixHQUFVQyxVQUFELElBQWdCO0FBQ3JCLFVBQUlULE9BQU8sQ0FBQ1MsVUFBRCxDQUFYLEVBQXlCLE9BQU9ULE9BQU8sQ0FBQ1MsVUFBRCxDQUFkO0FBRXpCLFVBQUlDLFVBQVUsR0FBR0gsTUFBTSxDQUFDRSxVQUFELENBQXZCOztBQUNBLFVBQUksQ0FBQ0MsVUFBRCxJQUFnQixDQUFDQSxVQUFVLENBQUNDLE9BQVosSUFBdUIsQ0FBQ0QsVUFBVSxDQUFDRSxVQUF2RCxFQUFvRTtBQUVoRSxjQUFNLElBQUloQixvQkFBSixDQUF5QixnQ0FBekIsRUFBMkRVLEdBQTNELEVBQWlFLFNBQVFHLFVBQVcsRUFBcEYsQ0FBTjtBQUNIOztBQUVELFVBQUlELEVBQUo7O0FBRUEsVUFBSUUsVUFBVSxDQUFDQyxPQUFmLEVBQXdCO0FBQ3BCLFlBQUlFLGFBQWEsR0FBR0gsVUFBVSxDQUFDRCxVQUFYLElBQXlCQSxVQUE3QztBQUNBLFlBQUlLLEdBQUcsR0FBR1IsR0FBRyxDQUFDUyxNQUFKLENBQVdDLE1BQVgsQ0FBa0JOLFVBQVUsQ0FBQ0MsT0FBN0IsQ0FBVjtBQUVBSCxRQUFBQSxFQUFFLEdBQUdNLEdBQUcsQ0FBQ04sRUFBSixDQUFPSyxhQUFQLENBQUw7QUFDSCxPQUxELE1BS087QUFDSCxZQUFJSSxTQUFTLEdBQUdYLEdBQUcsQ0FBQ1ksVUFBSixDQUFlUixVQUFVLENBQUNFLFVBQTFCLENBQWhCOztBQUNBLFlBQUksQ0FBQ0ssU0FBTCxFQUFnQjtBQUNaLGdCQUFNLElBQUlyQixvQkFBSixDQUEwQixnQkFBZWMsVUFBVSxDQUFDRSxVQUFXLGNBQS9ELEVBQThFTixHQUE5RSxFQUFvRixTQUFRRyxVQUFXLGFBQXZHLENBQU47QUFDSDs7QUFFRCxZQUFJVSxJQUFJLEdBQUdiLEdBQUcsQ0FBQ1ksVUFBSixDQUFlLE1BQWYsS0FBMEJaLEdBQUcsQ0FBQ2MsRUFBekM7O0FBQ0EsWUFBSUMsU0FBSjs7QUFFQSxZQUFJZixHQUFHLENBQUNnQixXQUFSLEVBQXFCO0FBQ2pCRCxVQUFBQSxTQUFTLEdBQUc3QixJQUFJLENBQUMrQixJQUFMLENBQVVqQixHQUFHLENBQUNnQixXQUFkLEVBQTJCdkIsT0FBTyxDQUFDeUIsV0FBbkMsQ0FBWjtBQUNILFNBRkQsTUFFTztBQUNISCxVQUFBQSxTQUFTLEdBQUdmLEdBQUcsQ0FBQ21CLGNBQUosQ0FBbUIxQixPQUFPLENBQUN5QixXQUEzQixDQUFaO0FBQ0g7O0FBRUQsY0FBTUUsRUFBRSxHQUFHakMsT0FBTyxDQUFDRCxJQUFJLENBQUMrQixJQUFMLENBQVVGLFNBQVYsRUFBcUIxQixVQUFVLENBQUNjLFVBQUQsQ0FBL0IsQ0FBRCxDQUFsQjs7QUFDQUQsUUFBQUEsRUFBRSxHQUFHLElBQUlrQixFQUFKLENBQU9wQixHQUFQLEVBQVlXLFNBQVosRUFBdUJFLElBQXZCLENBQUw7QUFDSDs7QUFFRG5CLE1BQUFBLE9BQU8sQ0FBQ1MsVUFBRCxDQUFQLEdBQXNCRCxFQUF0QjtBQUVBLGFBQU9BLEVBQVA7QUFDSCxLQXRDRDs7QUF3Q0FGLElBQUFBLEdBQUcsQ0FBQ3FCLEtBQUosR0FBWSxDQUFDbEIsVUFBRCxFQUFhbUIsU0FBYixLQUEyQjtBQUNuQyxVQUFJLENBQUNBLFNBQUwsRUFBZ0I7QUFDWixZQUFJLENBQUVDLENBQUYsRUFBS0MsQ0FBTCxJQUFXckIsVUFBVSxDQUFDc0IsS0FBWCxDQUFpQixHQUFqQixDQUFmO0FBQ0F0QixRQUFBQSxVQUFVLEdBQUdvQixDQUFiO0FBQ0FELFFBQUFBLFNBQVMsR0FBR0UsQ0FBWjtBQUNIOztBQUVELGFBQU94QixHQUFHLENBQUNFLEVBQUosQ0FBT0MsVUFBUCxFQUFtQmtCLEtBQW5CLENBQXlCQyxTQUF6QixDQUFQO0FBQ0gsS0FSRDtBQVNIO0FBL0RZLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogRW5hYmxlIGRiIHJlZmVyZW5jZXNcbiAqIEBtb2R1bGUgRmVhdHVyZV9Vc2VEYlxuICovXG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCB7IF8sIHBhc2NhbENhc2UgfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IEludmFsaWRDb25maWd1cmF0aW9uIH0gPSByZXF1aXJlKCcuLi91dGlscy9FcnJvcnMnKTtcbmNvbnN0IHsgRmVhdHVyZSB9ID0gcmVxdWlyZSgnLi4nKS5lbnVtO1xuY29uc3QgTGl0ZXJhbCA9IHJlcXVpcmUoJy4uL2VudW0vTGl0ZXJhbCcpO1xuXG5jb25zdCBEYkNhY2hlID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIC8qKlxuICAgICAqIFRoaXMgZmVhdHVyZSBpcyBsb2FkZWQgYXQgaW5pdCBzdGFnZVxuICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgKi9cbiAgICB0eXBlOiBGZWF0dXJlLklOSVQsXG5cbiAgICAvKipcbiAgICAgKiBMb2FkIHRoZSBmZWF0dXJlXG4gICAgICogQHBhcmFtIHtBcHB9IGFwcCAtIFRoZSBhcHAgbW9kdWxlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYlJlZnMgLSBkYiByZWZlcmVuY2Ugc2V0dGluZ3MgICAgIFxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlLjwqPn1cbiAgICAgKi9cbiAgICBsb2FkXzogYXN5bmMgKGFwcCwgZGJSZWZzKSA9PiB7XG4gICAgICAgIGFwcC5kYiA9IChzY2hlbWFOYW1lKSA9PiB7XG4gICAgICAgICAgICBpZiAoRGJDYWNoZVtzY2hlbWFOYW1lXSkgcmV0dXJuIERiQ2FjaGVbc2NoZW1hTmFtZV07XG5cbiAgICAgICAgICAgIGxldCBzY2hlbWFJbmZvID0gZGJSZWZzW3NjaGVtYU5hbWVdO1xuICAgICAgICAgICAgaWYgKCFzY2hlbWFJbmZvIHx8ICghc2NoZW1hSW5mby5mcm9tTGliICYmICFzY2hlbWFJbmZvLmRhdGFTb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKCdNaXNzaW5nIFwibGliXCIgb3IgXCJkYXRhU291cmNlXCIuJywgYXBwLCBgdXNlRGIuJHtzY2hlbWFOYW1lfWApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgZGI7XG5cbiAgICAgICAgICAgIGlmIChzY2hlbWFJbmZvLmZyb21MaWIpIHtcbiAgICAgICAgICAgICAgICBsZXQgcmVmU2NoZW1hTmFtZSA9IHNjaGVtYUluZm8uc2NoZW1hTmFtZSB8fCBzY2hlbWFOYW1lO1xuICAgICAgICAgICAgICAgIGxldCBsaWIgPSBhcHAuc2VydmVyLmdldExpYihzY2hlbWFJbmZvLmZyb21MaWIpO1xuXG4gICAgICAgICAgICAgICAgZGIgPSBsaWIuZGIocmVmU2NoZW1hTmFtZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBjb25uZWN0b3IgPSBhcHAuZ2V0U2VydmljZShzY2hlbWFJbmZvLmRhdGFTb3VyY2UpO1xuICAgICAgICAgICAgICAgIGlmICghY29ubmVjdG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihgRGF0YSBzb3VyY2UgWyR7c2NoZW1hSW5mby5kYXRhU291cmNlfV0gbm90IGZvdW5kLmAsIGFwcCwgYHVzZURiLiR7c2NoZW1hTmFtZX0uZGF0YVNvdXJjZWApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBpMThuID0gYXBwLmdldFNlcnZpY2UoJ2kxOG4nKSB8fCBhcHAuX187XG4gICAgICAgICAgICAgICAgbGV0IG1vZGVsUGF0aDtcblxuICAgICAgICAgICAgICAgIGlmIChhcHAuYmFja2VuZFBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxQYXRoID0gcGF0aC5qb2luKGFwcC5iYWNrZW5kUGF0aCwgTGl0ZXJhbC5NT0RFTFNfUEFUSCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxQYXRoID0gYXBwLnRvQWJzb2x1dGVQYXRoKExpdGVyYWwuTU9ERUxTX1BBVEgpOyBcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBEYiA9IHJlcXVpcmUocGF0aC5qb2luKG1vZGVsUGF0aCwgcGFzY2FsQ2FzZShzY2hlbWFOYW1lKSkpO1xuICAgICAgICAgICAgICAgIGRiID0gbmV3IERiKGFwcCwgY29ubmVjdG9yLCBpMThuKTtcbiAgICAgICAgICAgIH0gICAgICAgICAgIFxuXG4gICAgICAgICAgICBEYkNhY2hlW3NjaGVtYU5hbWVdID0gZGI7ICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIHJldHVybiBkYjtcbiAgICAgICAgfTsgICAgICAgXG4gICAgICAgIFxuICAgICAgICBhcHAubW9kZWwgPSAoc2NoZW1hTmFtZSwgbW9kZWxOYW1lKSA9PiB7XG4gICAgICAgICAgICBpZiAoIW1vZGVsTmFtZSkge1xuICAgICAgICAgICAgICAgIGxldCBbIHMsIG0gXSA9IHNjaGVtYU5hbWUuc3BsaXQoJy4nKTtcbiAgICAgICAgICAgICAgICBzY2hlbWFOYW1lID0gcztcbiAgICAgICAgICAgICAgICBtb2RlbE5hbWUgPSBtOyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGFwcC5kYihzY2hlbWFOYW1lKS5tb2RlbChtb2RlbE5hbWUpO1xuICAgICAgICB9O1xuICAgIH1cbn07Il19