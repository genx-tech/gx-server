"use strict";

require("source-map-support/register");

const path = require('path');

const Util = require('rk-utils');

const _ = Util._;
const Promise = Util.Promise;

const Router = require('@koa/router');

const {
  InvalidConfiguration
} = require('../utils/Errors');

const Literal = require('../enum/Literal');

function load_(app, baseRoute, options) {
  let router = baseRoute === '/' ? new Router() : new Router({
    prefix: baseRoute
  });

  if (options.middlewares) {
    app.useMiddlewares(router, options.middlewares);
  }

  _.forOwn(options.rules || {}, (methods, subRoute) => {
    let pos = subRoute.indexOf(':/');

    if (pos !== -1) {
      if (pos === 0) {
        throw new InvalidConfiguration('Invalid route rule syntax: ' + subRoute, app, `routing[${baseRoute}].rule.rules`);
      }

      let embeddedMethod = subRoute.substr(0, pos).toLocaleLowerCase();
      subRoute = subRoute.substr(pos + 2);
      methods = {
        [embeddedMethod]: methods
      };
    }

    subRoute = Util.ensureLeftSlash(subRoute);

    if (typeof methods === 'string' || Array.isArray(methods)) {
      methods = {
        get: methods
      };
    }

    _.forOwn(methods, (middlewares, method) => {
      if (!Literal.ALLOWED_HTTP_METHODS.has(method) && method !== 'all') {
        throw new InvalidConfiguration('Unsupported http method: ' + method, app, `routing[${baseRoute}].rule.rules[${subRoute}]`);
      }

      app.addRoute(router, method, subRoute, middlewares);
    });
  });

  app.addRouter(router);
}

;
module.exports = load_;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXJzL3J1bGUuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJVdGlsIiwiXyIsIlByb21pc2UiLCJSb3V0ZXIiLCJJbnZhbGlkQ29uZmlndXJhdGlvbiIsIkxpdGVyYWwiLCJsb2FkXyIsImFwcCIsImJhc2VSb3V0ZSIsIm9wdGlvbnMiLCJyb3V0ZXIiLCJwcmVmaXgiLCJtaWRkbGV3YXJlcyIsInVzZU1pZGRsZXdhcmVzIiwiZm9yT3duIiwicnVsZXMiLCJtZXRob2RzIiwic3ViUm91dGUiLCJwb3MiLCJpbmRleE9mIiwiZW1iZWRkZWRNZXRob2QiLCJzdWJzdHIiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsImVuc3VyZUxlZnRTbGFzaCIsIkFycmF5IiwiaXNBcnJheSIsImdldCIsIm1ldGhvZCIsIkFMTE9XRURfSFRUUF9NRVRIT0RTIiwiaGFzIiwiYWRkUm91dGUiLCJhZGRSb3V0ZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsVUFBRCxDQUFwQjs7QUFDQSxNQUFNRSxDQUFDLEdBQUdELElBQUksQ0FBQ0MsQ0FBZjtBQUNBLE1BQU1DLE9BQU8sR0FBR0YsSUFBSSxDQUFDRSxPQUFyQjs7QUFDQSxNQUFNQyxNQUFNLEdBQUdKLE9BQU8sQ0FBQyxhQUFELENBQXRCOztBQUNBLE1BQU07QUFBRUssRUFBQUE7QUFBRixJQUEyQkwsT0FBTyxDQUFDLGlCQUFELENBQXhDOztBQUNBLE1BQU1NLE9BQU8sR0FBR04sT0FBTyxDQUFDLGlCQUFELENBQXZCOztBQTJDQSxTQUFTTyxLQUFULENBQWVDLEdBQWYsRUFBb0JDLFNBQXBCLEVBQStCQyxPQUEvQixFQUF3QztBQUNwQyxNQUFJQyxNQUFNLEdBQUdGLFNBQVMsS0FBSyxHQUFkLEdBQW9CLElBQUlMLE1BQUosRUFBcEIsR0FBbUMsSUFBSUEsTUFBSixDQUFXO0FBQUNRLElBQUFBLE1BQU0sRUFBRUg7QUFBVCxHQUFYLENBQWhEOztBQUVBLE1BQUlDLE9BQU8sQ0FBQ0csV0FBWixFQUF5QjtBQUNyQkwsSUFBQUEsR0FBRyxDQUFDTSxjQUFKLENBQW1CSCxNQUFuQixFQUEyQkQsT0FBTyxDQUFDRyxXQUFuQztBQUNIOztBQUVEWCxFQUFBQSxDQUFDLENBQUNhLE1BQUYsQ0FBU0wsT0FBTyxDQUFDTSxLQUFSLElBQWlCLEVBQTFCLEVBQThCLENBQUNDLE9BQUQsRUFBVUMsUUFBVixLQUF1QjtBQUNqRCxRQUFJQyxHQUFHLEdBQUdELFFBQVEsQ0FBQ0UsT0FBVCxDQUFpQixJQUFqQixDQUFWOztBQUVBLFFBQUlELEdBQUcsS0FBSyxDQUFDLENBQWIsRUFBZ0I7QUFDWixVQUFJQSxHQUFHLEtBQUssQ0FBWixFQUFlO0FBQ1gsY0FBTSxJQUFJZCxvQkFBSixDQUNGLGdDQUFnQ2EsUUFEOUIsRUFFRlYsR0FGRSxFQUdELFdBQVVDLFNBQVUsY0FIbkIsQ0FBTjtBQUlIOztBQUlELFVBQUlZLGNBQWMsR0FBR0gsUUFBUSxDQUFDSSxNQUFULENBQWdCLENBQWhCLEVBQW1CSCxHQUFuQixFQUF3QkksaUJBQXhCLEVBQXJCO0FBQ0FMLE1BQUFBLFFBQVEsR0FBR0EsUUFBUSxDQUFDSSxNQUFULENBQWdCSCxHQUFHLEdBQUcsQ0FBdEIsQ0FBWDtBQUVBRixNQUFBQSxPQUFPLEdBQUc7QUFBQyxTQUFDSSxjQUFELEdBQWtCSjtBQUFuQixPQUFWO0FBQ0g7O0FBRURDLElBQUFBLFFBQVEsR0FBR2pCLElBQUksQ0FBQ3VCLGVBQUwsQ0FBcUJOLFFBQXJCLENBQVg7O0FBRUEsUUFBSSxPQUFPRCxPQUFQLEtBQW1CLFFBQW5CLElBQStCUSxLQUFLLENBQUNDLE9BQU4sQ0FBY1QsT0FBZCxDQUFuQyxFQUEyRDtBQUN2REEsTUFBQUEsT0FBTyxHQUFHO0FBQUVVLFFBQUFBLEdBQUcsRUFBRVY7QUFBUCxPQUFWO0FBQ0g7O0FBRURmLElBQUFBLENBQUMsQ0FBQ2EsTUFBRixDQUFTRSxPQUFULEVBQWtCLENBQUNKLFdBQUQsRUFBY2UsTUFBZCxLQUF5QjtBQUN2QyxVQUFJLENBQUN0QixPQUFPLENBQUN1QixvQkFBUixDQUE2QkMsR0FBN0IsQ0FBaUNGLE1BQWpDLENBQUQsSUFBNkNBLE1BQU0sS0FBSyxLQUE1RCxFQUFtRTtBQUMvRCxjQUFNLElBQUl2QixvQkFBSixDQUNGLDhCQUE4QnVCLE1BRDVCLEVBRUZwQixHQUZFLEVBR0QsV0FBVUMsU0FBVSxnQkFBZVMsUUFBUyxHQUgzQyxDQUFOO0FBSUg7O0FBRURWLE1BQUFBLEdBQUcsQ0FBQ3VCLFFBQUosQ0FBYXBCLE1BQWIsRUFBcUJpQixNQUFyQixFQUE2QlYsUUFBN0IsRUFBdUNMLFdBQXZDO0FBQ0gsS0FURDtBQVVILEdBbkNEOztBQXFDQUwsRUFBQUEsR0FBRyxDQUFDd0IsU0FBSixDQUFjckIsTUFBZDtBQUNIOztBQUFBO0FBRURzQixNQUFNLENBQUNDLE9BQVAsR0FBaUIzQixLQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgVXRpbCA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCBfID0gVXRpbC5fO1xuY29uc3QgUHJvbWlzZSA9IFV0aWwuUHJvbWlzZTtcbmNvbnN0IFJvdXRlciA9IHJlcXVpcmUoJ0Brb2Evcm91dGVyJyk7XG5jb25zdCB7IEludmFsaWRDb25maWd1cmF0aW9uIH0gPSByZXF1aXJlKCcuLi91dGlscy9FcnJvcnMnKTtcbmNvbnN0IExpdGVyYWwgPSByZXF1aXJlKCcuLi9lbnVtL0xpdGVyYWwnKTtcblxuLyoqXG4gKiBSdWxlIGJhc2VkIHJvdXRlci5cbiAqIEBtb2R1bGUgUm91dGVyX1J1bGUgXG4gKi9cblxuLyoqIFxuICogQ3JlYXRlIGEgcnVsZS1iYXNlZCByb3V0ZXIuXG4gKiBAcGFyYW0ge1dlYk1vZHVsZX0gYXBwIFxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VSb3V0ZSBcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIFxuICogQGV4YW1wbGVcbiAqICc8YmFzZSBwYXRoPic6IHtcbiAqICAgICBydWxlOiB7XG4gKiAgICAgICAgIG1pZGRsZXdhcmVzOlxuICogICAgICAgICBydWxlczoge1xuICogICAgICAgICAgICAgLy8gdHlwZSAxLCBkZWZhdWx0IGlzIFwiZ2V0XCIsIG1ldGhvZHMgbWFwcGVkIHRvIG9uZSBhY3Rpb25cbiAqICAgICAgICAgICAgICc8c3ViIHJvdXRlPic6ICc8Y29udHJvbGxlciB3aXRoIHJlbGF0aXZlIHBhdGg+LjxhY3Rpb24+JyxcbiAqIFxuICogICAgICAgICAgICAgLy8gdHlwZSAyLCBkaWZmZXJlbnQgbWV0aG9kcyBtYXBwZWQgdG8gZGlmZmVyZW50IG1ldGhvZFxuICogICAgICAgICAgICAgJzxzdWIgcm91dGU+Jzoge1xuICogICAgICAgICAgICAgICAgJzxtZXRob2Q+JzogJzxjb250cm9sbGVyIHdpdGggcmVsYXRpdmUgcGF0aD4uPGFjdGlvbj4nXG4gKiAgICAgICAgICAgICB9LFxuICogXG4gKiAgICAgICAgICAgICAvLyB0eXBlIDMsIHdpdGggbWlkZGxld2FyZVxuICogICAgICAgICAgICAgJzxzdWIgcm91dGU+Jzoge1xuICogICAgICAgICAgICAgICAgICc8bWV0aG9kPic6IHtcbiAqICAgICAgICAgICAgICAgICAgICAnPG1pZGRsZXdhcmUgbmFtZT4nOiB7IC8vbWlkZGxld2FyZSBvcHRpb25zIH1cbiAqICAgICAgICAgICAgICAgICB9XG4gKiAgICAgICAgICAgICB9LFxuICogXG4gKiAgICAgICAgICAgICAvLyB0eXBlIDQsIGFsbCBtZXRob2RzIG1hcHBlZCB0byBvbmUgYWN0aW9uXG4gKiAgICAgICAgICAgICAnPG1ldGhvZD46LzxzdWIgcm91dGU+JzogJzxjb250cm9sbGVyIHdpdGggcmVsYXRpdmUgcGF0aD4uPGFjdGlvbj4nXG4gKiBcbiAqICAgICAgICAgICAgIC8vIHR5cGUgNSwgYWxsIG1ldGhvZHMgbWFwcGVkIHRvIG9uZSBhY3Rpb25cbiAqICAgICAgICAgICAgICc8bWV0aG9kPjovPHN1YiByb3V0ZT4nOiB7XG4gKiAgICAgICAgICAgICAgICAgJzxtaWRkbGV3YXJlIG5hbWU+JzogeyAvL21pZGRsZXdhcmUgb3B0aW9ucyB9XG4gKiAgICAgICAgICAgICB9XG4gKiAgICAgICAgIH1cbiAqICAgICB9XG4gKiB9XG4gKi9cbmZ1bmN0aW9uIGxvYWRfKGFwcCwgYmFzZVJvdXRlLCBvcHRpb25zKSB7XG4gICAgbGV0IHJvdXRlciA9IGJhc2VSb3V0ZSA9PT0gJy8nID8gbmV3IFJvdXRlcigpIDogbmV3IFJvdXRlcih7cHJlZml4OiBiYXNlUm91dGV9KTtcblxuICAgIGlmIChvcHRpb25zLm1pZGRsZXdhcmVzKSB7XG4gICAgICAgIGFwcC51c2VNaWRkbGV3YXJlcyhyb3V0ZXIsIG9wdGlvbnMubWlkZGxld2FyZXMpO1xuICAgIH1cblxuICAgIF8uZm9yT3duKG9wdGlvbnMucnVsZXMgfHwge30sIChtZXRob2RzLCBzdWJSb3V0ZSkgPT4ge1xuICAgICAgICBsZXQgcG9zID0gc3ViUm91dGUuaW5kZXhPZignOi8nKTtcblxuICAgICAgICBpZiAocG9zICE9PSAtMSkge1xuICAgICAgICAgICAgaWYgKHBvcyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgJ0ludmFsaWQgcm91dGUgcnVsZSBzeW50YXg6ICcgKyBzdWJSb3V0ZSwgXG4gICAgICAgICAgICAgICAgICAgIGFwcCwgXG4gICAgICAgICAgICAgICAgICAgIGByb3V0aW5nWyR7YmFzZVJvdXRlfV0ucnVsZS5ydWxlc2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBsaWtlIGdldDovLCBvciBwb3N0Oi9cblxuICAgICAgICAgICAgbGV0IGVtYmVkZGVkTWV0aG9kID0gc3ViUm91dGUuc3Vic3RyKDAsIHBvcykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHN1YlJvdXRlID0gc3ViUm91dGUuc3Vic3RyKHBvcyArIDIpO1xuXG4gICAgICAgICAgICBtZXRob2RzID0ge1tlbWJlZGRlZE1ldGhvZF06IG1ldGhvZHN9O1xuICAgICAgICB9XG5cbiAgICAgICAgc3ViUm91dGUgPSBVdGlsLmVuc3VyZUxlZnRTbGFzaChzdWJSb3V0ZSk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBtZXRob2RzID09PSAnc3RyaW5nJyB8fCBBcnJheS5pc0FycmF5KG1ldGhvZHMpKSB7XG4gICAgICAgICAgICBtZXRob2RzID0geyBnZXQ6IG1ldGhvZHMgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uZm9yT3duKG1ldGhvZHMsIChtaWRkbGV3YXJlcywgbWV0aG9kKSA9PiB7XG4gICAgICAgICAgICBpZiAoIUxpdGVyYWwuQUxMT1dFRF9IVFRQX01FVEhPRFMuaGFzKG1ldGhvZCkgJiYgbWV0aG9kICE9PSAnYWxsJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgJ1Vuc3VwcG9ydGVkIGh0dHAgbWV0aG9kOiAnICsgbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICAgICAgICAgIGByb3V0aW5nWyR7YmFzZVJvdXRlfV0ucnVsZS5ydWxlc1ske3N1YlJvdXRlfV1gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXBwLmFkZFJvdXRlKHJvdXRlciwgbWV0aG9kLCBzdWJSb3V0ZSwgbWlkZGxld2FyZXMpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGFwcC5hZGRSb3V0ZXIocm91dGVyKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbG9hZF87Il19