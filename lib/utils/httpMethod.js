"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

function httpMethod(method, middlewares) {
  if (arguments.length === 3) {
    return httpMethod('get')(...Array.prototype.slice.call(arguments));
  }

  return function (target, name, descriptor) {
    let targetFunction,
        isHof = false;

    if (arguments.length === 1 && typeof target === 'function') {
      targetFunction = target;
      isHof = true;
    } else if (descriptor && descriptor.value) {
      targetFunction = descriptor.value;
      descriptor.enumerable = true;
    } else {
      throw new Error('Unsupported scenario.');
    }

    if (targetFunction) {
      console.log(name, method, isHof);

      if (typeof method === 'string') {
        let pos = method.indexOf(':/');

        if (pos !== -1) {
          if (pos === 0) {
            throw new Error('Invalid httpMethod decorator param: ' + method);
          }

          targetFunction.__metaRoute = method.substr(pos + 1);
          method = method.substr(0, pos).toLocaleLowerCase();
        }
      } else {
        method = 'get';
      }

      targetFunction.__metaHttpMethod = method;

      if (middlewares) {
        if (_.isPlainObject(middlewares)) {
          targetFunction.__metaMiddlewares = _.map(middlewares, (options, name) => ({
            name,
            options
          }));
        } else {
          targetFunction.__metaMiddlewares = _.castArray(middlewares);
        }
      }
    }

    return isHof ? targetFunction : descriptor;
  };
}

module.exports = httpMethod;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9odHRwTWV0aG9kLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiaHR0cE1ldGhvZCIsIm1ldGhvZCIsIm1pZGRsZXdhcmVzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJ0YXJnZXQiLCJuYW1lIiwiZGVzY3JpcHRvciIsInRhcmdldEZ1bmN0aW9uIiwiaXNIb2YiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJFcnJvciIsImNvbnNvbGUiLCJsb2ciLCJwb3MiLCJpbmRleE9mIiwiX19tZXRhUm91dGUiLCJzdWJzdHIiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsIl9fbWV0YUh0dHBNZXRob2QiLCJpc1BsYWluT2JqZWN0IiwiX19tZXRhTWlkZGxld2FyZXMiLCJtYXAiLCJvcHRpb25zIiwiY2FzdEFycmF5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFRQyxPQUFPLENBQUMsVUFBRCxDQUFyQjs7QUFFQSxTQUFTQyxVQUFULENBQW9CQyxNQUFwQixFQUE0QkMsV0FBNUIsRUFBeUM7QUFDckMsTUFBSUMsU0FBUyxDQUFDQyxNQUFWLEtBQXFCLENBQXpCLEVBQTRCO0FBQ3hCLFdBQU9KLFVBQVUsQ0FBQyxLQUFELENBQVYsQ0FBa0IsR0FBR0ssS0FBSyxDQUFDQyxTQUFOLENBQWdCQyxLQUFoQixDQUFzQkMsSUFBdEIsQ0FBMkJMLFNBQTNCLENBQXJCLENBQVA7QUFDSDs7QUFFRCxTQUFPLFVBQVVNLE1BQVYsRUFBa0JDLElBQWxCLEVBQXdCQyxVQUF4QixFQUFvQztBQUN2QyxRQUFJQyxjQUFKO0FBQUEsUUFBb0JDLEtBQUssR0FBRyxLQUE1Qjs7QUFFQSxRQUFJVixTQUFTLENBQUNDLE1BQVYsS0FBcUIsQ0FBckIsSUFBMEIsT0FBT0ssTUFBUCxLQUFrQixVQUFoRCxFQUE0RDtBQUN4REcsTUFBQUEsY0FBYyxHQUFHSCxNQUFqQjtBQUNBSSxNQUFBQSxLQUFLLEdBQUcsSUFBUjtBQUNILEtBSEQsTUFHTyxJQUFJRixVQUFVLElBQUlBLFVBQVUsQ0FBQ0csS0FBN0IsRUFBb0M7QUFDdkNGLE1BQUFBLGNBQWMsR0FBR0QsVUFBVSxDQUFDRyxLQUE1QjtBQUNBSCxNQUFBQSxVQUFVLENBQUNJLFVBQVgsR0FBd0IsSUFBeEI7QUFDSCxLQUhNLE1BR0E7QUFDSCxZQUFNLElBQUlDLEtBQUosQ0FBVSx1QkFBVixDQUFOO0FBQ0g7O0FBRUQsUUFBSUosY0FBSixFQUFvQjtBQUNoQkssTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlSLElBQVosRUFBa0JULE1BQWxCLEVBQTBCWSxLQUExQjs7QUFFQSxVQUFJLE9BQU9aLE1BQVAsS0FBa0IsUUFBdEIsRUFBZ0M7QUFDNUIsWUFBSWtCLEdBQUcsR0FBR2xCLE1BQU0sQ0FBQ21CLE9BQVAsQ0FBZSxJQUFmLENBQVY7O0FBRUEsWUFBSUQsR0FBRyxLQUFLLENBQUMsQ0FBYixFQUFnQjtBQUNaLGNBQUlBLEdBQUcsS0FBSyxDQUFaLEVBQWU7QUFDWCxrQkFBTSxJQUFJSCxLQUFKLENBQVUseUNBQXlDZixNQUFuRCxDQUFOO0FBQ0g7O0FBS0RXLFVBQUFBLGNBQWMsQ0FBQ1MsV0FBZixHQUE2QnBCLE1BQU0sQ0FBQ3FCLE1BQVAsQ0FBY0gsR0FBRyxHQUFHLENBQXBCLENBQTdCO0FBQ0FsQixVQUFBQSxNQUFNLEdBQUdBLE1BQU0sQ0FBQ3FCLE1BQVAsQ0FBYyxDQUFkLEVBQWlCSCxHQUFqQixFQUFzQkksaUJBQXRCLEVBQVQ7QUFDSDtBQUNKLE9BZEQsTUFjTztBQUNIdEIsUUFBQUEsTUFBTSxHQUFHLEtBQVQ7QUFDSDs7QUFFRFcsTUFBQUEsY0FBYyxDQUFDWSxnQkFBZixHQUFrQ3ZCLE1BQWxDOztBQUVBLFVBQUlDLFdBQUosRUFBaUI7QUFDYixZQUFJSixDQUFDLENBQUMyQixhQUFGLENBQWdCdkIsV0FBaEIsQ0FBSixFQUFrQztBQUM5QlUsVUFBQUEsY0FBYyxDQUFDYyxpQkFBZixHQUFtQzVCLENBQUMsQ0FBQzZCLEdBQUYsQ0FBTXpCLFdBQU4sRUFBbUIsQ0FBQzBCLE9BQUQsRUFBVWxCLElBQVYsTUFBb0I7QUFBRUEsWUFBQUEsSUFBRjtBQUFRa0IsWUFBQUE7QUFBUixXQUFwQixDQUFuQixDQUFuQztBQUNILFNBRkQsTUFFTztBQUNIaEIsVUFBQUEsY0FBYyxDQUFDYyxpQkFBZixHQUFtQzVCLENBQUMsQ0FBQytCLFNBQUYsQ0FBWTNCLFdBQVosQ0FBbkM7QUFDSDtBQUNKO0FBQ0o7O0FBRUQsV0FBT1csS0FBSyxHQUFHRCxjQUFILEdBQW9CRCxVQUFoQztBQUNILEdBOUNEO0FBK0NIOztBQUVEbUIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCL0IsVUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IF8gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5cbmZ1bmN0aW9uIGh0dHBNZXRob2QobWV0aG9kLCBtaWRkbGV3YXJlcykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzKSB7XG4gICAgICAgIHJldHVybiBodHRwTWV0aG9kKCdnZXQnKSguLi5BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwgbmFtZSwgZGVzY3JpcHRvcikge1xuICAgICAgICBsZXQgdGFyZ2V0RnVuY3Rpb24sIGlzSG9mID0gZmFsc2U7XG4gICAgXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRhcmdldEZ1bmN0aW9uID0gdGFyZ2V0O1xuICAgICAgICAgICAgaXNIb2YgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZSkge1xuICAgICAgICAgICAgdGFyZ2V0RnVuY3Rpb24gPSBkZXNjcmlwdG9yLnZhbHVlO1xuICAgICAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgc2NlbmFyaW8uJyk7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgaWYgKHRhcmdldEZ1bmN0aW9uKSB7ICAgIFxuICAgICAgICAgICAgY29uc29sZS5sb2cobmFtZSwgbWV0aG9kLCBpc0hvZik7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWV0aG9kID09PSAnc3RyaW5nJykgeyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZXQgcG9zID0gbWV0aG9kLmluZGV4T2YoJzovJyk7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKHBvcyAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvcyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGh0dHBNZXRob2QgZGVjb3JhdG9yIHBhcmFtOiAnICsgbWV0aG9kKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBsaWtlIGdldDovLCBvciBwb3N0Oi9cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy9vdmVycmlkZSBhY3Rpb25OYW1lIGFzIHJvdXRlXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEZ1bmN0aW9uLl9fbWV0YVJvdXRlID0gbWV0aG9kLnN1YnN0cihwb3MgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kID0gbWV0aG9kLnN1YnN0cigwLCBwb3MpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtZXRob2QgPSAnZ2V0JztcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHRhcmdldEZ1bmN0aW9uLl9fbWV0YUh0dHBNZXRob2QgPSBtZXRob2Q7ICAgICAgICAgICAgXG4gICAgXG4gICAgICAgICAgICBpZiAobWlkZGxld2FyZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KG1pZGRsZXdhcmVzKSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRGdW5jdGlvbi5fX21ldGFNaWRkbGV3YXJlcyA9IF8ubWFwKG1pZGRsZXdhcmVzLCAob3B0aW9ucywgbmFtZSkgPT4gKHsgbmFtZSwgb3B0aW9ucyB9KSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RnVuY3Rpb24uX19tZXRhTWlkZGxld2FyZXMgPSBfLmNhc3RBcnJheShtaWRkbGV3YXJlcyk7XG4gICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIFxuICAgICAgICByZXR1cm4gaXNIb2YgPyB0YXJnZXRGdW5jdGlvbiA6IGRlc2NyaXB0b3I7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGh0dHBNZXRob2Q7Il19