"use strict";

require("source-map-support/register");

const {
  InvalidConfiguration
} = require('@genx/error');

const {
  requireFeatures
} = require('../utils/Helpers');

const HttpStatus = require('http-status-codes');

module.exports = (opt, app) => {
  requireFeatures(['timezone', 'loggers'], app, 'accessLog');

  if (!opt.logger) {
    throw new InvalidConfiguration('Missing logger id.', app, 'middlewares.accessLog.logger');
  }

  let logger = app.getService('logger.' + opt.logger);

  if (!logger) {
    throw new InvalidConfiguration('Logger not found. Id: ' + opt.logger, app, 'middlewares.accessLog.logger');
  }

  return async (ctx, next) => {
    let startAt = app.now();
    await next();
    let info = {
      ip: ctx.header['x-real-ip'] || ctx.ip,
      method: ctx.method,
      url: ctx.url,
      originalUrl: ctx.originalUrl,
      httpVersion: ctx.req.httpVersion,
      protocol: ctx.protocol.toUpperCase(),
      status: ctx.status,
      size: ctx.length || '-',
      referer: ctx.header['referer'] || '-',
      userAgent: ctx.header['user-agent'] || '-',
      isoTimestamp: startAt.toISO(),
      duration: app.now().diff(startAt).milliseconds
    };
    let level = 'info';

    if (ctx.status >= 500) {
      level = 'error';
    } else if (ctx.status >= 400) {
      level = 'warn';
    }

    logger.log(level, HttpStatus.getStatusText(ctx.status), info);
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlcy9hY2Nlc3NMb2cuanMiXSwibmFtZXMiOlsiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJyZXF1aXJlIiwicmVxdWlyZUZlYXR1cmVzIiwiSHR0cFN0YXR1cyIsIm1vZHVsZSIsImV4cG9ydHMiLCJvcHQiLCJhcHAiLCJsb2dnZXIiLCJnZXRTZXJ2aWNlIiwiY3R4IiwibmV4dCIsInN0YXJ0QXQiLCJub3ciLCJpbmZvIiwiaXAiLCJoZWFkZXIiLCJtZXRob2QiLCJ1cmwiLCJvcmlnaW5hbFVybCIsImh0dHBWZXJzaW9uIiwicmVxIiwicHJvdG9jb2wiLCJ0b1VwcGVyQ2FzZSIsInN0YXR1cyIsInNpemUiLCJsZW5ndGgiLCJyZWZlcmVyIiwidXNlckFnZW50IiwiaXNvVGltZXN0YW1wIiwidG9JU08iLCJkdXJhdGlvbiIsImRpZmYiLCJtaWxsaXNlY29uZHMiLCJsZXZlbCIsImxvZyIsImdldFN0YXR1c1RleHQiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBT0EsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQTJCQyxPQUFPLENBQUMsYUFBRCxDQUF4Qzs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBc0JELE9BQU8sQ0FBQyxrQkFBRCxDQUFuQzs7QUFDQSxNQUFNRSxVQUFVLEdBQUdGLE9BQU8sQ0FBQyxtQkFBRCxDQUExQjs7QUFFQUcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQzNCTCxFQUFBQSxlQUFlLENBQUMsQ0FBRSxVQUFGLEVBQWMsU0FBZCxDQUFELEVBQTRCSyxHQUE1QixFQUFpQyxXQUFqQyxDQUFmOztBQUVBLE1BQUksQ0FBQ0QsR0FBRyxDQUFDRSxNQUFULEVBQWlCO0FBQ2IsVUFBTSxJQUFJUixvQkFBSixDQUF5QixvQkFBekIsRUFBK0NPLEdBQS9DLEVBQW9ELDhCQUFwRCxDQUFOO0FBQ0g7O0FBRUQsTUFBSUMsTUFBTSxHQUFHRCxHQUFHLENBQUNFLFVBQUosQ0FBZSxZQUFZSCxHQUFHLENBQUNFLE1BQS9CLENBQWI7O0FBQ0EsTUFBSSxDQUFDQSxNQUFMLEVBQWE7QUFDVCxVQUFNLElBQUlSLG9CQUFKLENBQXlCLDJCQUEyQk0sR0FBRyxDQUFDRSxNQUF4RCxFQUFnRUQsR0FBaEUsRUFBcUUsOEJBQXJFLENBQU47QUFDSDs7QUFFRCxTQUFPLE9BQU9HLEdBQVAsRUFBWUMsSUFBWixLQUFxQjtBQUN4QixRQUFJQyxPQUFPLEdBQUdMLEdBQUcsQ0FBQ00sR0FBSixFQUFkO0FBRUEsVUFBTUYsSUFBSSxFQUFWO0FBRUEsUUFBSUcsSUFBSSxHQUFHO0FBQ1BDLE1BQUFBLEVBQUUsRUFBRUwsR0FBRyxDQUFDTSxNQUFKLENBQVcsV0FBWCxLQUEyQk4sR0FBRyxDQUFDSyxFQUQ1QjtBQUVQRSxNQUFBQSxNQUFNLEVBQUVQLEdBQUcsQ0FBQ08sTUFGTDtBQUdQQyxNQUFBQSxHQUFHLEVBQUVSLEdBQUcsQ0FBQ1EsR0FIRjtBQUlQQyxNQUFBQSxXQUFXLEVBQUVULEdBQUcsQ0FBQ1MsV0FKVjtBQUtQQyxNQUFBQSxXQUFXLEVBQUVWLEdBQUcsQ0FBQ1csR0FBSixDQUFRRCxXQUxkO0FBTVBFLE1BQUFBLFFBQVEsRUFBRVosR0FBRyxDQUFDWSxRQUFKLENBQWFDLFdBQWIsRUFOSDtBQU9QQyxNQUFBQSxNQUFNLEVBQUVkLEdBQUcsQ0FBQ2MsTUFQTDtBQVFQQyxNQUFBQSxJQUFJLEVBQUVmLEdBQUcsQ0FBQ2dCLE1BQUosSUFBYyxHQVJiO0FBU1BDLE1BQUFBLE9BQU8sRUFBRWpCLEdBQUcsQ0FBQ00sTUFBSixDQUFXLFNBQVgsS0FBeUIsR0FUM0I7QUFVUFksTUFBQUEsU0FBUyxFQUFFbEIsR0FBRyxDQUFDTSxNQUFKLENBQVcsWUFBWCxLQUE0QixHQVZoQztBQVdQYSxNQUFBQSxZQUFZLEVBQUVqQixPQUFPLENBQUNrQixLQUFSLEVBWFA7QUFZUEMsTUFBQUEsUUFBUSxFQUFFeEIsR0FBRyxDQUFDTSxHQUFKLEdBQVVtQixJQUFWLENBQWVwQixPQUFmLEVBQXdCcUI7QUFaM0IsS0FBWDtBQWVBLFFBQUlDLEtBQUssR0FBRyxNQUFaOztBQUVBLFFBQUl4QixHQUFHLENBQUNjLE1BQUosSUFBYyxHQUFsQixFQUF1QjtBQUNuQlUsTUFBQUEsS0FBSyxHQUFHLE9BQVI7QUFDSCxLQUZELE1BRU8sSUFBSXhCLEdBQUcsQ0FBQ2MsTUFBSixJQUFjLEdBQWxCLEVBQXVCO0FBQzFCVSxNQUFBQSxLQUFLLEdBQUcsTUFBUjtBQUNIOztBQUVEMUIsSUFBQUEsTUFBTSxDQUFDMkIsR0FBUCxDQUFXRCxLQUFYLEVBQWtCL0IsVUFBVSxDQUFDaUMsYUFBWCxDQUF5QjFCLEdBQUcsQ0FBQ2MsTUFBN0IsQ0FBbEIsRUFBd0RWLElBQXhEO0FBQ0gsR0E3QkQ7QUE4QkgsQ0ExQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBBZGQgYWNjZXNzIGxvZyBmb3IgZXZlcnkgaHR0cCByZXF1ZXN0XG4gKiBAbW9kdWxlIE1pZGRsZXdhcmVfQWNjZXNzTG9nXG4gKi9cblxuY29uc3QgeyBJbnZhbGlkQ29uZmlndXJhdGlvbiB9ID0gcmVxdWlyZSgnQGdlbngvZXJyb3InKTtcbmNvbnN0IHsgcmVxdWlyZUZlYXR1cmVzIH0gPSByZXF1aXJlKCcuLi91dGlscy9IZWxwZXJzJyk7XG5jb25zdCBIdHRwU3RhdHVzID0gcmVxdWlyZSgnaHR0cC1zdGF0dXMtY29kZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAob3B0LCBhcHApID0+IHsgICAgICAgIFxuICAgIHJlcXVpcmVGZWF0dXJlcyhbICd0aW1lem9uZScsICdsb2dnZXJzJyBdLCBhcHAsICdhY2Nlc3NMb2cnKTsgICAgXG5cbiAgICBpZiAoIW9wdC5sb2dnZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKCdNaXNzaW5nIGxvZ2dlciBpZC4nLCBhcHAsICdtaWRkbGV3YXJlcy5hY2Nlc3NMb2cubG9nZ2VyJyk7XG4gICAgfVxuXG4gICAgbGV0IGxvZ2dlciA9IGFwcC5nZXRTZXJ2aWNlKCdsb2dnZXIuJyArIG9wdC5sb2dnZXIpO1xuICAgIGlmICghbG9nZ2VyKSB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbignTG9nZ2VyIG5vdCBmb3VuZC4gSWQ6ICcgKyBvcHQubG9nZ2VyLCBhcHAsICdtaWRkbGV3YXJlcy5hY2Nlc3NMb2cubG9nZ2VyJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFzeW5jIChjdHgsIG5leHQpID0+IHtcbiAgICAgICAgbGV0IHN0YXJ0QXQgPSBhcHAubm93KCk7ICAgICAgIFxuXG4gICAgICAgIGF3YWl0IG5leHQoKTsgICAgICAgIFxuXG4gICAgICAgIGxldCBpbmZvID0ge1xuICAgICAgICAgICAgaXA6IGN0eC5oZWFkZXJbJ3gtcmVhbC1pcCddIHx8IGN0eC5pcCxcbiAgICAgICAgICAgIG1ldGhvZDogY3R4Lm1ldGhvZCxcbiAgICAgICAgICAgIHVybDogY3R4LnVybCxcbiAgICAgICAgICAgIG9yaWdpbmFsVXJsOiBjdHgub3JpZ2luYWxVcmwsICAgICAgICAgICBcbiAgICAgICAgICAgIGh0dHBWZXJzaW9uOiBjdHgucmVxLmh0dHBWZXJzaW9uLCAgICAgICAgXG4gICAgICAgICAgICBwcm90b2NvbDogY3R4LnByb3RvY29sLnRvVXBwZXJDYXNlKCksXG4gICAgICAgICAgICBzdGF0dXM6IGN0eC5zdGF0dXMsXG4gICAgICAgICAgICBzaXplOiBjdHgubGVuZ3RoIHx8ICctJyxcbiAgICAgICAgICAgIHJlZmVyZXI6IGN0eC5oZWFkZXJbJ3JlZmVyZXInXSB8fCAnLScsXG4gICAgICAgICAgICB1c2VyQWdlbnQ6IGN0eC5oZWFkZXJbJ3VzZXItYWdlbnQnXSB8fCAnLScsXG4gICAgICAgICAgICBpc29UaW1lc3RhbXA6IHN0YXJ0QXQudG9JU08oKSwgICAgICAgIFxuICAgICAgICAgICAgZHVyYXRpb246IGFwcC5ub3coKS5kaWZmKHN0YXJ0QXQpLm1pbGxpc2Vjb25kc1xuICAgICAgICB9O1xuXG4gICAgICAgIGxldCBsZXZlbCA9ICdpbmZvJztcblxuICAgICAgICBpZiAoY3R4LnN0YXR1cyA+PSA1MDApIHtcbiAgICAgICAgICAgIGxldmVsID0gJ2Vycm9yJztcbiAgICAgICAgfSBlbHNlIGlmIChjdHguc3RhdHVzID49IDQwMCkge1xuICAgICAgICAgICAgbGV2ZWwgPSAnd2Fybic7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGxvZ2dlci5sb2cobGV2ZWwsIEh0dHBTdGF0dXMuZ2V0U3RhdHVzVGV4dChjdHguc3RhdHVzKSwgaW5mbyk7XG4gICAgfTtcbn07Il19