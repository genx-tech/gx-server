"use strict";

require("source-map-support/register");

const {
  _,
  hasKeyByPath,
  getValueByPath
} = require('rk-utils');

const {
  InvalidConfiguration,
  BadRequest
} = require('../utils/Errors');

const Literal = require('../enum/Literal');

exports.requireFeatures = function (features, app, middleware) {
  let hasNotEnabled = _.find(_.castArray(features), feature => !app.enabled(feature));

  if (hasNotEnabled) {
    throw new InvalidConfiguration(`Middleware "${middleware}" requires "${hasNotEnabled}" feature to be enabled.`, app, `middlewares.${middleware}`);
  }
};

exports.hasMethod = function hasMethod(obj, name) {
  const desc = Object.getOwnPropertyDescriptor(obj, name);
  let has = !!desc && typeof desc.value === 'function';
  if (has) return true;
  let proto = Object.getPrototypeOf(obj);
  if (proto === Object.prototype) return has;
  return hasMethod(proto, name);
};

exports.getValueFromCtx = (ctx, name, type, optional, defaultValue, sources) => {
  var _sources;

  (_sources = sources) !== null && _sources !== void 0 ? _sources : sources = ctx.method === 'GET' ? ['query'] : type.name === 'binary' || type.name === 'object' ? ['body'] : ['query', 'body'];
  let keyPath;

  let source = _.find(sources, source => {
    keyPath = source + '.' + name;
    return hasKeyByPath(ctx.request, keyPath);
  });

  if (!source) {
    if (optional) return defaultValue;
    throw new BadRequest(`"${name}" is required.`);
  }

  let value = getValueByPath(ctx.request, keyPath);

  if (_.isNil(value)) {
    return value;
  }

  return type.sanitize(value);
};

exports.expectToBeOneOf = (name, value, list, forceTo) => {
  list instanceof Set || (list = new Set(list));

  if (!list.has(value)) {
    if (!_.isNil(forceTo)) {
      return forceTo;
    }

    throw new BadRequest(`Value of "${name}" should be one of [${Array.from(list).join(', ')}].`);
  }

  return value;
};

exports.defaultBackendPath = process.env.NODE_RT && process.env.NODE_RT === 'babel' ? Literal.BACKEND_SRC_PATH : Literal.BACKEND_PATH;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9IZWxwZXJzLmpzIl0sIm5hbWVzIjpbIl8iLCJoYXNLZXlCeVBhdGgiLCJnZXRWYWx1ZUJ5UGF0aCIsInJlcXVpcmUiLCJJbnZhbGlkQ29uZmlndXJhdGlvbiIsIkJhZFJlcXVlc3QiLCJMaXRlcmFsIiwiZXhwb3J0cyIsInJlcXVpcmVGZWF0dXJlcyIsImZlYXR1cmVzIiwiYXBwIiwibWlkZGxld2FyZSIsImhhc05vdEVuYWJsZWQiLCJmaW5kIiwiY2FzdEFycmF5IiwiZmVhdHVyZSIsImVuYWJsZWQiLCJoYXNNZXRob2QiLCJvYmoiLCJuYW1lIiwiZGVzYyIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImhhcyIsInZhbHVlIiwicHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSIsImdldFZhbHVlRnJvbUN0eCIsImN0eCIsInR5cGUiLCJvcHRpb25hbCIsImRlZmF1bHRWYWx1ZSIsInNvdXJjZXMiLCJtZXRob2QiLCJrZXlQYXRoIiwic291cmNlIiwicmVxdWVzdCIsImlzTmlsIiwic2FuaXRpemUiLCJleHBlY3RUb0JlT25lT2YiLCJsaXN0IiwiZm9yY2VUbyIsIlNldCIsIkFycmF5IiwiZnJvbSIsImpvaW4iLCJkZWZhdWx0QmFja2VuZFBhdGgiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9SVCIsIkJBQ0tFTkRfU1JDX1BBVEgiLCJCQUNLRU5EX1BBVEgiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTTtBQUFFQSxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBLFlBQUw7QUFBbUJDLEVBQUFBO0FBQW5CLElBQXNDQyxPQUFPLENBQUMsVUFBRCxDQUFuRDs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLG9CQUFGO0FBQXdCQyxFQUFBQTtBQUF4QixJQUF1Q0YsT0FBTyxDQUFDLGlCQUFELENBQXBEOztBQUNBLE1BQU1HLE9BQU8sR0FBR0gsT0FBTyxDQUFDLGlCQUFELENBQXZCOztBQUVBSSxPQUFPLENBQUNDLGVBQVIsR0FBMEIsVUFBVUMsUUFBVixFQUFvQkMsR0FBcEIsRUFBeUJDLFVBQXpCLEVBQXFDO0FBQzNELE1BQUlDLGFBQWEsR0FBR1osQ0FBQyxDQUFDYSxJQUFGLENBQU9iLENBQUMsQ0FBQ2MsU0FBRixDQUFZTCxRQUFaLENBQVAsRUFBOEJNLE9BQU8sSUFBSSxDQUFDTCxHQUFHLENBQUNNLE9BQUosQ0FBWUQsT0FBWixDQUExQyxDQUFwQjs7QUFFQSxNQUFJSCxhQUFKLEVBQW1CO0FBQ2YsVUFBTSxJQUFJUixvQkFBSixDQUNELGVBQWNPLFVBQVcsZUFBY0MsYUFBYywwQkFEcEQsRUFFRkYsR0FGRSxFQUdELGVBQWNDLFVBQVcsRUFIeEIsQ0FBTjtBQUtIO0FBQ0osQ0FWRDs7QUFZQUosT0FBTyxDQUFDVSxTQUFSLEdBQW9CLFNBQVNBLFNBQVQsQ0FBbUJDLEdBQW5CLEVBQXdCQyxJQUF4QixFQUE4QjtBQUM5QyxRQUFNQyxJQUFJLEdBQUdDLE1BQU0sQ0FBQ0Msd0JBQVAsQ0FBZ0NKLEdBQWhDLEVBQXFDQyxJQUFyQyxDQUFiO0FBQ0EsTUFBSUksR0FBRyxHQUFHLENBQUMsQ0FBQ0gsSUFBRixJQUFVLE9BQU9BLElBQUksQ0FBQ0ksS0FBWixLQUFzQixVQUExQztBQUNBLE1BQUlELEdBQUosRUFBUyxPQUFPLElBQVA7QUFFVCxNQUFJRSxLQUFLLEdBQUdKLE1BQU0sQ0FBQ0ssY0FBUCxDQUFzQlIsR0FBdEIsQ0FBWjtBQUNBLE1BQUlPLEtBQUssS0FBS0osTUFBTSxDQUFDTSxTQUFyQixFQUFnQyxPQUFPSixHQUFQO0FBRWhDLFNBQU9OLFNBQVMsQ0FBQ1EsS0FBRCxFQUFRTixJQUFSLENBQWhCO0FBQ0gsQ0FURDs7QUFXQVosT0FBTyxDQUFDcUIsZUFBUixHQUEwQixDQUFDQyxHQUFELEVBQU1WLElBQU4sRUFBWVcsSUFBWixFQUFrQkMsUUFBbEIsRUFBNEJDLFlBQTVCLEVBQTBDQyxPQUExQyxLQUFzRDtBQUFBOztBQUM1RSxjQUFBQSxPQUFPLFVBQVAscUNBQVlBLE9BQU8sR0FBR0osR0FBRyxDQUFDSyxNQUFKLEtBQWUsS0FBZixHQUNsQixDQUFDLE9BQUQsQ0FEa0IsR0FFaEJKLElBQUksQ0FBQ1gsSUFBTCxLQUFjLFFBQWQsSUFBMEJXLElBQUksQ0FBQ1gsSUFBTCxLQUFjLFFBQXpDLEdBQ0csQ0FBQyxNQUFELENBREgsR0FFRyxDQUFDLE9BQUQsRUFBVSxNQUFWLENBSlI7QUFNQSxNQUFJZ0IsT0FBSjs7QUFDQSxNQUFJQyxNQUFNLEdBQUdwQyxDQUFDLENBQUNhLElBQUYsQ0FBT29CLE9BQVAsRUFBZ0JHLE1BQU0sSUFBSTtBQUNuQ0QsSUFBQUEsT0FBTyxHQUFHQyxNQUFNLEdBQUcsR0FBVCxHQUFlakIsSUFBekI7QUFDQSxXQUFPbEIsWUFBWSxDQUFDNEIsR0FBRyxDQUFDUSxPQUFMLEVBQWNGLE9BQWQsQ0FBbkI7QUFDSCxHQUhZLENBQWI7O0FBS0EsTUFBSSxDQUFDQyxNQUFMLEVBQWE7QUFDVCxRQUFJTCxRQUFKLEVBQWMsT0FBT0MsWUFBUDtBQUNkLFVBQU0sSUFBSTNCLFVBQUosQ0FBZ0IsSUFBR2MsSUFBSyxnQkFBeEIsQ0FBTjtBQUNIOztBQUVELE1BQUlLLEtBQUssR0FBR3RCLGNBQWMsQ0FBQzJCLEdBQUcsQ0FBQ1EsT0FBTCxFQUFjRixPQUFkLENBQTFCOztBQUNBLE1BQUluQyxDQUFDLENBQUNzQyxLQUFGLENBQVFkLEtBQVIsQ0FBSixFQUFvQjtBQUNoQixXQUFPQSxLQUFQO0FBQ0g7O0FBRUQsU0FBT00sSUFBSSxDQUFDUyxRQUFMLENBQWNmLEtBQWQsQ0FBUDtBQUNILENBeEJEOztBQTBCQWpCLE9BQU8sQ0FBQ2lDLGVBQVIsR0FBMEIsQ0FBQ3JCLElBQUQsRUFBT0ssS0FBUCxFQUFjaUIsSUFBZCxFQUFvQkMsT0FBcEIsS0FBZ0M7QUFDckRELEVBQUFBLElBQUksWUFBWUUsR0FBakIsS0FBMEJGLElBQUksR0FBRyxJQUFJRSxHQUFKLENBQVFGLElBQVIsQ0FBakM7O0FBQ0EsTUFBSSxDQUFDQSxJQUFJLENBQUNsQixHQUFMLENBQVNDLEtBQVQsQ0FBTCxFQUFzQjtBQUNsQixRQUFJLENBQUN4QixDQUFDLENBQUNzQyxLQUFGLENBQVFJLE9BQVIsQ0FBTCxFQUF1QjtBQUNuQixhQUFPQSxPQUFQO0FBQ0g7O0FBRUQsVUFBTSxJQUFJckMsVUFBSixDQUFnQixhQUFZYyxJQUFLLHVCQUFzQnlCLEtBQUssQ0FBQ0MsSUFBTixDQUFXSixJQUFYLEVBQWlCSyxJQUFqQixDQUFzQixJQUF0QixDQUE0QixJQUFuRixDQUFOO0FBQ0g7O0FBRUQsU0FBT3RCLEtBQVA7QUFDSCxDQVhEOztBQWdCQWpCLE9BQU8sQ0FBQ3dDLGtCQUFSLEdBQThCQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsT0FBWixJQUF1QkYsT0FBTyxDQUFDQyxHQUFSLENBQVlDLE9BQVosS0FBd0IsT0FBaEQsR0FBMkQ1QyxPQUFPLENBQUM2QyxnQkFBbkUsR0FBc0Y3QyxPQUFPLENBQUM4QyxZQUEzSCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB7IF8sIGhhc0tleUJ5UGF0aCwgZ2V0VmFsdWVCeVBhdGggfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IEludmFsaWRDb25maWd1cmF0aW9uLCBCYWRSZXF1ZXN0IH0gPSByZXF1aXJlKCcuLi91dGlscy9FcnJvcnMnKTtcbmNvbnN0IExpdGVyYWwgPSByZXF1aXJlKCcuLi9lbnVtL0xpdGVyYWwnKTtcblxuZXhwb3J0cy5yZXF1aXJlRmVhdHVyZXMgPSBmdW5jdGlvbiAoZmVhdHVyZXMsIGFwcCwgbWlkZGxld2FyZSkge1xuICAgIGxldCBoYXNOb3RFbmFibGVkID0gXy5maW5kKF8uY2FzdEFycmF5KGZlYXR1cmVzKSwgZmVhdHVyZSA9PiAhYXBwLmVuYWJsZWQoZmVhdHVyZSkpO1xuXG4gICAgaWYgKGhhc05vdEVuYWJsZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgYE1pZGRsZXdhcmUgXCIke21pZGRsZXdhcmV9XCIgcmVxdWlyZXMgXCIke2hhc05vdEVuYWJsZWR9XCIgZmVhdHVyZSB0byBiZSBlbmFibGVkLmAsXG4gICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICBgbWlkZGxld2FyZXMuJHttaWRkbGV3YXJlfWBcbiAgICAgICAgKTtcbiAgICB9XG59O1xuXG5leHBvcnRzLmhhc01ldGhvZCA9IGZ1bmN0aW9uIGhhc01ldGhvZChvYmosIG5hbWUpIHtcbiAgICBjb25zdCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIG5hbWUpOyAgICBcbiAgICBsZXQgaGFzID0gISFkZXNjICYmIHR5cGVvZiBkZXNjLnZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgIGlmIChoYXMpIHJldHVybiB0cnVlO1xuXG4gICAgbGV0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaik7XG4gICAgaWYgKHByb3RvID09PSBPYmplY3QucHJvdG90eXBlKSByZXR1cm4gaGFzO1xuXG4gICAgcmV0dXJuIGhhc01ldGhvZChwcm90bywgbmFtZSk7XG59O1xuXG5leHBvcnRzLmdldFZhbHVlRnJvbUN0eCA9IChjdHgsIG5hbWUsIHR5cGUsIG9wdGlvbmFsLCBkZWZhdWx0VmFsdWUsIHNvdXJjZXMpID0+IHtcbiAgICBzb3VyY2VzID8/IChzb3VyY2VzID0gY3R4Lm1ldGhvZCA9PT0gJ0dFVCcgPyBcbiAgICAgICAgWydxdWVyeSddIDogXG4gICAgICAgICgodHlwZS5uYW1lID09PSAnYmluYXJ5JyB8fCB0eXBlLm5hbWUgPT09ICdvYmplY3QnKSA/IFxuICAgICAgICAgICAgWydib2R5J10gOiBcbiAgICAgICAgICAgIFsncXVlcnknLCAnYm9keSddKSk7XG5cbiAgICBsZXQga2V5UGF0aDtcbiAgICBsZXQgc291cmNlID0gXy5maW5kKHNvdXJjZXMsIHNvdXJjZSA9PiB7XG4gICAgICAgIGtleVBhdGggPSBzb3VyY2UgKyAnLicgKyBuYW1lO1xuICAgICAgICByZXR1cm4gaGFzS2V5QnlQYXRoKGN0eC5yZXF1ZXN0LCBrZXlQYXRoKSA7ICAgICAgICBcbiAgICB9KTtcblxuICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIGlmIChvcHRpb25hbCkgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgdGhyb3cgbmV3IEJhZFJlcXVlc3QoYFwiJHtuYW1lfVwiIGlzIHJlcXVpcmVkLmApO1xuICAgIH1cblxuICAgIGxldCB2YWx1ZSA9IGdldFZhbHVlQnlQYXRoKGN0eC5yZXF1ZXN0LCBrZXlQYXRoKTtcbiAgICBpZiAoXy5pc05pbCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB0eXBlLnNhbml0aXplKHZhbHVlKTtcbn07XG5cbmV4cG9ydHMuZXhwZWN0VG9CZU9uZU9mID0gKG5hbWUsIHZhbHVlLCBsaXN0LCBmb3JjZVRvKSA9PiB7XG4gICAgKGxpc3QgaW5zdGFuY2VvZiBTZXQpIHx8IChsaXN0ID0gbmV3IFNldChsaXN0KSk7XG4gICAgaWYgKCFsaXN0Lmhhcyh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCFfLmlzTmlsKGZvcmNlVG8pKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9yY2VUbztcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBCYWRSZXF1ZXN0KGBWYWx1ZSBvZiBcIiR7bmFtZX1cIiBzaG91bGQgYmUgb25lIG9mIFske0FycmF5LmZyb20obGlzdCkuam9pbignLCAnKX1dLmApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbn1cblxuLyoqXG4gKiB3aGVuIHJ1bm5pbmcgd2l0aCBbTk9ERV9SVD1iYWJlbF0sIGRpcmVjdGx5IHVzZSBzb3VyY2UgZmlsZXNcbiAqL1xuZXhwb3J0cy5kZWZhdWx0QmFja2VuZFBhdGggPSAocHJvY2Vzcy5lbnYuTk9ERV9SVCAmJiBwcm9jZXNzLmVudi5OT0RFX1JUID09PSAnYmFiZWwnKSA/IExpdGVyYWwuQkFDS0VORF9TUkNfUEFUSCA6IExpdGVyYWwuQkFDS0VORF9QQVRIOyJdfQ==