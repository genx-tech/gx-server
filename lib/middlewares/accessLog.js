"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const {
  InvalidConfiguration
} = require('../utils/Errors');

const {
  requireFeatures
} = require('../utils/Helpers');

const HttpStatus = require('http-status-codes');

module.exports = (opt, app) => {
  requireFeatures(['timezone', 'loggers'], app, 'accessLog');

  if (!opt.logger) {
    throw new InvalidConfiguration('Missing logger id.', app, 'middlewares.accessLog.logger');
  }

  let logger = app.getService('logger.' + opt.logger);

  if (!logger) {
    throw new InvalidConfiguration('Logger not found. Id: ' + opt.logger, app, 'middlewares.accessLog.logger');
  }

  return async (ctx, next) => {
    let startAt = app.now();
    await next();
    let info = {
      ip: ctx.header['x-real-ip'] || ctx.ip,
      method: ctx.method,
      url: ctx.url,
      originalUrl: ctx.originalUrl,
      httpVersion: ctx.req.httpVersion,
      protocol: ctx.protocol.toUpperCase(),
      status: ctx.status,
      size: ctx.length || '-',
      referer: ctx.header['referer'] || '-',
      userAgent: ctx.header['user-agent'] || '-',
      isoTimestamp: startAt.toISO(),
      duration: app.now().diff(startAt).milliseconds
    };
    let level = 'info';

    if (ctx.status >= 500) {
      level = 'error';
    } else if (ctx.status >= 400) {
      level = 'warn';
    }

    logger.log(level, HttpStatus.getStatusText(ctx.status), info);
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlcy9hY2Nlc3NMb2cuanMiXSwibmFtZXMiOlsiVXRpbCIsInJlcXVpcmUiLCJJbnZhbGlkQ29uZmlndXJhdGlvbiIsInJlcXVpcmVGZWF0dXJlcyIsIkh0dHBTdGF0dXMiLCJtb2R1bGUiLCJleHBvcnRzIiwib3B0IiwiYXBwIiwibG9nZ2VyIiwiZ2V0U2VydmljZSIsImN0eCIsIm5leHQiLCJzdGFydEF0Iiwibm93IiwiaW5mbyIsImlwIiwiaGVhZGVyIiwibWV0aG9kIiwidXJsIiwib3JpZ2luYWxVcmwiLCJodHRwVmVyc2lvbiIsInJlcSIsInByb3RvY29sIiwidG9VcHBlckNhc2UiLCJzdGF0dXMiLCJzaXplIiwibGVuZ3RoIiwicmVmZXJlciIsInVzZXJBZ2VudCIsImlzb1RpbWVzdGFtcCIsInRvSVNPIiwiZHVyYXRpb24iLCJkaWZmIiwibWlsbGlzZWNvbmRzIiwibGV2ZWwiLCJsb2ciLCJnZXRTdGF0dXNUZXh0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQU9BLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBcEI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQTJCRCxPQUFPLENBQUMsaUJBQUQsQ0FBeEM7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQTtBQUFGLElBQXNCRixPQUFPLENBQUMsa0JBQUQsQ0FBbkM7O0FBQ0EsTUFBTUcsVUFBVSxHQUFHSCxPQUFPLENBQUMsbUJBQUQsQ0FBMUI7O0FBRUFJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixDQUFDQyxHQUFELEVBQU1DLEdBQU4sS0FBYztBQUMzQkwsRUFBQUEsZUFBZSxDQUFDLENBQUUsVUFBRixFQUFjLFNBQWQsQ0FBRCxFQUE0QkssR0FBNUIsRUFBaUMsV0FBakMsQ0FBZjs7QUFFQSxNQUFJLENBQUNELEdBQUcsQ0FBQ0UsTUFBVCxFQUFpQjtBQUNiLFVBQU0sSUFBSVAsb0JBQUosQ0FBeUIsb0JBQXpCLEVBQStDTSxHQUEvQyxFQUFvRCw4QkFBcEQsQ0FBTjtBQUNIOztBQUVELE1BQUlDLE1BQU0sR0FBR0QsR0FBRyxDQUFDRSxVQUFKLENBQWUsWUFBWUgsR0FBRyxDQUFDRSxNQUEvQixDQUFiOztBQUNBLE1BQUksQ0FBQ0EsTUFBTCxFQUFhO0FBQ1QsVUFBTSxJQUFJUCxvQkFBSixDQUF5QiwyQkFBMkJLLEdBQUcsQ0FBQ0UsTUFBeEQsRUFBZ0VELEdBQWhFLEVBQXFFLDhCQUFyRSxDQUFOO0FBQ0g7O0FBRUQsU0FBTyxPQUFPRyxHQUFQLEVBQVlDLElBQVosS0FBcUI7QUFDeEIsUUFBSUMsT0FBTyxHQUFHTCxHQUFHLENBQUNNLEdBQUosRUFBZDtBQUVBLFVBQU1GLElBQUksRUFBVjtBQUVBLFFBQUlHLElBQUksR0FBRztBQUNQQyxNQUFBQSxFQUFFLEVBQUVMLEdBQUcsQ0FBQ00sTUFBSixDQUFXLFdBQVgsS0FBMkJOLEdBQUcsQ0FBQ0ssRUFENUI7QUFFUEUsTUFBQUEsTUFBTSxFQUFFUCxHQUFHLENBQUNPLE1BRkw7QUFHUEMsTUFBQUEsR0FBRyxFQUFFUixHQUFHLENBQUNRLEdBSEY7QUFJUEMsTUFBQUEsV0FBVyxFQUFFVCxHQUFHLENBQUNTLFdBSlY7QUFLUEMsTUFBQUEsV0FBVyxFQUFFVixHQUFHLENBQUNXLEdBQUosQ0FBUUQsV0FMZDtBQU1QRSxNQUFBQSxRQUFRLEVBQUVaLEdBQUcsQ0FBQ1ksUUFBSixDQUFhQyxXQUFiLEVBTkg7QUFPUEMsTUFBQUEsTUFBTSxFQUFFZCxHQUFHLENBQUNjLE1BUEw7QUFRUEMsTUFBQUEsSUFBSSxFQUFFZixHQUFHLENBQUNnQixNQUFKLElBQWMsR0FSYjtBQVNQQyxNQUFBQSxPQUFPLEVBQUVqQixHQUFHLENBQUNNLE1BQUosQ0FBVyxTQUFYLEtBQXlCLEdBVDNCO0FBVVBZLE1BQUFBLFNBQVMsRUFBRWxCLEdBQUcsQ0FBQ00sTUFBSixDQUFXLFlBQVgsS0FBNEIsR0FWaEM7QUFXUGEsTUFBQUEsWUFBWSxFQUFFakIsT0FBTyxDQUFDa0IsS0FBUixFQVhQO0FBWVBDLE1BQUFBLFFBQVEsRUFBRXhCLEdBQUcsQ0FBQ00sR0FBSixHQUFVbUIsSUFBVixDQUFlcEIsT0FBZixFQUF3QnFCO0FBWjNCLEtBQVg7QUFlQSxRQUFJQyxLQUFLLEdBQUcsTUFBWjs7QUFFQSxRQUFJeEIsR0FBRyxDQUFDYyxNQUFKLElBQWMsR0FBbEIsRUFBdUI7QUFDbkJVLE1BQUFBLEtBQUssR0FBRyxPQUFSO0FBQ0gsS0FGRCxNQUVPLElBQUl4QixHQUFHLENBQUNjLE1BQUosSUFBYyxHQUFsQixFQUF1QjtBQUMxQlUsTUFBQUEsS0FBSyxHQUFHLE1BQVI7QUFDSDs7QUFFRDFCLElBQUFBLE1BQU0sQ0FBQzJCLEdBQVAsQ0FBV0QsS0FBWCxFQUFrQi9CLFVBQVUsQ0FBQ2lDLGFBQVgsQ0FBeUIxQixHQUFHLENBQUNjLE1BQTdCLENBQWxCLEVBQXdEVixJQUF4RDtBQUNILEdBN0JEO0FBOEJILENBMUNEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQWRkIGFjY2VzcyBsb2cgZm9yIGV2ZXJ5IGh0dHAgcmVxdWVzdFxuICogQG1vZHVsZSBNaWRkbGV3YXJlX0FjY2Vzc0xvZ1xuICovXG5cbmNvbnN0IFV0aWwgPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyBJbnZhbGlkQ29uZmlndXJhdGlvbiB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvRXJyb3JzJyk7XG5jb25zdCB7IHJlcXVpcmVGZWF0dXJlcyB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvSGVscGVycycpO1xuY29uc3QgSHR0cFN0YXR1cyA9IHJlcXVpcmUoJ2h0dHAtc3RhdHVzLWNvZGVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKG9wdCwgYXBwKSA9PiB7ICAgICAgICBcbiAgICByZXF1aXJlRmVhdHVyZXMoWyAndGltZXpvbmUnLCAnbG9nZ2VycycgXSwgYXBwLCAnYWNjZXNzTG9nJyk7ICAgIFxuXG4gICAgaWYgKCFvcHQubG9nZ2VyKSB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbignTWlzc2luZyBsb2dnZXIgaWQuJywgYXBwLCAnbWlkZGxld2FyZXMuYWNjZXNzTG9nLmxvZ2dlcicpO1xuICAgIH1cblxuICAgIGxldCBsb2dnZXIgPSBhcHAuZ2V0U2VydmljZSgnbG9nZ2VyLicgKyBvcHQubG9nZ2VyKTtcbiAgICBpZiAoIWxvZ2dlcikge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oJ0xvZ2dlciBub3QgZm91bmQuIElkOiAnICsgb3B0LmxvZ2dlciwgYXBwLCAnbWlkZGxld2FyZXMuYWNjZXNzTG9nLmxvZ2dlcicpO1xuICAgIH1cblxuICAgIHJldHVybiBhc3luYyAoY3R4LCBuZXh0KSA9PiB7XG4gICAgICAgIGxldCBzdGFydEF0ID0gYXBwLm5vdygpOyAgICAgICBcblxuICAgICAgICBhd2FpdCBuZXh0KCk7ICAgICAgICBcblxuICAgICAgICBsZXQgaW5mbyA9IHtcbiAgICAgICAgICAgIGlwOiBjdHguaGVhZGVyWyd4LXJlYWwtaXAnXSB8fCBjdHguaXAsXG4gICAgICAgICAgICBtZXRob2Q6IGN0eC5tZXRob2QsXG4gICAgICAgICAgICB1cmw6IGN0eC51cmwsXG4gICAgICAgICAgICBvcmlnaW5hbFVybDogY3R4Lm9yaWdpbmFsVXJsLCAgICAgICAgICAgXG4gICAgICAgICAgICBodHRwVmVyc2lvbjogY3R4LnJlcS5odHRwVmVyc2lvbiwgICAgICAgIFxuICAgICAgICAgICAgcHJvdG9jb2w6IGN0eC5wcm90b2NvbC50b1VwcGVyQ2FzZSgpLFxuICAgICAgICAgICAgc3RhdHVzOiBjdHguc3RhdHVzLFxuICAgICAgICAgICAgc2l6ZTogY3R4Lmxlbmd0aCB8fCAnLScsXG4gICAgICAgICAgICByZWZlcmVyOiBjdHguaGVhZGVyWydyZWZlcmVyJ10gfHwgJy0nLFxuICAgICAgICAgICAgdXNlckFnZW50OiBjdHguaGVhZGVyWyd1c2VyLWFnZW50J10gfHwgJy0nLFxuICAgICAgICAgICAgaXNvVGltZXN0YW1wOiBzdGFydEF0LnRvSVNPKCksICAgICAgICBcbiAgICAgICAgICAgIGR1cmF0aW9uOiBhcHAubm93KCkuZGlmZihzdGFydEF0KS5taWxsaXNlY29uZHNcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgbGV2ZWwgPSAnaW5mbyc7XG5cbiAgICAgICAgaWYgKGN0eC5zdGF0dXMgPj0gNTAwKSB7XG4gICAgICAgICAgICBsZXZlbCA9ICdlcnJvcic7XG4gICAgICAgIH0gZWxzZSBpZiAoY3R4LnN0YXR1cyA+PSA0MDApIHtcbiAgICAgICAgICAgIGxldmVsID0gJ3dhcm4nO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBsb2dnZXIubG9nKGxldmVsLCBIdHRwU3RhdHVzLmdldFN0YXR1c1RleHQoY3R4LnN0YXR1cyksIGluZm8pO1xuICAgIH07XG59OyJdfQ==