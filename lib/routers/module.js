"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  url: urlUtil,
  text
} = require('@genx/july');

const Literal = require('../enum/Literal');

const Router = require('@koa/router');

const {
  InvalidConfiguration
} = require('@genx/error');

module.exports = function (app, baseRoute, moduleItem) {
  let controllerPath = path.join(app.backendPath, Literal.CONTROLLERS_PATH);

  if (typeof moduleItem === 'string') {
    moduleItem = {
      controller: moduleItem
    };
  }

  let currentPrefix = urlUtil.join(baseRoute, moduleItem.route || '/');
  let router = currentPrefix === '/' ? new Router() : new Router({
    prefix: currentPrefix
  });

  if (moduleItem.middlewares) {
    app.useMiddlewares(router, moduleItem.middlewares);
  }

  const controllers = _.castArray(moduleItem.controller);

  controllers.forEach(moduleController => {
    let controllerFile = path.join(controllerPath, moduleController + '.js');
    let controller;
    controller = require(controllerFile);
    let isController = false;

    if (typeof controller === 'function') {
      controller = new controller(app);
      isController = true;
    }

    for (let actionName in controller) {
      let action = controller[actionName];
      if (typeof action !== 'function') continue;

      let httpMethod = _.castArray(action.__metaHttpMethod || 'get');

      let subRoute = text.ensureStartsWith(action.__metaRoute || _.kebabCase(actionName), '/');
      let bindAction;

      if (isController) {
        bindAction = action.bind(controller);
      } else {
        bindAction = action;
      }

      _.each(httpMethod, method => {
        if (!Literal.ALLOWED_HTTP_METHODS.has(method)) {
          throw new InvalidConfiguration('Unsupported http method: ' + method, app, `routing.${baseRoute}.modules ${moduleItem.controller}.${actionName}`);
        }

        app.addRoute(router, method, subRoute, action.__metaMiddlewares ? action.__metaMiddlewares.concat([bindAction]) : bindAction);
      });
    }

    ;
  });
  app.addRouter(router);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXJzL21vZHVsZS5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIl8iLCJ1cmwiLCJ1cmxVdGlsIiwidGV4dCIsIkxpdGVyYWwiLCJSb3V0ZXIiLCJJbnZhbGlkQ29uZmlndXJhdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcHAiLCJiYXNlUm91dGUiLCJtb2R1bGVJdGVtIiwiY29udHJvbGxlclBhdGgiLCJqb2luIiwiYmFja2VuZFBhdGgiLCJDT05UUk9MTEVSU19QQVRIIiwiY29udHJvbGxlciIsImN1cnJlbnRQcmVmaXgiLCJyb3V0ZSIsInJvdXRlciIsInByZWZpeCIsIm1pZGRsZXdhcmVzIiwidXNlTWlkZGxld2FyZXMiLCJjb250cm9sbGVycyIsImNhc3RBcnJheSIsImZvckVhY2giLCJtb2R1bGVDb250cm9sbGVyIiwiY29udHJvbGxlckZpbGUiLCJpc0NvbnRyb2xsZXIiLCJhY3Rpb25OYW1lIiwiYWN0aW9uIiwiaHR0cE1ldGhvZCIsIl9fbWV0YUh0dHBNZXRob2QiLCJzdWJSb3V0ZSIsImVuc3VyZVN0YXJ0c1dpdGgiLCJfX21ldGFSb3V0ZSIsImtlYmFiQ2FzZSIsImJpbmRBY3Rpb24iLCJiaW5kIiwiZWFjaCIsIm1ldGhvZCIsIkFMTE9XRURfSFRUUF9NRVRIT0RTIiwiaGFzIiwiYWRkUm91dGUiLCJfX21ldGFNaWRkbGV3YXJlcyIsImNvbmNhdCIsImFkZFJvdXRlciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQSxHQUFHLEVBQUVDLE9BQVY7QUFBbUJDLEVBQUFBO0FBQW5CLElBQTRCSixPQUFPLENBQUMsWUFBRCxDQUF6Qzs7QUFDQSxNQUFNSyxPQUFPLEdBQUdMLE9BQU8sQ0FBQyxpQkFBRCxDQUF2Qjs7QUFDQSxNQUFNTSxNQUFNLEdBQUdOLE9BQU8sQ0FB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QixRQUFBQSxHQUFHLENBQUNrQyxRQUFKLENBQWF4QixNQUFiLEVBQXFCcUIsTUFBckIsRUFBNkJQLFFBQTdCLEVBQXVDSCxNQUFNLENBQUNjLGlCQUFQLEdBQ25DZCxNQUFNLENBQUNjLGlCQUFQLENBQXlCQyxNQUF6QixDQUFnQyxDQUFDUixVQUFELENBQWhDLENBRG1DLEdBRW5DQSxVQUZKO0FBR0gsT0FYRDtBQVlIOztBQUFBO0FBQ0osR0F4Q0Q7QUEwQ0E1QixFQUFBQSxHQUFHLENBQUNxQyxTQUFKLENBQWMzQixNQUFkO0FBQ0gsQ0FoRUQiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHsgXywgdXJsOiB1cmxVdGlsLCB0ZXh0IH0gPSByZXF1aXJlKCdAZ2VueC9qdWx5Jyk7XG5jb25zdCBMaXRlcmFsID0gcmVxdWlyZSgnLi4vZW51bS9MaXRlcmFsJyk7XG5jb25zdCBSb3V0ZXIgPSByZXF1aXJlKCdAa29hL3JvdXRlcicpO1xuY29uc3QgeyBJbnZhbGlkQ29uZmlndXJhdGlvbiB9ID0gcmVxdWlyZSgnQGdlbngvZXJyb3InKTtcblxuLyoqXG4gKiBNb2R1bGUgcm91dGVyIGZvciBtb3VudGluZyBhIHNwZWNpZmljIGNvbnRyb2xsZXIuXG4gKiBAbW9kdWxlIFJvdXRlcl9Nb2R1bGVcbiAqL1xuXG4vKipcbiAqIENyZWF0ZSBhIG1vZHVsZS1iYXNlZCByb3V0ZXIuIFxuICogQHBhcmFtIHtSb3V0YWJsZX0gYXBwXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVJvdXRlIFxuICogQHBhcmFtIHsqfSBtb2R1bGVJdGVtIFxuICogQGV4YW1wbGVcbiAqICAgJzxiYXNlIHBhdGg+JzogeyAgICBcbiAqICAgICAgIG1vZHVsZToge1xuICogICAgICAgICAgIG1pZGRsZXdhcmVzOiBcbiAqICAgICAgICAgICBjb250cm9sbGVyOiBcbiAqICAgICAgIH1cbiAqICAgfVxuICpcbiAqICAgJzxiYXNlIHBhdGg+JzogeyAgICBcbiAqICAgICAgIG1vZHVsZTogXCJjb250cm9sbGVyXCJcbiAqICAgfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcHAsIGJhc2VSb3V0ZSwgbW9kdWxlSXRlbSkge1xuICAgIGxldCBjb250cm9sbGVyUGF0aCA9IHBhdGguam9pbihhcHAuYmFja2VuZFBhdGgsIExpdGVyYWwuQ09OVFJPTExFUlNfUEFUSCk7ICAgXG5cbiAgICBpZiAodHlwZW9mIG1vZHVsZUl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIFsgJ2NvbnRyb2xsZXJOYW1lJyBdXG4gICAgICAgIG1vZHVsZUl0ZW0gPSB7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY29udHJvbGxlcjogbW9kdWxlSXRlbVxuICAgICAgICB9O1xuICAgIH0gICAgXG5cbiAgICBsZXQgY3VycmVudFByZWZpeCA9IHVybFV0aWwuam9pbihiYXNlUm91dGUsIG1vZHVsZUl0ZW0ucm91dGUgfHwgJy8nKTtcbiAgICBsZXQgcm91dGVyID0gY3VycmVudFByZWZpeCA9PT0gJy8nID8gbmV3IFJvdXRlcigpIDogbmV3IFJvdXRlcih7cHJlZml4OiBjdXJyZW50UHJlZml4fSk7XG4gICAgXG5cbiAgICBpZiAobW9kdWxlSXRlbS5taWRkbGV3YXJlcykgeyAgICAgICAgICAgIFxuICAgICAgICAvL21vZHVsZS13aWRlIG1pZGRsZXdhcmVzICAgICAgIFxuICAgICAgICBhcHAudXNlTWlkZGxld2FyZXMocm91dGVyLCBtb2R1bGVJdGVtLm1pZGRsZXdhcmVzKTtcbiAgICB9IFxuXG4gICAgY29uc3QgY29udHJvbGxlcnMgPSBfLmNhc3RBcnJheShtb2R1bGVJdGVtLmNvbnRyb2xsZXIpO1xuXG4gICAgY29udHJvbGxlcnMuZm9yRWFjaChtb2R1bGVDb250cm9sbGVyID0+IHtcbiAgICAgICAgbGV0IGNvbnRyb2xsZXJGaWxlID0gcGF0aC5qb2luKGNvbnRyb2xsZXJQYXRoLCBtb2R1bGVDb250cm9sbGVyICsgJy5qcycpO1xuICAgICAgICBsZXQgY29udHJvbGxlcjtcblxuICAgICAgICBjb250cm9sbGVyID0gcmVxdWlyZShjb250cm9sbGVyRmlsZSk7XG4gICAgICAgIGxldCBpc0NvbnRyb2xsZXIgPSBmYWxzZTtcblxuICAgICAgICBpZiAodHlwZW9mIGNvbnRyb2xsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIgPSBuZXcgY29udHJvbGxlcihhcHApO1xuICAgICAgICAgICAgaXNDb250cm9sbGVyID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICBmb3IgKGxldCBhY3Rpb25OYW1lIGluIGNvbnRyb2xsZXIpIHsgICAgICAgIFxuICAgICAgICAgICAgbGV0IGFjdGlvbiA9IGNvbnRyb2xsZXJbYWN0aW9uTmFtZV07ICAgIFxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gIT09ICdmdW5jdGlvbicpIGNvbnRpbnVlOyAgICAgICAgICAgIFxuXG4gICAgICAgICAgICBsZXQgaHR0cE1ldGhvZCA9IF8uY2FzdEFycmF5KGFjdGlvbi5fX21ldGFIdHRwTWV0aG9kIHx8ICdnZXQnKTsgICAgICAgICAgICBcbiAgICAgICAgICAgIGxldCBzdWJSb3V0ZSA9IHRleHQuZW5zdXJlU3RhcnRzV2l0aChhY3Rpb24uX19tZXRhUm91dGUgfHwgXy5rZWJhYkNhc2UoYWN0aW9uTmFtZSksICcvJyk7XG5cbiAgICAgICAgICAgIGxldCBiaW5kQWN0aW9uO1xuXG4gICAgICAgICAgICBpZiAoaXNDb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgYmluZEFjdGlvbiA9IGFjdGlvbi5iaW5kKGNvbnRyb2xsZXIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBiaW5kQWN0aW9uID0gYWN0aW9uO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLmVhY2goaHR0cE1ldGhvZCwgbWV0aG9kID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIUxpdGVyYWwuQUxMT1dFRF9IVFRQX01FVEhPRFMuaGFzKG1ldGhvZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1Vuc3VwcG9ydGVkIGh0dHAgbWV0aG9kOiAnICsgbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgICAgICAgICAgICAgYHJvdXRpbmcuJHtiYXNlUm91dGV9Lm1vZHVsZXMgJHttb2R1bGVJdGVtLmNvbnRyb2xsZXJ9LiR7YWN0aW9uTmFtZX1gKTtcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICBcblxuICAgICAgICAgICAgICAgIGFwcC5hZGRSb3V0ZShyb3V0ZXIsIG1ldGhvZCwgc3ViUm91dGUsIGFjdGlvbi5fX21ldGFNaWRkbGV3YXJlcyA/IFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24uX19tZXRhTWlkZGxld2FyZXMuY29uY2F0KFtiaW5kQWN0aW9uXSkgOiBcbiAgICAgICAgICAgICAgICAgICAgYmluZEFjdGlvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9KTsgICAgXG5cbiAgICBhcHAuYWRkUm91dGVyKHJvdXRlcik7XG59OyJdfQ==