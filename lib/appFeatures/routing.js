"use strict";

require("source-map-support/register");

const {
  Feature
} = require("..").enum;

const {
  _,
  eachAsync_
} = require("rk-utils");

module.exports = {
  type: Feature.PLUGIN,
  load_: (app, routes) => {
    app.on("after:" + Feature.PLUGIN, waitFor => {
      waitFor.push(eachAsync_(routes, async (routersConfig, route) => {
        if (_.isPlainObject(routersConfig)) {
          return eachAsync_(routersConfig, async (options, type) => {
            let loader_ = require("../routers/" + type);

            app.log("verbose", `A "${type}" router is created at "${route}" in app [${app.name}].`);
            return loader_(app, route, options);
          });
        } else {
          let mainRoute = "/",
              baseRoute = route;
          let pos = route.indexOf(":/");

          if (pos !== -1) {
            mainRoute = route.substring(0, pos + 2);
            baseRoute = route.substring(pos + 1);
          } else if (Array.isArray(routersConfig)) {
            mainRoute = "all:/";
          }

          let rules = {
            [mainRoute]: routersConfig
          };

          let loader_ = require("../routers/rule");

          app.log("verbose", `A "rule" router is created at "${baseRoute}" in app [${app.name}].`);
          return loader_(app, baseRoute, {
            rules: rules
          });
        }
      }));
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcHBGZWF0dXJlcy9yb3V0aW5nLmpzIl0sIm5hbWVzIjpbIkZlYXR1cmUiLCJyZXF1aXJlIiwiZW51bSIsIl8iLCJlYWNoQXN5bmNfIiwibW9kdWxlIiwiZXhwb3J0cyIsInR5cGUiLCJQTFVHSU4iLCJsb2FkXyIsImFwcCIsInJvdXRlcyIsIm9uIiwid2FpdEZvciIsInB1c2giLCJyb3V0ZXJzQ29uZmlnIiwicm91dGUiLCJpc1BsYWluT2JqZWN0Iiwib3B0aW9ucyIsImxvYWRlcl8iLCJsb2ciLCJuYW1lIiwibWFpblJvdXRlIiwiYmFzZVJvdXRlIiwicG9zIiwiaW5kZXhPZiIsInN1YnN0cmluZyIsIkFycmF5IiwiaXNBcnJheSIsInJ1bGVzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQU9BLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFjQyxPQUFPLENBQUMsSUFBRCxDQUFQLENBQWNDLElBQWxDOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQTtBQUFMLElBQW9CSCxPQUFPLENBQUMsVUFBRCxDQUFqQzs7QUFFQUksTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBS2JDLEVBQUFBLElBQUksRUFBRVAsT0FBTyxDQUFDUSxNQUxEO0FBYWJDLEVBQUFBLEtBQUssRUFBRSxDQUFDQyxHQUFELEVBQU1DLE1BQU4sS0FBaUI7QUFDcEJELElBQUFBLEdBQUcsQ0FBQ0UsRUFBSixDQUFPLFdBQVdaLE9BQU8sQ0FBQ1EsTUFBMUIsRUFBbUNLLE9BQUQsSUFBYTtBQUMzQ0EsTUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQ0lWLFVBQVUsQ0FBQ08sTUFBRCxFQUFTLE9BQU9JLGFBQVAsRUFBc0JDLEtBQXRCLEtBQWdDO0FBQy9DLFlBQUliLENBQUMsQ0FBQ2MsYUFBRixDQUFnQkYsYUFBaEIsQ0FBSixFQUFvQztBQUNoQyxpQkFBT1gsVUFBVSxDQUFDVyxhQUFELEVBQWdCLE9BQU9HLE9BQVAsRUFBZ0JYLElBQWhCLEtBQXlCO0FBQ3RELGdCQUFJWSxPQUFPLEdBQUdsQixPQUFPLENBQUMsZ0JBQWdCTSxJQUFqQixDQUFyQjs7QUFFQUcsWUFBQUEsR0FBRyxDQUFDVSxHQUFKLENBQVEsU0FBUixFQUFvQixNQUFLYixJQUFLLDJCQUEwQlMsS0FBTSxhQUFZTixHQUFHLENBQUNXLElBQUssSUFBbkY7QUFFQSxtQkFBT0YsT0FBTyxDQUFDVCxHQUFELEVBQU1NLEtBQU4sRUFBYUUsT0FBYixDQUFkO0FBQ0gsV0FOZ0IsQ0FBakI7QUFPSCxTQVJELE1BUU87QUFFSCxjQUFJSSxTQUFTLEdBQUcsR0FBaEI7QUFBQSxjQUNJQyxTQUFTLEdBQUdQLEtBRGhCO0FBRUEsY0FBSVEsR0FBRyxHQUFHUixLQUFLLENBQUNTLE9BQU4sQ0FBYyxJQUFkLENBQVY7O0FBRUEsY0FBSUQsR0FBRyxLQUFLLENBQUMsQ0FBYixFQUFnQjtBQUNaRixZQUFBQSxTQUFTLEdBQUdOLEtBQUssQ0FBQ1UsU0FBTixDQUFnQixDQUFoQixFQUFtQkYsR0FBRyxHQUFHLENBQXpCLENBQVo7QUFDQUQsWUFBQUEsU0FBUyxHQUFHUCxLQUFLLENBQUNVLFNBQU4sQ0FBZ0JGLEdBQUcsR0FBRyxDQUF0QixDQUFaO0FBQ0gsV0FIRCxNQUdPLElBQUlHLEtBQUssQ0FBQ0MsT0FBTixDQUFjYixhQUFkLENBQUosRUFBa0M7QUFFckNPLFlBQUFBLFNBQVMsR0FBRyxPQUFaO0FBQ0g7O0FBRUQsY0FBSU8sS0FBSyxHQUFHO0FBQ1IsYUFBQ1AsU0FBRCxHQUFhUDtBQURMLFdBQVo7O0FBSUEsY0FBSUksT0FBTyxHQUFHbEIsT0FBTyxDQUFDLGlCQUFELENBQXJCOztBQUNBUyxVQUFBQSxHQUFHLENBQUNVLEdBQUosQ0FBUSxTQUFSLEVBQW9CLGtDQUFpQ0csU0FBVSxhQUFZYixHQUFHLENBQUNXLElBQUssSUFBcEY7QUFFQSxpQkFBT0YsT0FBTyxDQUFDVCxHQUFELEVBQU1hLFNBQU4sRUFBaUI7QUFBRU0sWUFBQUEsS0FBSyxFQUFFQTtBQUFULFdBQWpCLENBQWQ7QUFDSDtBQUNKLE9BaENTLENBRGQ7QUFtQ0gsS0FwQ0Q7QUFxQ0g7QUFuRFksQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBFbmFibGUgd2ViIHJlcXVlc3Qgcm91dGluZy5cbiAqIEBtb2R1bGUgRmVhdHVyZV9Sb3V0aW5nXG4gKi9cblxuY29uc3QgeyBGZWF0dXJlIH0gPSByZXF1aXJlKFwiLi5cIikuZW51bTtcbmNvbnN0IHsgXywgZWFjaEFzeW5jXyB9ID0gcmVxdWlyZShcInJrLXV0aWxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvKipcbiAgICAgKiBUaGlzIGZlYXR1cmUgaXMgbG9hZGVkIGF0IHJlYWR5IChmaW5hbCkgc3RhZ2UuXG4gICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAqL1xuICAgIHR5cGU6IEZlYXR1cmUuUExVR0lOLFxuXG4gICAgLyoqXG4gICAgICogTG9hZCB0aGUgZmVhdHVyZS5cbiAgICAgKiBAcGFyYW0ge1JvdXRhYmxlfSBhcHAgLSBUaGUgYXBwIG1vZHVsZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcm91dGVzIC0gUm91dGVzIGFuZCBjb25maWd1cmF0aW9uXG4gICAgICogQHJldHVybnMge1Byb21pc2UuPCo+fVxuICAgICAqL1xuICAgIGxvYWRfOiAoYXBwLCByb3V0ZXMpID0+IHtcbiAgICAgICAgYXBwLm9uKFwiYWZ0ZXI6XCIgKyBGZWF0dXJlLlBMVUdJTiwgKHdhaXRGb3IpID0+IHtcbiAgICAgICAgICAgIHdhaXRGb3IucHVzaChcbiAgICAgICAgICAgICAgICBlYWNoQXN5bmNfKHJvdXRlcywgYXN5bmMgKHJvdXRlcnNDb25maWcsIHJvdXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLmlzUGxhaW5PYmplY3Qocm91dGVyc0NvbmZpZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlYWNoQXN5bmNfKHJvdXRlcnNDb25maWcsIGFzeW5jIChvcHRpb25zLCB0eXBlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxvYWRlcl8gPSByZXF1aXJlKFwiLi4vcm91dGVycy9cIiArIHR5cGUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwLmxvZyhcInZlcmJvc2VcIiwgYEEgXCIke3R5cGV9XCIgcm91dGVyIGlzIGNyZWF0ZWQgYXQgXCIke3JvdXRlfVwiIGluIGFwcCBbJHthcHAubmFtZX1dLmApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvYWRlcl8oYXBwLCByb3V0ZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICdyb3V0ZSc6ICdtZXRob2Q6L3BhdGgnXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWFpblJvdXRlID0gXCIvXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFzZVJvdXRlID0gcm91dGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcG9zID0gcm91dGUuaW5kZXhPZihcIjovXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1haW5Sb3V0ZSA9IHJvdXRlLnN1YnN0cmluZygwLCBwb3MgKyAyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlUm91dGUgPSByb3V0ZS5zdWJzdHJpbmcocG9zICsgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocm91dGVyc0NvbmZpZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FsbCBoYW5kbGVkIGJ5IG1pZGRsZXdhcmUgY2hhaW5zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFpblJvdXRlID0gXCJhbGw6L1wiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcnVsZXMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW21haW5Sb3V0ZV06IHJvdXRlcnNDb25maWcsXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbG9hZGVyXyA9IHJlcXVpcmUoXCIuLi9yb3V0ZXJzL3J1bGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcHAubG9nKFwidmVyYm9zZVwiLCBgQSBcInJ1bGVcIiByb3V0ZXIgaXMgY3JlYXRlZCBhdCBcIiR7YmFzZVJvdXRlfVwiIGluIGFwcCBbJHthcHAubmFtZX1dLmApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9hZGVyXyhhcHAsIGJhc2VSb3V0ZSwgeyBydWxlczogcnVsZXMgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfSxcbn07XG4iXX0=