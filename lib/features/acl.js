"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  eachAsync_
} = require('rk-utils');

const {
  Feature
} = require('..').enum;

const {
  tryRequire
} = require('@genx/app/lib/utils/Helpers');

const Acl = tryRequire('acl');

const {
  InvalidConfiguration
} = require('../utils/Errors');

module.exports = {
  type: Feature.PLUGIN,
  load_: async function (app, config) {
    let backend = config.backend || 'memory';
    let backendType, backendStore;

    if (backend.indexOf('.') > 0) {
      backendType = '';
    }

    switch (backend) {
      case 'memory':
        backendStore = new Acl.memoryBackend();
        break;

      case 'mongodb':
        if (!config.dataSource) {
          throw new InvalidConfiguration('"dataSource" is required for mongodb backend of acl.', app, 'acl.dataSource');
        }

        let mongodb = app.getService(config.dataSource);

        if (!mongodb) {
          throw new InvalidConfiguration(`Data source "${config.dataSource}" not found.`, app, 'acl.dataSource');
        }

        backendStore = new Acl.mongodbBackend((await mongodb.connect_()), config.prefix);
        break;

      case 'redis':
        throw new Error('to be implemented');
        break;

      default:
        throw new InvalidConfiguration('Unsupported acl backend: ' + backend, app, 'acl.backend');
    }

    app.acl = new Acl(backendStore);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mZWF0dXJlcy9hY2wuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJfIiwiZWFjaEFzeW5jXyIsIkZlYXR1cmUiLCJlbnVtIiwidHJ5UmVxdWlyZSIsIkFjbCIsIkludmFsaWRDb25maWd1cmF0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyIsInR5cGUiLCJQTFVHSU4iLCJsb2FkXyIsImFwcCIsImNvbmZpZyIsImJhY2tlbmQiLCJiYWNrZW5kVHlwZSIsImJhY2tlbmRTdG9yZSIsImluZGV4T2YiLCJtZW1vcnlCYWNrZW5kIiwiZGF0YVNvdXJjZSIsIm1vbmdvZGIiLCJnZXRTZXJ2aWNlIiwibW9uZ29kYkJhY2tlbmQiLCJjb25uZWN0XyIsInByZWZpeCIsIkVycm9yIiwiYWNsIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQU9BLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBO0FBQUwsSUFBb0JGLE9BQU8sQ0FBQyxVQUFELENBQWpDOztBQUNBLE1BQU07QUFBRUcsRUFBQUE7QUFBRixJQUFjSCxPQUFPLENBQUMsSUFBRCxDQUFQLENBQWNJLElBQWxDOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFpQkwsT0FBTyxDQUFDLDZCQUFELENBQTlCOztBQUNBLE1BQU1NLEdBQUcsR0FBR0QsVUFBVSxDQUFDLEtBQUQsQ0FBdEI7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQTtBQUFGLElBQTJCUCxPQUFPLENBQUMsaUJBQUQsQ0FBeEM7O0FBRUFRLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQU1iQyxFQUFBQSxJQUFJLEVBQUVQLE9BQU8sQ0FBQ1EsTUFORDtBQXVCYkMsRUFBQUEsS0FBSyxFQUFFLGdCQUFnQkMsR0FBaEIsRUFBcUJDLE1BQXJCLEVBQTZCO0FBQ2hDLFFBQUlDLE9BQU8sR0FBR0QsTUFBTSxDQUFDQyxPQUFQLElBQWtCLFFBQWhDO0FBQ0EsUUFBSUMsV0FBSixFQUFpQkMsWUFBakI7O0FBRUEsUUFBSUYsT0FBTyxDQUFDRyxPQUFSLENBQWdCLEdBQWhCLElBQXVCLENBQTNCLEVBQThCO0FBQzFCRixNQUFBQSxXQUFXLEdBQUcsRUFBZDtBQUNIOztBQUVELFlBQVFELE9BQVI7QUFDSSxXQUFLLFFBQUw7QUFDQUUsUUFBQUEsWUFBWSxHQUFHLElBQUlYLEdBQUcsQ0FBQ2EsYUFBUixFQUFmO0FBQ0E7O0FBRUEsV0FBSyxTQUFMO0FBQ0EsWUFBSSxDQUFDTCxNQUFNLENBQUNNLFVBQVosRUFBd0I7QUFDcEIsZ0JBQU0sSUFBSWIsb0JBQUosQ0FBeUIsc0RBQXpCLEVBQWlGTSxHQUFqRixFQUFzRixnQkFBdEYsQ0FBTjtBQUNIOztBQUVELFlBQUlRLE9BQU8sR0FBR1IsR0FBRyxDQUFDUyxVQUFKLENBQWVSLE1BQU0sQ0FBQ00sVUFBdEIsQ0FBZDs7QUFDQSxZQUFJLENBQUNDLE9BQUwsRUFBYztBQUNWLGdCQUFNLElBQUlkLG9CQUFKLENBQTBCLGdCQUFlTyxNQUFNLENBQUNNLFVBQVcsY0FBM0QsRUFBMEVQLEdBQTFFLEVBQStFLGdCQUEvRSxDQUFOO0FBQ0g7O0FBRURJLFFBQUFBLFlBQVksR0FBRyxJQUFJWCxHQUFHLENBQUNpQixjQUFSLEVBQXVCLE1BQU1GLE9BQU8sQ0FBQ0csUUFBUixFQUE3QixHQUFpRFYsTUFBTSxDQUFDVyxNQUF4RCxDQUFmO0FBQ0E7O0FBRUEsV0FBSyxPQUFMO0FBQ0EsY0FBTSxJQUFJQyxLQUFKLENBQVUsbUJBQVYsQ0FBTjtBQUNBOztBQUVBO0FBQ0EsY0FBTSxJQUFJbkIsb0JBQUosQ0FBeUIsOEJBQThCUSxPQUF2RCxFQUFnRUYsR0FBaEUsRUFBcUUsYUFBckUsQ0FBTjtBQXZCSjs7QUEwQkFBLElBQUFBLEdBQUcsQ0FBQ2MsR0FBSixHQUFVLElBQUlyQixHQUFKLENBQVFXLFlBQVIsQ0FBVjtBQUNIO0FBMURZLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogRW5hYmxlIGFjbCBmZWF0dXJlXG4gKiBAbW9kdWxlIEZlYXR1cmVfQWNsXG4gKi9cblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHsgXywgZWFjaEFzeW5jXyB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IHsgRmVhdHVyZSB9ID0gcmVxdWlyZSgnLi4nKS5lbnVtO1xuY29uc3QgeyB0cnlSZXF1aXJlIH0gPSByZXF1aXJlKCdAZ2VueC9hcHAvbGliL3V0aWxzL0hlbHBlcnMnKTtcbmNvbnN0IEFjbCA9IHRyeVJlcXVpcmUoJ2FjbCcpO1xuY29uc3QgeyBJbnZhbGlkQ29uZmlndXJhdGlvbiB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvRXJyb3JzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBmZWF0dXJlIGlzIGxvYWRlZCBhdCBzZXJ2aWNlIHN0YWdlXG4gICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAqL1xuICAgIHR5cGU6IEZlYXR1cmUuUExVR0lOLFxuXG4gICAgLyoqXG4gICAgICogTG9hZCB0aGUgZmVhdHVyZVxuICAgICAqIEBwYXJhbSB7Um91dGFibGV9IGFwcCAtIFRoZSBhcHAgbW9kdWxlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgLSBBY2wgc2V0dGluZ3NcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gY29uZmlnLmJhY2tlbmQgLSBCYWNrZW5kIHN0b3JlIHR5cGUgb2YgYWNsLCBtZW1vcnksIG1vbmdvZGIsIHJlZGlzXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtjb25maWcuZGF0YVNvdXJjZV0gLSBTdG9yZSB0eXBlIG9mIGFjbFxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbY29uZmlnLnByZWZpeF0gLSBTdG9yZSBvcHRpb25zXG4gICAgICogQHJldHVybnMge1Byb21pc2UuPCo+fVxuICAgICAqIFxuICAgICAqIEBleGFtcGxlXG4gICAgICogXG4gICAgICogYWNsOiB7XG4gICAgICogICBiYWNrZW5kOiAnbW9uZ29kYi5kYXRhU291cmNlTmFtZSdcbiAgICAgKiB9XG4gICAgICovXG4gICAgbG9hZF86IGFzeW5jIGZ1bmN0aW9uIChhcHAsIGNvbmZpZykge1xuICAgICAgICBsZXQgYmFja2VuZCA9IGNvbmZpZy5iYWNrZW5kIHx8ICdtZW1vcnknO1xuICAgICAgICBsZXQgYmFja2VuZFR5cGUsIGJhY2tlbmRTdG9yZTtcblxuICAgICAgICBpZiAoYmFja2VuZC5pbmRleE9mKCcuJykgPiAwKSB7XG4gICAgICAgICAgICBiYWNrZW5kVHlwZSA9ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChiYWNrZW5kKSB7XG4gICAgICAgICAgICBjYXNlICdtZW1vcnknOlxuICAgICAgICAgICAgYmFja2VuZFN0b3JlID0gbmV3IEFjbC5tZW1vcnlCYWNrZW5kKCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnbW9uZ29kYic6XG4gICAgICAgICAgICBpZiAoIWNvbmZpZy5kYXRhU291cmNlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKCdcImRhdGFTb3VyY2VcIiBpcyByZXF1aXJlZCBmb3IgbW9uZ29kYiBiYWNrZW5kIG9mIGFjbC4nLCBhcHAsICdhY2wuZGF0YVNvdXJjZScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgbW9uZ29kYiA9IGFwcC5nZXRTZXJ2aWNlKGNvbmZpZy5kYXRhU291cmNlKTtcbiAgICAgICAgICAgIGlmICghbW9uZ29kYikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihgRGF0YSBzb3VyY2UgXCIke2NvbmZpZy5kYXRhU291cmNlfVwiIG5vdCBmb3VuZC5gLCBhcHAsICdhY2wuZGF0YVNvdXJjZScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBiYWNrZW5kU3RvcmUgPSBuZXcgQWNsLm1vbmdvZGJCYWNrZW5kKGF3YWl0IG1vbmdvZGIuY29ubmVjdF8oKSwgY29uZmlnLnByZWZpeCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAncmVkaXMnOlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd0byBiZSBpbXBsZW1lbnRlZCcpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oJ1Vuc3VwcG9ydGVkIGFjbCBiYWNrZW5kOiAnICsgYmFja2VuZCwgYXBwLCAnYWNsLmJhY2tlbmQnKTtcbiAgICAgICAgfSAgICAgICAgXG4gICAgXG4gICAgICAgIGFwcC5hY2wgPSBuZXcgQWNsKGJhY2tlbmRTdG9yZSk7ICAgICAgIFxuICAgIH1cbn07Il19