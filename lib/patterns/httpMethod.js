"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const _ = Util._;

function httpMethod(method, middlewares) {
  if (arguments.length === 3) {
    return httpMethod('get')(...Array.prototype.slice.call(arguments));
  }

  return function (target, name, descriptor) {
    let targetFunction,
        isHof = false;

    if (arguments.length === 1 && typeof target === 'function') {
      targetFunction = target;
      isHof = true;
    } else if (descriptor && descriptor.value) {
      targetFunction = descriptor.value;
      descriptor.enumerable = true;
    } else {
      throw new Error('Unsupported scenario.');
    }

    if (targetFunction) {
      if (typeof method === 'string') {
        let pos = method.indexOf(':/');

        if (pos !== -1) {
          if (pos === 0) {
            throw new Error('Invalid httpMethod decorator param: ' + method);
          }

          targetFunction.__metaRoute = method.substr(pos + 1);
          method = method.substr(0, pos).toLocaleLowerCase();
        }
      } else {
        method = 'get';
      }

      targetFunction.__metaHttpMethod = method;

      if (middlewares) {
        if (_.isPlainObject(middlewares)) {
          targetFunction.__metaMiddlewares = _.map(middlewares, (options, name) => ({
            name,
            options
          }));
        } else {
          targetFunction.__metaMiddlewares = _.castArray(middlewares);
        }
      }
    }

    return isHof ? targetFunction : descriptor;
  };
}

module.exports = httpMethod;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXR0ZXJucy9odHRwTWV0aG9kLmpzIl0sIm5hbWVzIjpbIlV0aWwiLCJyZXF1aXJlIiwiXyIsImh0dHBNZXRob2QiLCJtZXRob2QiLCJtaWRkbGV3YXJlcyIsImFyZ3VtZW50cyIsImxlbmd0aCIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwidGFyZ2V0IiwibmFtZSIsImRlc2NyaXB0b3IiLCJ0YXJnZXRGdW5jdGlvbiIsImlzSG9mIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiRXJyb3IiLCJwb3MiLCJpbmRleE9mIiwiX19tZXRhUm91dGUiLCJzdWJzdHIiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsIl9fbWV0YUh0dHBNZXRob2QiLCJpc1BsYWluT2JqZWN0IiwiX19tZXRhTWlkZGxld2FyZXMiLCJtYXAiLCJvcHRpb25zIiwiY2FzdEFycmF5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQXBCOztBQUNBLE1BQU1DLENBQUMsR0FBR0YsSUFBSSxDQUFDRSxDQUFmOztBQUVBLFNBQVNDLFVBQVQsQ0FBb0JDLE1BQXBCLEVBQTRCQyxXQUE1QixFQUF5QztBQUNyQyxNQUFJQyxTQUFTLENBQUNDLE1BQVYsS0FBcUIsQ0FBekIsRUFBNEI7QUFDeEIsV0FBT0osVUFBVSxDQUFDLEtBQUQsQ0FBVixDQUFrQixHQUFHSyxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQkwsU0FBM0IsQ0FBckIsQ0FBUDtBQUNIOztBQUVELFNBQU8sVUFBVU0sTUFBVixFQUFrQkMsSUFBbEIsRUFBd0JDLFVBQXhCLEVBQW9DO0FBQ3ZDLFFBQUlDLGNBQUo7QUFBQSxRQUFvQkMsS0FBSyxHQUFHLEtBQTVCOztBQUVBLFFBQUlWLFNBQVMsQ0FBQ0MsTUFBVixLQUFxQixDQUFyQixJQUEwQixPQUFPSyxNQUFQLEtBQWtCLFVBQWhELEVBQTREO0FBQ3hERyxNQUFBQSxjQUFjLEdBQUdILE1BQWpCO0FBQ0FJLE1BQUFBLEtBQUssR0FBRyxJQUFSO0FBQ0gsS0FIRCxNQUdPLElBQUlGLFVBQVUsSUFBSUEsVUFBVSxDQUFDRyxLQUE3QixFQUFvQztBQUN2Q0YsTUFBQUEsY0FBYyxHQUFHRCxVQUFVLENBQUNHLEtBQTVCO0FBQ0FILE1BQUFBLFVBQVUsQ0FBQ0ksVUFBWCxHQUF3QixJQUF4QjtBQUNILEtBSE0sTUFHQTtBQUNILFlBQU0sSUFBSUMsS0FBSixDQUFVLHVCQUFWLENBQU47QUFDSDs7QUFFRCxRQUFJSixjQUFKLEVBQW9CO0FBRWhCLFVBQUksT0FBT1gsTUFBUCxLQUFrQixRQUF0QixFQUFnQztBQUM1QixZQUFJZ0IsR0FBRyxHQUFHaEIsTUFBTSxDQUFDaUIsT0FBUCxDQUFlLElBQWYsQ0FBVjs7QUFFQSxZQUFJRCxHQUFHLEtBQUssQ0FBQyxDQUFiLEVBQWdCO0FBQ1osY0FBSUEsR0FBRyxLQUFLLENBQVosRUFBZTtBQUNYLGtCQUFNLElBQUlELEtBQUosQ0FBVSx5Q0FBeUNmLE1BQW5ELENBQU47QUFDSDs7QUFLRFcsVUFBQUEsY0FBYyxDQUFDTyxXQUFmLEdBQTZCbEIsTUFBTSxDQUFDbUIsTUFBUCxDQUFjSCxHQUFHLEdBQUcsQ0FBcEIsQ0FBN0I7QUFDQWhCLFVBQUFBLE1BQU0sR0FBR0EsTUFBTSxDQUFDbUIsTUFBUCxDQUFjLENBQWQsRUFBaUJILEdBQWpCLEVBQXNCSSxpQkFBdEIsRUFBVDtBQUNIO0FBQ0osT0FkRCxNQWNPO0FBQ0hwQixRQUFBQSxNQUFNLEdBQUcsS0FBVDtBQUNIOztBQUVEVyxNQUFBQSxjQUFjLENBQUNVLGdCQUFmLEdBQWtDckIsTUFBbEM7O0FBRUEsVUFBSUMsV0FBSixFQUFpQjtBQUNiLFlBQUlILENBQUMsQ0FBQ3dCLGFBQUYsQ0FBZ0JyQixXQUFoQixDQUFKLEVBQWtDO0FBQzlCVSxVQUFBQSxjQUFjLENBQUNZLGlCQUFmLEdBQW1DekIsQ0FBQyxDQUFDMEIsR0FBRixDQUFNdkIsV0FBTixFQUFtQixDQUFDd0IsT0FBRCxFQUFVaEIsSUFBVixNQUFvQjtBQUFFQSxZQUFBQSxJQUFGO0FBQVFnQixZQUFBQTtBQUFSLFdBQXBCLENBQW5CLENBQW5DO0FBQ0gsU0FGRCxNQUVPO0FBQ0hkLFVBQUFBLGNBQWMsQ0FBQ1ksaUJBQWYsR0FBbUN6QixDQUFDLENBQUM0QixTQUFGLENBQVl6QixXQUFaLENBQW5DO0FBQ0g7QUFDSjtBQUNKOztBQUVELFdBQU9XLEtBQUssR0FBR0QsY0FBSCxHQUFvQkQsVUFBaEM7QUFDSCxHQTdDRDtBQThDSDs7QUFFRGlCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjdCLFVBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IFV0aWwgPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgXyA9IFV0aWwuXztcblxuZnVuY3Rpb24gaHR0cE1ldGhvZChtZXRob2QsIG1pZGRsZXdhcmVzKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgcmV0dXJuIGh0dHBNZXRob2QoJ2dldCcpKC4uLkFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBuYW1lLCBkZXNjcmlwdG9yKSB7XG4gICAgICAgIGxldCB0YXJnZXRGdW5jdGlvbiwgaXNIb2YgPSBmYWxzZTtcbiAgICBcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGFyZ2V0RnVuY3Rpb24gPSB0YXJnZXQ7XG4gICAgICAgICAgICBpc0hvZiA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlKSB7XG4gICAgICAgICAgICB0YXJnZXRGdW5jdGlvbiA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgICAgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBzY2VuYXJpby4nKTtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBpZiAodGFyZ2V0RnVuY3Rpb24pIHtcbiAgICBcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWV0aG9kID09PSAnc3RyaW5nJykgeyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsZXQgcG9zID0gbWV0aG9kLmluZGV4T2YoJzovJyk7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKHBvcyAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvcyA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGh0dHBNZXRob2QgZGVjb3JhdG9yIHBhcmFtOiAnICsgbWV0aG9kKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBsaWtlIGdldDovLCBvciBwb3N0Oi9cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy9vdmVycmlkZSBhY3Rpb25OYW1lIGFzIHJvdXRlXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEZ1bmN0aW9uLl9fbWV0YVJvdXRlID0gbWV0aG9kLnN1YnN0cihwb3MgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kID0gbWV0aG9kLnN1YnN0cigwLCBwb3MpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtZXRob2QgPSAnZ2V0JztcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHRhcmdldEZ1bmN0aW9uLl9fbWV0YUh0dHBNZXRob2QgPSBtZXRob2Q7ICAgICAgICAgICAgXG4gICAgXG4gICAgICAgICAgICBpZiAobWlkZGxld2FyZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KG1pZGRsZXdhcmVzKSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRGdW5jdGlvbi5fX21ldGFNaWRkbGV3YXJlcyA9IF8ubWFwKG1pZGRsZXdhcmVzLCAob3B0aW9ucywgbmFtZSkgPT4gKHsgbmFtZSwgb3B0aW9ucyB9KSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RnVuY3Rpb24uX19tZXRhTWlkZGxld2FyZXMgPSBfLmNhc3RBcnJheShtaWRkbGV3YXJlcyk7XG4gICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIFxuICAgICAgICByZXR1cm4gaXNIb2YgPyB0YXJnZXRGdW5jdGlvbiA6IGRlc2NyaXB0b3I7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGh0dHBNZXRob2Q7Il19