"use strict";

require("source-map-support/register");

const http = require('http');

module.exports = (opt, app) => {
  let handler;

  if (opt && opt.customHandler) {
    handler = app.getBackendAction(opt.customHandler);
  }

  return async (ctx, next) => {
    try {
      await next();

      if (ctx.status >= 400) {
        if (ctx.type === 'text/plain') {
          ctx.throw(ctx.status, ctx.body);
        } else {
          ctx.throw(ctx.status);
        }
      }
    } catch (err) {
      ctx.status = typeof err.status === 'number' && err.status >= 100 ? err.status : 500;
      ctx.type = 'application/json';

      if (handler) {
        try {
          ctx.body = await handler(ctx, err);
          ctx.app.emit('error', err, ctx);
          return;
        } catch (error) {
          error.innerError = err;
          err = error;
        }
      }

      ctx.body = {
        error: err.expose && err.message ? err.message : http.STATUS_CODES[ctx.status]
      };
      ctx.app.emit('error', err, ctx);
    }
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlcy9qc29uRXJyb3IuanMiXSwibmFtZXMiOlsiaHR0cCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwib3B0IiwiYXBwIiwiaGFuZGxlciIsImN1c3RvbUhhbmRsZXIiLCJnZXRCYWNrZW5kQWN0aW9uIiwiY3R4IiwibmV4dCIsInN0YXR1cyIsInR5cGUiLCJ0aHJvdyIsImJvZHkiLCJlcnIiLCJlbWl0IiwiZXJyb3IiLCJpbm5lckVycm9yIiwiZXhwb3NlIiwibWVzc2FnZSIsIlNUQVRVU19DT0RFUyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFPQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDM0IsTUFBSUMsT0FBSjs7QUFFQSxNQUFJRixHQUFHLElBQUlBLEdBQUcsQ0FBQ0csYUFBZixFQUE4QjtBQUMxQkQsSUFBQUEsT0FBTyxHQUFHRCxHQUFHLENBQUNHLGdCQUFKLENBQXFCSixHQUFHLENBQUNHLGFBQXpCLENBQVY7QUFDSDs7QUFFRCxTQUFPLE9BQU9FLEdBQVAsRUFBWUMsSUFBWixLQUFxQjtBQUN4QixRQUFJO0FBQ0EsWUFBTUEsSUFBSSxFQUFWOztBQUVBLFVBQUlELEdBQUcsQ0FBQ0UsTUFBSixJQUFjLEdBQWxCLEVBQXVCO0FBQ25CLFlBQUlGLEdBQUcsQ0FBQ0csSUFBSixLQUFhLFlBQWpCLEVBQStCO0FBQzNCSCxVQUFBQSxHQUFHLENBQUNJLEtBQUosQ0FBVUosR0FBRyxDQUFDRSxNQUFkLEVBQXNCRixHQUFHLENBQUNLLElBQTFCO0FBQ0gsU0FGRCxNQUVPO0FBQ0hMLFVBQUFBLEdBQUcsQ0FBQ0ksS0FBSixDQUFVSixHQUFHLENBQUNFLE1BQWQ7QUFDSDtBQUNKO0FBQ0osS0FWRCxDQVVFLE9BQU9JLEdBQVAsRUFBWTtBQUNWTixNQUFBQSxHQUFHLENBQUNFLE1BQUosR0FBYSxPQUFPSSxHQUFHLENBQUNKLE1BQVgsS0FBc0IsUUFBdEIsSUFBa0NJLEdBQUcsQ0FBQ0osTUFBSixJQUFjLEdBQWhELEdBQXNESSxHQUFHLENBQUNKLE1BQTFELEdBQW1FLEdBQWhGO0FBQ0FGLE1BQUFBLEdBQUcsQ0FBQ0csSUFBSixHQUFXLGtCQUFYOztBQUdBLFVBQUlOLE9BQUosRUFBYTtBQUNULFlBQUk7QUFDQUcsVUFBQUEsR0FBRyxDQUFDSyxJQUFKLEdBQVcsTUFBTVIsT0FBTyxDQUFDRyxHQUFELEVBQU1NLEdBQU4sQ0FBeEI7QUFDQU4sVUFBQUEsR0FBRyxDQUFDSixHQUFKLENBQVFXLElBQVIsQ0FBYSxPQUFiLEVBQXNCRCxHQUF0QixFQUEyQk4sR0FBM0I7QUFDQTtBQUNILFNBSkQsQ0FJRSxPQUFPUSxLQUFQLEVBQWM7QUFDWkEsVUFBQUEsS0FBSyxDQUFDQyxVQUFOLEdBQW1CSCxHQUFuQjtBQUNBQSxVQUFBQSxHQUFHLEdBQUdFLEtBQU47QUFDSDtBQUNKOztBQUVEUixNQUFBQSxHQUFHLENBQUNLLElBQUosR0FBVztBQUFFRyxRQUFBQSxLQUFLLEVBQUdGLEdBQUcsQ0FBQ0ksTUFBSixJQUFjSixHQUFHLENBQUNLLE9BQW5CLEdBQThCTCxHQUFHLENBQUNLLE9BQWxDLEdBQTRDcEIsSUFBSSxDQUFDcUIsWUFBTCxDQUFrQlosR0FBRyxDQUFDRSxNQUF0QjtBQUFyRCxPQUFYO0FBQ0FGLE1BQUFBLEdBQUcsQ0FBQ0osR0FBSixDQUFRVyxJQUFSLENBQWEsT0FBYixFQUFzQkQsR0FBdEIsRUFBMkJOLEdBQTNCO0FBQ0g7QUFDSixHQTlCRDtBQStCSCxDQXRDRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEVycm9yIHJlc3BvbnNlIG1pZGRsZXdhcmUgd2l0aCBqc29uXG4gKiBAbW9kdWxlIE1pZGRsZXdhcmVfSnNvbkVycm9yXG4gKi9cblxuY29uc3QgaHR0cCA9IHJlcXVpcmUoJ2h0dHAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAob3B0LCBhcHApID0+IHsgXG4gICAgbGV0IGhhbmRsZXI7XG5cbiAgICBpZiAob3B0ICYmIG9wdC5jdXN0b21IYW5kbGVyKSB7XG4gICAgICAgIGhhbmRsZXIgPSBhcHAuZ2V0QmFja2VuZEFjdGlvbihvcHQuY3VzdG9tSGFuZGxlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFzeW5jIChjdHgsIG5leHQpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IG5leHQoKTtcblxuICAgICAgICAgICAgaWYgKGN0eC5zdGF0dXMgPj0gNDAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKGN0eC50eXBlID09PSAndGV4dC9wbGFpbicpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnRocm93KGN0eC5zdGF0dXMsIGN0eC5ib2R5KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjdHgudGhyb3coY3R4LnN0YXR1cyk7XG4gICAgICAgICAgICAgICAgfSAgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikgeyAgICAgICAgXG4gICAgICAgICAgICBjdHguc3RhdHVzID0gdHlwZW9mIGVyci5zdGF0dXMgPT09ICdudW1iZXInICYmIGVyci5zdGF0dXMgPj0gMTAwID8gZXJyLnN0YXR1cyA6IDUwMDsgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGN0eC50eXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuXG4gICAgICAgICAgICAvLyBhY2NlcHRlZCB0eXBlc1xuICAgICAgICAgICAgaWYgKGhhbmRsZXIpIHsgICAgICBcbiAgICAgICAgICAgICAgICB0cnkgeyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGN0eC5ib2R5ID0gYXdhaXQgaGFuZGxlcihjdHgsIGVycik7ICAgICBcbiAgICAgICAgICAgICAgICAgICAgY3R4LmFwcC5lbWl0KCdlcnJvcicsIGVyciwgY3R4KTsgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IuaW5uZXJFcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgZXJyID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0gICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIGN0eC5ib2R5ID0geyBlcnJvcjogKGVyci5leHBvc2UgJiYgZXJyLm1lc3NhZ2UpID8gZXJyLm1lc3NhZ2UgOiBodHRwLlNUQVRVU19DT0RFU1tjdHguc3RhdHVzXSB9O1xuICAgICAgICAgICAgY3R4LmFwcC5lbWl0KCdlcnJvcicsIGVyciwgY3R4KTtcbiAgICAgICAgfSAgICAgICAgXG4gICAgfSBcbn07ICAgICAgICJdfQ==