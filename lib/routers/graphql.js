"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  fs,
  eachAsync_,
  urlJoin,
  getValueByPath
} = require('rk-utils');

const Router = require('@koa/router');

const HttpCode = require('http-status-codes');

const {
  Helpers: {
    tryRequire
  }
} = require('@genx/app');

const {
  InvalidConfiguration,
  BadRequest,
  NotFound
} = require('../utils/Errors');

const Koa = require('koa');

const mount = require('koa-mount');

module.exports = async (app, baseRoute, options) => {
  const graphqlHTTP = tryRequire('koa-graphql');
  const {
    middlewares,
    schemaProvider,
    ...graphqlOpts
  } = options;

  if (!schemaProvider) {
    throw new InvalidConfiguration('Missing schemaProvider config.', app, `routing.${baseRoute}.graphql.schemaProvider`);
  }

  const schemaFactory = require(path.resolve(app.backendPath, schemaProvider));

  const schemaObj = await schemaFactory(app);

  if (!schemaObj.schema) {
    throw new InvalidConfiguration('The object returned from schemaProvider doesnot contain the schema body.', app, `routing.${baseRoute}.graphql.schemaProvider`);
  }

  graphqlOpts.schema = schemaObj.schema;

  if (schemaObj.rootValue) {
    graphqlOpts.rootValue = schemaObj.rootValue;
  }

  let router = new Koa();

  if (middlewares) {
    app.useMiddlewares(router, middlewares);
  }

  router.use(mount('/', graphqlHTTP(graphqlOpts)));
  app.mountRouter(baseRoute, router);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXJzL2dyYXBocWwuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJfIiwiZnMiLCJlYWNoQXN5bmNfIiwidXJsSm9pbiIsImdldFZhbHVlQnlQYXRoIiwiUm91dGVyIiwiSHR0cENvZGUiLCJIZWxwZXJzIiwidHJ5UmVxdWlyZSIsIkludmFsaWRDb25maWd1cmF0aW9uIiwiQmFkUmVxdWVzdCIsIk5vdEZvdW5kIiwiS29hIiwibW91bnQiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXBwIiwiYmFzZVJvdXRlIiwib3B0aW9ucyIsImdyYXBocWxIVFRQIiwibWlkZGxld2FyZXMiLCJzY2hlbWFQcm92aWRlciIsImdyYXBocWxPcHRzIiwic2NoZW1hRmFjdG9yeSIsInJlc29sdmUiLCJiYWNrZW5kUGF0aCIsInNjaGVtYU9iaiIsInNjaGVtYSIsInJvb3RWYWx1ZSIsInJvdXRlciIsInVzZU1pZGRsZXdhcmVzIiwidXNlIiwibW91bnRSb3V0ZXIiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLENBQUY7QUFBS0MsRUFBQUEsRUFBTDtBQUFTQyxFQUFBQSxVQUFUO0FBQXFCQyxFQUFBQSxPQUFyQjtBQUE4QkMsRUFBQUE7QUFBOUIsSUFBaURMLE9BQU8sQ0FBQyxVQUFELENBQTlEOztBQUNBLE1BQU1NLE1BQU0sR0FBR04sT0FBTyxDQUFDLGFBQUQsQ0FBdEI7O0FBQ0EsTUFBTU8sUUFBUSxHQUFHUCxPQUFPLENBQUMsbUJBQUQsQ0FBeEI7O0FBQ0EsTUFBTTtBQUFFUSxFQUFBQSxPQUFPLEVBQUU7QUFBRUMsSUFBQUE7QUFBRjtBQUFYLElBQThCVCxPQUFPLENBQUMsV0FBRCxDQUEzQzs7QUFDQSxNQUFNO0FBQUVVLEVBQUFBLG9CQUFGO0FBQXdCQyxFQUFBQSxVQUF4QjtBQUFvQ0MsRUFBQUE7QUFBcEMsSUFBaURaLE9BQU8sQ0FBQyxpQkFBRCxDQUE5RDs7QUFDQSxNQUFNYSxHQUFHLEdBQUdiLE9BQU8sQ0FBQyxLQUFELENBQW5COztBQUNBLE1BQU1jLEtBQUssR0FBR2QsT0FBTyxDQUFDLFdBQUQsQ0FBckI7O0FBeUJBZSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsT0FBT0MsR0FBUCxFQUFZQyxTQUFaLEVBQXVCQyxPQUF2QixLQUFtQztBQUNoRCxRQUFNQyxXQUFXLEdBQUdYLFVBQVUsQ0FBQyxhQUFELENBQTlCO0FBRUEsUUFBTTtBQUFFWSxJQUFBQSxXQUFGO0FBQWVDLElBQUFBLGNBQWY7QUFBK0IsT0FBR0M7QUFBbEMsTUFBa0RKLE9BQXhEOztBQUVBLE1BQUksQ0FBQ0csY0FBTCxFQUFxQjtBQUNqQixVQUFNLElBQUlaLG9CQUFKLENBQ0YsZ0NBREUsRUFFRk8sR0FGRSxFQUdELFdBQVVDLFNBQVUseUJBSG5CLENBQU47QUFLSDs7QUFFRCxRQUFNTSxhQUFhLEdBQUd4QixPQUFPLENBQUNELElBQUksQ0FBQzBCLE9BQUwsQ0FBYVIsR0FBRyxDQUFDUyxXQUFqQixFQUE4QkosY0FBOUIsQ0FBRCxDQUE3Qjs7QUFDQSxRQUFNSyxTQUFTLEdBQUcsTUFBTUgsYUFBYSxDQUFDUCxHQUFELENBQXJDOztBQUVBLE1BQUksQ0FBQ1UsU0FBUyxDQUFDQyxNQUFmLEVBQXVCO0FBQ25CLFVBQU0sSUFBSWxCLG9CQUFKLENBQ0YsMEVBREUsRUFFRk8sR0FGRSxFQUdELFdBQVVDLFNBQVUseUJBSG5CLENBQU47QUFLSDs7QUFFREssRUFBQUEsV0FBVyxDQUFDSyxNQUFaLEdBQXFCRCxTQUFTLENBQUNDLE1BQS9COztBQUNBLE1BQUlELFNBQVMsQ0FBQ0UsU0FBZCxFQUF5QjtBQUNyQk4sSUFBQUEsV0FBVyxDQUFDTSxTQUFaLEdBQXdCRixTQUFTLENBQUNFLFNBQWxDO0FBQ0g7O0FBRUQsTUFBSUMsTUFBTSxHQUFHLElBQUlqQixHQUFKLEVBQWI7O0FBRUEsTUFBSVEsV0FBSixFQUFpQjtBQUNiSixJQUFBQSxHQUFHLENBQUNjLGNBQUosQ0FBbUJELE1BQW5CLEVBQTJCVCxXQUEzQjtBQUNIOztBQUVEUyxFQUFBQSxNQUFNLENBQUNFLEdBQVAsQ0FBV2xCLEtBQUssQ0FBQyxHQUFELEVBQU1NLFdBQVcsQ0FBQ0csV0FBRCxDQUFqQixDQUFoQjtBQUNBTixFQUFBQSxHQUFHLENBQUNnQixXQUFKLENBQWdCZixTQUFoQixFQUEyQlksTUFBM0I7QUFDSCxDQXJDRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgeyBfLCBmcywgZWFjaEFzeW5jXywgdXJsSm9pbiwgZ2V0VmFsdWVCeVBhdGggfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCBSb3V0ZXIgPSByZXF1aXJlKCdAa29hL3JvdXRlcicpO1xuY29uc3QgSHR0cENvZGUgPSByZXF1aXJlKCdodHRwLXN0YXR1cy1jb2RlcycpO1xuY29uc3QgeyBIZWxwZXJzOiB7IHRyeVJlcXVpcmUgfSB9ID0gcmVxdWlyZSgnQGdlbngvYXBwJyk7XG5jb25zdCB7IEludmFsaWRDb25maWd1cmF0aW9uLCBCYWRSZXF1ZXN0LCBOb3RGb3VuZCB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvRXJyb3JzJyk7XG5jb25zdCBLb2EgPSByZXF1aXJlKCdrb2EnKTtcbmNvbnN0IG1vdW50ID0gcmVxdWlyZSgna29hLW1vdW50Jyk7XG5cbi8qKlxuICogR3JhcGhRTCByb3V0ZXIuXG4gKiBAbW9kdWxlIFJvdXRlcl9HcmFwaFFMXG4gKi9cblxuLyoqXG4gKiBDcmVhdGUgYSBHcmFwaFFMIHJvdXRlci5cbiAqIEBwYXJhbSB7Kn0gYXBwIFxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VSb3V0ZSBcbiAqIEBwYXJhbSB7b2JqZWN0c30gb3B0aW9ucyBcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBvcHRpb25zLnNjaGVtYVxuICogQHByb3BlcnR5IHtvYmplY3R8YXJyYXl9IFtvcHRpb25zLm1pZGRsZXdhcmVzXVxuICogQHByb3BlcnR5IHtib29sZWFufSBbb3B0aW9ucy5ncmFwaGlxbF1cbiAqIEBleGFtcGxlXG4gKiAgJzxiYXNlIHBhdGg+Jzoge1xuICogICAgICBncmFwaHFsOiB7ICAgICAgICAgIFxuICogICAgICAgICAgbWlkZGxld2FyZXM6IHt9LFxuICogICAgICAgICAgc2NoZW1hOiAnZ3JhcGhxbC9zY2hlbWEnLFxuICogICAgICAgICAgcm9vdFZhbHVlOiAnJyxcbiAqICAgICAgICAgIGdyYXBoaXFsOiB0cnVlXG4gKiAgICAgIH1cbiAqICB9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgKGFwcCwgYmFzZVJvdXRlLCBvcHRpb25zKSA9PiB7XG4gICAgY29uc3QgZ3JhcGhxbEhUVFAgPSB0cnlSZXF1aXJlKCdrb2EtZ3JhcGhxbCcpOyAgICAgICAgXG5cbiAgICBjb25zdCB7IG1pZGRsZXdhcmVzLCBzY2hlbWFQcm92aWRlciwgLi4uZ3JhcGhxbE9wdHMgfSA9IG9wdGlvbnM7XG5cbiAgICBpZiAoIXNjaGVtYVByb3ZpZGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICdNaXNzaW5nIHNjaGVtYVByb3ZpZGVyIGNvbmZpZy4nLFxuICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgYHJvdXRpbmcuJHtiYXNlUm91dGV9LmdyYXBocWwuc2NoZW1hUHJvdmlkZXJgXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3Qgc2NoZW1hRmFjdG9yeSA9IHJlcXVpcmUocGF0aC5yZXNvbHZlKGFwcC5iYWNrZW5kUGF0aCwgc2NoZW1hUHJvdmlkZXIpKTtcbiAgICBjb25zdCBzY2hlbWFPYmogPSBhd2FpdCBzY2hlbWFGYWN0b3J5KGFwcCk7XG5cbiAgICBpZiAoIXNjaGVtYU9iai5zY2hlbWEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgJ1RoZSBvYmplY3QgcmV0dXJuZWQgZnJvbSBzY2hlbWFQcm92aWRlciBkb2Vzbm90IGNvbnRhaW4gdGhlIHNjaGVtYSBib2R5LicsXG4gICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICBgcm91dGluZy4ke2Jhc2VSb3V0ZX0uZ3JhcGhxbC5zY2hlbWFQcm92aWRlcmBcbiAgICAgICAgKTtcbiAgICB9XG4gXG4gICAgZ3JhcGhxbE9wdHMuc2NoZW1hID0gc2NoZW1hT2JqLnNjaGVtYTtcbiAgICBpZiAoc2NoZW1hT2JqLnJvb3RWYWx1ZSkge1xuICAgICAgICBncmFwaHFsT3B0cy5yb290VmFsdWUgPSBzY2hlbWFPYmoucm9vdFZhbHVlO1xuICAgIH1cbiAgICBcbiAgICBsZXQgcm91dGVyID0gbmV3IEtvYSgpO1xuXG4gICAgaWYgKG1pZGRsZXdhcmVzKSB7XG4gICAgICAgIGFwcC51c2VNaWRkbGV3YXJlcyhyb3V0ZXIsIG1pZGRsZXdhcmVzKTtcbiAgICB9XG5cbiAgICByb3V0ZXIudXNlKG1vdW50KCcvJywgZ3JhcGhxbEhUVFAoZ3JhcGhxbE9wdHMpKSk7XG4gICAgYXBwLm1vdW50Um91dGVyKGJhc2VSb3V0ZSwgcm91dGVyKTtcbn07Il19