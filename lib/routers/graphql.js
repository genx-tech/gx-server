"use strict";

require("source-map-support/register");

const path = require('path');

const {
  Helpers: {
    tryRequire
  }
} = require('@genx/app');

const {
  InvalidConfiguration
} = require('@genx/error');

const Koa = require('koa');

const mount = require('koa-mount');

module.exports = async (app, baseRoute, options) => {
  const graphqlHTTP = tryRequire('koa-graphql');
  const {
    middlewares,
    schemaProvider,
    ...graphqlOpts
  } = options;

  if (!schemaProvider) {
    throw new InvalidConfiguration('Missing schemaProvider config.', app, `routing.${baseRoute}.graphql.schemaProvider`);
  }

  const schemaFactory = require(path.resolve(app.backendPath, schemaProvider));

  const schemaObj = await schemaFactory(app);

  if (!schemaObj.schema) {
    throw new InvalidConfiguration('The object returned from schemaProvider doesnot contain the schema body.', app, `routing.${baseRoute}.graphql.schemaProvider`);
  }

  graphqlOpts.schema = schemaObj.schema;

  if (schemaObj.rootValue) {
    graphqlOpts.rootValue = schemaObj.rootValue;
  }

  let router = new Koa();

  if (middlewares) {
    app.useMiddlewares(router, middlewares);
  }

  router.use(mount('/', graphqlHTTP(graphqlOpts)));
  app.mountRouter(baseRoute, router);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXJzL2dyYXBocWwuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJIZWxwZXJzIiwidHJ5UmVxdWlyZSIsIkludmFsaWRDb25maWd1cmF0aW9uIiwiS29hIiwibW91bnQiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXBwIiwiYmFzZVJvdXRlIiwib3B0aW9ucyIsImdyYXBocWxIVFRQIiwibWlkZGxld2FyZXMiLCJzY2hlbWFQcm92aWRlciIsImdyYXBocWxPcHRzIiwic2NoZW1hRmFjdG9yeSIsInJlc29sdmUiLCJiYWNrZW5kUGF0aCIsInNjaGVtYU9iaiIsInNjaGVtYSIsInJvb3RWYWx1ZSIsInJvdXRlciIsInVzZU1pZGRsZXdhcmVzIiwidXNlIiwibW91bnRSb3V0ZXIiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLE9BQU8sRUFBRTtBQUFFQyxJQUFBQTtBQUFGO0FBQVgsSUFBOEJGLE9BQU8sQ0FBQyxXQUFELENBQTNDOztBQUNBLE1BQU07QUFBRUcsRUFBQUE7QUFBRixJQUEyQkgsT0FBTyxDQUFDLGFBQUQsQ0FBeEM7O0FBQ0EsTUFBTUksR0FBRyxHQUFHSixPQUFPLENBQUMsS0FBRCxDQUFuQjs7QUFDQSxNQUFNSyxLQUFLLEdBQUdMLE9BQU8sQ0FBQyxXQUFELENBQXJCOztBQXlCQU0sTUFBTSxDQUFDQyxPQUFQLEdBQWlCLE9BQU9DLEdBQVAsRUFBWUMsU0FBWixFQUF1QkMsT0FBdkIsS0FBbUM7QUFDaEQsUUFBTUMsV0FBVyxHQUFHVCxVQUFVLENBQUMsYUFBRCxDQUE5QjtBQUVBLFFBQU07QUFBRVUsSUFBQUEsV0FBRjtBQUFlQyxJQUFBQSxjQUFmO0FBQStCLE9BQUdDO0FBQWxDLE1BQWtESixPQUF4RDs7QUFFQSxNQUFJLENBQUNHLGNBQUwsRUFBcUI7QUFDakIsVUFBTSxJQUFJVixvQkFBSixDQUNGLGdDQURFLEVBRUZLLEdBRkUsRUFHRCxXQUFVQyxTQUFVLHlCQUhuQixDQUFOO0FBS0g7O0FBRUQsUUFBTU0sYUFBYSxHQUFHZixPQUFPLENBQUNELElBQUksQ0FBQ2lCLE9BQUwsQ0FBYVIsR0FBRyxDQUFDUyxXQUFqQixFQUE4QkosY0FBOUIsQ0FBRCxDQUE3Qjs7QUFDQSxRQUFNSyxTQUFTLEdBQUcsTUFBTUgsYUFBYSxDQUFDUCxHQUFELENBQXJDOztBQUVBLE1BQUksQ0FBQ1UsU0FBUyxDQUFDQyxNQUFmLEVBQXVCO0FBQ25CLFVBQU0sSUFBSWhCLG9CQUFKLENBQ0YsMEVBREUsRUFFRkssR0FGRSxFQUdELFdBQVVDLFNBQVUseUJBSG5CLENBQU47QUFLSDs7QUFFREssRUFBQUEsV0FBVyxDQUFDSyxNQUFaLEdBQXFCRCxTQUFTLENBQUNDLE1BQS9COztBQUNBLE1BQUlELFNBQVMsQ0FBQ0UsU0FBZCxFQUF5QjtBQUNyQk4sSUFBQUEsV0FBVyxDQUFDTSxTQUFaLEdBQXdCRixTQUFTLENBQUNFLFNBQWxDO0FBQ0g7O0FBRUQsTUFBSUMsTUFBTSxHQUFHLElBQUlqQixHQUFKLEVBQWI7O0FBRUEsTUFBSVEsV0FBSixFQUFpQjtBQUNiSixJQUFBQSxHQUFHLENBQUNjLGNBQUosQ0FBbUJELE1BQW5CLEVBQTJCVCxXQUEzQjtBQUNIOztBQUVEUyxFQUFBQSxNQUFNLENBQUNFLEdBQVAsQ0FBV2xCLEtBQUssQ0FBQyxHQUFELEVBQU1NLFdBQVcsQ0FBQ0csV0FBRCxDQUFqQixDQUFoQjtBQUNBTixFQUFBQSxHQUFHLENBQUNnQixXQUFKLENBQWdCZixTQUFoQixFQUEyQlksTUFBM0I7QUFDSCxDQXJDRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgeyBIZWxwZXJzOiB7IHRyeVJlcXVpcmUgfSB9ID0gcmVxdWlyZSgnQGdlbngvYXBwJyk7XG5jb25zdCB7IEludmFsaWRDb25maWd1cmF0aW9uIH0gPSByZXF1aXJlKCdAZ2VueC9lcnJvcicpO1xuY29uc3QgS29hID0gcmVxdWlyZSgna29hJyk7XG5jb25zdCBtb3VudCA9IHJlcXVpcmUoJ2tvYS1tb3VudCcpO1xuXG4vKipcbiAqIEdyYXBoUUwgcm91dGVyLlxuICogQG1vZHVsZSBSb3V0ZXJfR3JhcGhRTFxuICovXG5cbi8qKlxuICogQ3JlYXRlIGEgR3JhcGhRTCByb3V0ZXIuXG4gKiBAcGFyYW0geyp9IGFwcCBcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlUm91dGUgXG4gKiBAcGFyYW0ge29iamVjdHN9IG9wdGlvbnMgXG4gKiBAcHJvcGVydHkge3N0cmluZ30gb3B0aW9ucy5zY2hlbWFcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fGFycmF5fSBbb3B0aW9ucy5taWRkbGV3YXJlc11cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW29wdGlvbnMuZ3JhcGhpcWxdXG4gKiBAZXhhbXBsZVxuICogICc8YmFzZSBwYXRoPic6IHtcbiAqICAgICAgZ3JhcGhxbDogeyAgICAgICAgICBcbiAqICAgICAgICAgIG1pZGRsZXdhcmVzOiB7fSxcbiAqICAgICAgICAgIHNjaGVtYTogJ2dyYXBocWwvc2NoZW1hJyxcbiAqICAgICAgICAgIHJvb3RWYWx1ZTogJycsXG4gKiAgICAgICAgICBncmFwaGlxbDogdHJ1ZVxuICogICAgICB9XG4gKiAgfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jIChhcHAsIGJhc2VSb3V0ZSwgb3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IGdyYXBocWxIVFRQID0gdHJ5UmVxdWlyZSgna29hLWdyYXBocWwnKTsgICAgICAgIFxuXG4gICAgY29uc3QgeyBtaWRkbGV3YXJlcywgc2NoZW1hUHJvdmlkZXIsIC4uLmdyYXBocWxPcHRzIH0gPSBvcHRpb25zO1xuXG4gICAgaWYgKCFzY2hlbWFQcm92aWRlcikge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAnTWlzc2luZyBzY2hlbWFQcm92aWRlciBjb25maWcuJyxcbiAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgIGByb3V0aW5nLiR7YmFzZVJvdXRlfS5ncmFwaHFsLnNjaGVtYVByb3ZpZGVyYFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IHNjaGVtYUZhY3RvcnkgPSByZXF1aXJlKHBhdGgucmVzb2x2ZShhcHAuYmFja2VuZFBhdGgsIHNjaGVtYVByb3ZpZGVyKSk7XG4gICAgY29uc3Qgc2NoZW1hT2JqID0gYXdhaXQgc2NoZW1hRmFjdG9yeShhcHApO1xuXG4gICAgaWYgKCFzY2hlbWFPYmouc2NoZW1hKSB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICdUaGUgb2JqZWN0IHJldHVybmVkIGZyb20gc2NoZW1hUHJvdmlkZXIgZG9lc25vdCBjb250YWluIHRoZSBzY2hlbWEgYm9keS4nLFxuICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgYHJvdXRpbmcuJHtiYXNlUm91dGV9LmdyYXBocWwuc2NoZW1hUHJvdmlkZXJgXG4gICAgICAgICk7XG4gICAgfVxuIFxuICAgIGdyYXBocWxPcHRzLnNjaGVtYSA9IHNjaGVtYU9iai5zY2hlbWE7XG4gICAgaWYgKHNjaGVtYU9iai5yb290VmFsdWUpIHtcbiAgICAgICAgZ3JhcGhxbE9wdHMucm9vdFZhbHVlID0gc2NoZW1hT2JqLnJvb3RWYWx1ZTtcbiAgICB9XG4gICAgXG4gICAgbGV0IHJvdXRlciA9IG5ldyBLb2EoKTtcblxuICAgIGlmIChtaWRkbGV3YXJlcykge1xuICAgICAgICBhcHAudXNlTWlkZGxld2FyZXMocm91dGVyLCBtaWRkbGV3YXJlcyk7XG4gICAgfVxuXG4gICAgcm91dGVyLnVzZShtb3VudCgnLycsIGdyYXBocWxIVFRQKGdyYXBocWxPcHRzKSkpO1xuICAgIGFwcC5tb3VudFJvdXRlcihiYXNlUm91dGUsIHJvdXRlcik7XG59OyJdfQ==