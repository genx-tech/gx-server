"use strict";

require("source-map-support/register");

const http = require('http');

const {
  _
} = require('rk-utils');

module.exports = opt => async (ctx, next) => {
  try {
    await next();
    if (ctx.response.status === 404 && !ctx.response.body) ctx.throw(404);
  } catch (err) {
    ctx.status = typeof err.status === 'number' ? err.status : 500;
    ctx.type = 'application/json';
    let errorObject = {
      error: err.expose ? err.message : http.STATUS_CODES[ctx.status]
    };

    if (ctx.appModule.env === 'development') {
      errorObject.stack = err.stack;
      errorObject.appModule = ctx.appModule.name;
    }

    Object.assign(errorObject, _.pick(err, ['code', 'errorCode', 'payload']));

    if (opt && opt.withState) {
      if (typeof opt.withState === 'function') {
        Object.assign(errorObject, opt.withState(ctx));
      } else {
        let states = _.castArray(opt.withState);

        Object.assign(errorObject, _.pick(ctx.state, states));
      }
    }

    ctx.body = errorObject;
    ctx.app.emit('error', err, ctx);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlcy9qc29uRXJyb3IuanMiXSwibmFtZXMiOlsiaHR0cCIsInJlcXVpcmUiLCJfIiwibW9kdWxlIiwiZXhwb3J0cyIsIm9wdCIsImN0eCIsIm5leHQiLCJyZXNwb25zZSIsInN0YXR1cyIsImJvZHkiLCJ0aHJvdyIsImVyciIsInR5cGUiLCJlcnJvck9iamVjdCIsImVycm9yIiwiZXhwb3NlIiwibWVzc2FnZSIsIlNUQVRVU19DT0RFUyIsImFwcE1vZHVsZSIsImVudiIsInN0YWNrIiwibmFtZSIsIk9iamVjdCIsImFzc2lnbiIsInBpY2siLCJ3aXRoU3RhdGUiLCJzdGF0ZXMiLCJjYXN0QXJyYXkiLCJzdGF0ZSIsImFwcCIsImVtaXQiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBT0EsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBUUQsT0FBTyxDQUFDLFVBQUQsQ0FBckI7O0FBRUFFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFrQkMsR0FBRCxJQUFTLE9BQU9DLEdBQVAsRUFBWUMsSUFBWixLQUFxQjtBQUMzQyxNQUFJO0FBQ0EsVUFBTUEsSUFBSSxFQUFWO0FBQ0EsUUFBSUQsR0FBRyxDQUFDRSxRQUFKLENBQWFDLE1BQWIsS0FBd0IsR0FBeEIsSUFBK0IsQ0FBQ0gsR0FBRyxDQUFDRSxRQUFKLENBQWFFLElBQWpELEVBQXVESixHQUFHLENBQUNLLEtBQUosQ0FBVSxHQUFWO0FBQzFELEdBSEQsQ0FHRSxPQUFPQyxHQUFQLEVBQVk7QUFDVk4sSUFBQUEsR0FBRyxDQUFDRyxNQUFKLEdBQWEsT0FBT0csR0FBRyxDQUFDSCxNQUFYLEtBQXNCLFFBQXRCLEdBQWlDRyxHQUFHLENBQUNILE1BQXJDLEdBQThDLEdBQTNEO0FBR0FILElBQUFBLEdBQUcsQ0FBQ08sSUFBSixHQUFXLGtCQUFYO0FBRUEsUUFBSUMsV0FBVyxHQUFHO0FBQUVDLE1BQUFBLEtBQUssRUFBRUgsR0FBRyxDQUFDSSxNQUFKLEdBQWFKLEdBQUcsQ0FBQ0ssT0FBakIsR0FBMkJqQixJQUFJLENBQUNrQixZQUFMLENBQWtCWixHQUFHLENBQUNHLE1BQXRCO0FBQXBDLEtBQWxCOztBQUNBLFFBQUlILEdBQUcsQ0FBQ2EsU0FBSixDQUFjQyxHQUFkLEtBQXNCLGFBQTFCLEVBQXlDO0FBQ3JDTixNQUFBQSxXQUFXLENBQUNPLEtBQVosR0FBb0JULEdBQUcsQ0FBQ1MsS0FBeEI7QUFDQVAsTUFBQUEsV0FBVyxDQUFDSyxTQUFaLEdBQXdCYixHQUFHLENBQUNhLFNBQUosQ0FBY0csSUFBdEM7QUFDSDs7QUFFREMsSUFBQUEsTUFBTSxDQUFDQyxNQUFQLENBQWNWLFdBQWQsRUFBMkJaLENBQUMsQ0FBQ3VCLElBQUYsQ0FBT2IsR0FBUCxFQUFZLENBQUMsTUFBRCxFQUFTLFdBQVQsRUFBc0IsU0FBdEIsQ0FBWixDQUEzQjs7QUFFQSxRQUFJUCxHQUFHLElBQUlBLEdBQUcsQ0FBQ3FCLFNBQWYsRUFBMEI7QUFDdEIsVUFBSSxPQUFPckIsR0FBRyxDQUFDcUIsU0FBWCxLQUF5QixVQUE3QixFQUF5QztBQUNyQ0gsUUFBQUEsTUFBTSxDQUFDQyxNQUFQLENBQWNWLFdBQWQsRUFBMkJULEdBQUcsQ0FBQ3FCLFNBQUosQ0FBY3BCLEdBQWQsQ0FBM0I7QUFDSCxPQUZELE1BRU87QUFDSCxZQUFJcUIsTUFBTSxHQUFHekIsQ0FBQyxDQUFDMEIsU0FBRixDQUFZdkIsR0FBRyxDQUFDcUIsU0FBaEIsQ0FBYjs7QUFDQUgsUUFBQUEsTUFBTSxDQUFDQyxNQUFQLENBQWNWLFdBQWQsRUFBMkJaLENBQUMsQ0FBQ3VCLElBQUYsQ0FBT25CLEdBQUcsQ0FBQ3VCLEtBQVgsRUFBa0JGLE1BQWxCLENBQTNCO0FBQ0g7QUFDSjs7QUFFRHJCLElBQUFBLEdBQUcsQ0FBQ0ksSUFBSixHQUFXSSxXQUFYO0FBR0FSLElBQUFBLEdBQUcsQ0FBQ3dCLEdBQUosQ0FBUUMsSUFBUixDQUFhLE9BQWIsRUFBc0JuQixHQUF0QixFQUEyQk4sR0FBM0I7QUFDSDtBQUNKLENBaENEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogRXJyb3IgcmVzcG9uc2UgbWlkZGxld2FyZSB3aXRoIGpzb25cbiAqIEBtb2R1bGUgTWlkZGxld2FyZV9Kc29uRXJyb3JcbiAqL1xuXG5jb25zdCBodHRwID0gcmVxdWlyZSgnaHR0cCcpO1xuY29uc3QgeyBfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChvcHQpID0+IGFzeW5jIChjdHgsIG5leHQpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBhd2FpdCBuZXh0KCk7XG4gICAgICAgIGlmIChjdHgucmVzcG9uc2Uuc3RhdHVzID09PSA0MDQgJiYgIWN0eC5yZXNwb25zZS5ib2R5KSBjdHgudGhyb3coNDA0KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY3R4LnN0YXR1cyA9IHR5cGVvZiBlcnIuc3RhdHVzID09PSAnbnVtYmVyJyA/IGVyci5zdGF0dXMgOiA1MDA7ICAgICAgICBcbiAgICBcbiAgICAgICAgLy8gYWNjZXB0ZWQgdHlwZXNcbiAgICAgICAgY3R4LnR5cGUgPSAnYXBwbGljYXRpb24vanNvbic7XG5cbiAgICAgICAgbGV0IGVycm9yT2JqZWN0ID0geyBlcnJvcjogZXJyLmV4cG9zZSA/IGVyci5tZXNzYWdlIDogaHR0cC5TVEFUVVNfQ09ERVNbY3R4LnN0YXR1c10gfTtcbiAgICAgICAgaWYgKGN0eC5hcHBNb2R1bGUuZW52ID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICAgICAgICBlcnJvck9iamVjdC5zdGFjayA9IGVyci5zdGFjaztcbiAgICAgICAgICAgIGVycm9yT2JqZWN0LmFwcE1vZHVsZSA9IGN0eC5hcHBNb2R1bGUubmFtZTtcbiAgICAgICAgfSAgICAgICAgXG5cbiAgICAgICAgT2JqZWN0LmFzc2lnbihlcnJvck9iamVjdCwgXy5waWNrKGVyciwgWydjb2RlJywgJ2Vycm9yQ29kZScsICdwYXlsb2FkJ10pKTsgXG5cbiAgICAgICAgaWYgKG9wdCAmJiBvcHQud2l0aFN0YXRlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdC53aXRoU3RhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGVycm9yT2JqZWN0LCBvcHQud2l0aFN0YXRlKGN0eCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgc3RhdGVzID0gXy5jYXN0QXJyYXkob3B0LndpdGhTdGF0ZSk7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihlcnJvck9iamVjdCwgXy5waWNrKGN0eC5zdGF0ZSwgc3RhdGVzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjdHguYm9keSA9IGVycm9yT2JqZWN0O1xuXG4gICAgICAgIC8vIGFwcGxpY2F0aW9uXG4gICAgICAgIGN0eC5hcHAuZW1pdCgnZXJyb3InLCBlcnIsIGN0eCk7XG4gICAgfSAgICAgICAgXG59OyAgICAgICAiXX0=