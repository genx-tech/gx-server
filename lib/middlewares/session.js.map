{"version":3,"sources":["../../src/middlewares/session.js"],"names":["session","require","InvalidConfiguration","DEFAULT_OPTS","key","prefix","module","exports","options","app","store","type","storeObject","opt","dataSource","dsService","getService","Object","assign","url","connectionString","tryRequire","MongoStore","MemoryStore","Mowa","Error","sessionOptions","server","koa"],"mappings":"AAAA;;;;AAOA,MAAMA,OAAO,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA2BD,OAAO,CAAC,aAAD,CAAxC;;AAEA,MAAME,YAAY,GAAG;AACjBC,EAAAA,GAAG,EAAE,cADY;AAEjBC,EAAAA,MAAM,EAAE;AAFS,CAArB;;AAuBAC,MAAM,CAACC,OAAP,GAAiB,CAACC,OAAD,EAAUC,GAAV,KAAkB;AAE/B,MAAIC,KAAK,GAAGF,OAAO,CAACE,KAAR,IAAiB;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAA7B;;AAEA,MAAI,CAACD,KAAK,CAACC,IAAX,EAAiB;AACb,UAAM,IAAIT,oBAAJ,CACF,6BADE,EAEFO,GAFE,EAGF,2BAHE,CAAN;AAKH;;AAED,MAAIG,WAAJ;AAEA,MAAIC,GAAG,GAAGH,KAAK,CAACF,OAAN,IAAiB,EAA3B;;AAEA,MAAIE,KAAK,CAACI,UAAV,EAAsB;AAClB,QAAIC,SAAS,GAAGN,GAAG,CAACO,UAAJ,CAAeN,KAAK,CAACI,UAArB,CAAhB;AACAG,IAAAA,MAAM,CAACC,MAAP,CAAcL,GAAd,EAAmB;AAAEM,MAAAA,GAAG,EAAEJ,SAAS,CAACK;AAAjB,KAAnB;AACH;;AAED,UAAQV,KAAK,CAACC,IAAd;AACI,SAAK,OAAL;AACIC,MAAAA,WAAW,GAAGH,GAAG,CAACY,UAAJ,CAAe,WAAf,EAA4BR,GAA5B,CAAd;AACA;;AACJ,SAAK,OAAL;AACID,MAAAA,WAAW,GAAGH,GAAG,CAACY,UAAJ,CAAe,mBAAf,EAAoCR,GAApC,CAAd;AACA;;AACJ,SAAK,SAAL;AACI,YAAMS,UAAU,GAAGb,GAAG,CAACY,UAAJ,CAAe,2BAAf,CAAnB;AACAT,MAAAA,WAAW,GAAG,IAAIU,UAAJ,CAAeT,GAAf,CAAd;AACA;;AACJ,SAAK,OAAL;AACID,MAAAA,WAAW,GAAGH,GAAG,CAACY,UAAJ,CAAe,gBAAf,EAAiCR,GAAjC,CAAd;AACA;;AACJ,SAAK,SAAL;AACID,MAAAA,WAAW,GAAGH,GAAG,CAACY,UAAJ,CAAe,qBAAf,EAAsCR,GAAtC,CAAd;AACA;;AACJ,SAAK,QAAL;AACI,YAAMU,WAAW,GAAGd,GAAG,CAACY,UAAJ,CAAe,oBAAf,CAApB;AACAT,MAAAA,WAAW,GAAG,IAAIW,WAAJ,EAAd;AACA;;AACJ;AACI,YAAM,IAAIC,IAAI,CAACC,KAAL,CAAWvB,oBAAf,CACF,qCAAqCQ,KAAK,CAACC,IADzC,EAEFF,GAFE,EAGF,gCAHE,CAAN;AAtBR;;AA6BA,MAAIiB,cAAc,GAAGT,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBf,YAAlB,EAAgCK,OAAhC,EAAyC;AAACE,IAAAA,KAAK,EAAEE;AAAR,GAAzC,CAArB;AAEA,SAAOZ,OAAO,CAAC0B,cAAD,EAAiBjB,GAAG,CAACkB,MAAJ,CAAWC,GAA5B,CAAd;AACH,CArDD","sourcesContent":["\"use strict\";\n\n/**\n * Session middleware\n * @module Middleware_Session\n */\n\nconst session = require('koa-session');\nconst { InvalidConfiguration } = require('@genx/error');\n\nconst DEFAULT_OPTS = {\n    key: 'k-server.sid',\n    prefix: 'k-server:sess:'\n};\n\n/**\n * Initialize session middleware\n * @param {object} options - Session options \n * @property {string} [options.key='mowa:sid'] - Cookie name defaulting to mowa.sid \n * @property {string} [options.prefix='mowa:sess:'] - Session prefix for store, defaulting to mowa:sess:\n * @property {number} [options.maxAge] - SessionStore's expiration time (ms), defaulting to 86400000 (1 day)\n * @property {bool} [options.autoCommit=true] - Automatically commit headers (default true)\n * @property {bool} [options.overwrite=true] - Can overwrite or not (default true) \n * @property {bool} [options.httpOnly=true] - HttpOnly or not (default true)\n * @property {bool} [options.signed=true] - Signed or not\n * @property {bool} [options.rolling=false] - Force a session identifier cookie to be set on every response. The expiration is reset to the original maxAge, resetting the expiration countdown. (default is false) \n * @property {bool} [options.renew=false] - Renew session when session is nearly expired, so we can always keep user logged in. (default is false)\n * @property {function} [options.genSid] - The way of generating external session id is controlled by the options.genid, which defaults to Date.now() + '-' + uid.sync(24)\n * @property {function} [options.valid] - valid(ctx, session), valid session value before use it\n * @property {function} [options.beforeSave] - beforeSave(ctx, session), hook before save session\n * @property {object} [options.store] - Session store instance. It can be any Object that has the methods set, get, destroy like MemoryStore.\n * @param {Routable} app \n */\nmodule.exports = (options, app) => {\n\n    let store = options.store || { type: 'memory' };\n\n    if (!store.type) {\n        throw new InvalidConfiguration(\n            'Missing session store type.',\n            app,\n            'middlewares.session.store'\n        );        \n    }\n\n    let storeObject;\n\n    let opt = store.options || {};\n\n    if (store.dataSource) {\n        let dsService = app.getService(store.dataSource);\n        Object.assign(opt, { url: dsService.connectionString });\n    }\n\n    switch (store.type) {\n        case 'redis':\n            storeObject = app.tryRequire('koa-redis')(opt);\n            break;\n        case 'mysql':\n            storeObject = app.tryRequire('koa-mysql-session')(opt);\n            break;\n        case 'mongodb':\n            const MongoStore = app.tryRequire('koa-generic-session-mongo');\n            storeObject = new MongoStore(opt);\n            break;\n        case 'pgsql':\n            storeObject = app.tryRequire('koa-pg-session')(opt);\n            break;\n        case 'sqlite3':\n            storeObject = app.tryRequire('koa-sqlite3-session')(opt);\n            break;\n        case 'memory':\n            const MemoryStore = app.tryRequire('koa-session-memory');\n            storeObject = new MemoryStore();\n            break;\n        default:\n            throw new Mowa.Error.InvalidConfiguration(\n                'Unsupported session store type: ' + store.type,\n                app,\n                'middlewares.session.store.type'\n            );\n    }\n\n    let sessionOptions = Object.assign({}, DEFAULT_OPTS, options, {store: storeObject});\n\n    return session(sessionOptions, app.server.koa);\n};"],"file":"session.js"}