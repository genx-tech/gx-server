"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  fs,
  glob,
  urlJoin,
  ensureLeftSlash,
  ensureRightSlash,
  urlAppendQuery
} = require('rk-utils');

const {
  Helpers: {
    tryRequire
  }
} = require('@genx/app');

const Errors = require('./utils/Errors');

const Literal = require('./enum/Literal');

const Koa = require('koa');

const mount = require('koa-mount');

const Routable = T => class extends T {
  constructor(name, options) {
    super(name, options);
    this.clientPath = this.toAbsolutePath(this.options.clientPath || Literal.CLIENT_SRC_PATH);
    this.publicPath = this.toAbsolutePath(this.options.publicPath || Literal.PUBLIC_PATH);
    this.router = new Koa();
    this.router.use((ctx, next) => {
      ctx.appModule = this;
      return next();
    });
    this.on('configLoaded', () => {
      let middlewareDir = path.join(this.backendPath, Literal.MIDDLEWARES_PATH);

      if (fs.existsSync(middlewareDir)) {
        this.loadMiddlewaresFrom(middlewareDir);
      }
    });
  }

  async start_() {
    this.middlewareFactoryRegistry = {};
    return super.start_();
  }

  async stop_() {
    delete this.middlewareFactoryRegistry;
    return super.stop_();
  }

  getBackendAction(actionByPath) {
    let lpos = actionByPath.lastIndexOf('.');

    if (lpos === -1) {
      throw new Error(`Invalid action path: ${actionByPath}`);
    }

    let controller = actionByPath.substr(0, lpos);
    let method = actionByPath.substr(lpos + 1);
    let controllerObj;

    try {
      controllerObj = require(path.join(this.backendPath, controller));
    } catch (error) {
      throw new Error(`Backend controller not found: ${controller}`);
    }

    let methodFunc = controllerObj[method];

    if (typeof methodFunc !== 'function') {
      throw new Error(`The specified action is not a function: ${actionByPath}`);
    }

    return methodFunc;
  }

  loadMiddlewaresFrom(dir) {
    let files = glob.sync(path.join(dir, '*.js'), {
      nodir: true
    });
    files.forEach(file => this.registerMiddlewareFactory(path.basename(file, '.js'), require(file)));
  }

  registerMiddlewareFactory(name, factoryMethod) {
    if (!(typeof factoryMethod === 'function')) {
      throw new Error('Invalid middleware factory: ' + name);
    }

    if (name in this.middlewareFactoryRegistry) {
      throw new Errors.ServerError('Middleware "' + name + '" already registered!');
    }

    this.middlewareFactoryRegistry[name] = factoryMethod;
    this.log('verbose', `Registered named middleware [${name}].`);
  }

  getMiddlewareFactory(name) {
    if (this.middlewareFactoryRegistry.hasOwnProperty(name)) {
      return this.middlewareFactoryRegistry[name];
    }

    if (this.server && this.server !== this) {
      return this.server.getMiddlewareFactory(name);
    }

    let npmMiddleware = tryRequire(name);

    if (npmMiddleware) {
      return npmMiddleware;
    }

    throw new Errors.ServerError(`Don't know where to load middleware "${name}".`);
  }

  useMiddlewares(router, middlewares) {
    let middlewareFactory, middleware;
    let middlewareFunctions = [];

    if (_.isPlainObject(middlewares)) {
      _.forOwn(middlewares, (options, name) => {
        middlewareFactory = this.getMiddlewareFactory(name);
        middleware = middlewareFactory(options, this);
        middlewareFunctions.push({
          name,
          middleware
        });
      });
    } else {
      middlewares = _.castArray(middlewares);

      _.each(middlewares, middlewareEntry => {
        let type = typeof middlewareEntry;

        if (type === 'string') {
          middlewareFactory = this.getMiddlewareFactory(middlewareEntry);
          middleware = middlewareFactory(undefined, this);
          middlewareFunctions.push({
            name: middlewareEntry,
            middleware
          });
        } else if (type === 'function') {
          middlewareFunctions.push({
            name: middlewareEntry.name || 'unamed middleware',
            middleware: middlewareEntry
          });
        } else if (Array.isArray(middlewareEntry)) {
          if (middlewareEntry.length === 0) {
            throw new Errors.InvalidConfiguration('Empty array found as middleware entry!', this, 'middlewares');
          }

          middlewareFactory = this.getMiddlewareFactory(middlewareEntry[0]);
          middleware = middlewareFactory(middlewareEntry.length > 1 ? middlewareEntry[1] : null, this);
          middlewareFunctions.push({
            name: middlewareEntry[0],
            middleware
          });
        } else {
          if (!_.isPlainObject(middlewareEntry) || !('name' in middlewareEntry)) {
            throw new Errors.InvalidConfiguration('Invalid middleware entry!', this, 'middlewares');
          }

          middlewareFactory = this.getMiddlewareFactory(middlewareEntry.name);
          middleware = middlewareFactory(middlewareEntry.options, this);
          middlewareFunctions.push({
            name: middlewareEntry.name,
            middleware
          });
        }
      });
    }

    middlewareFunctions.forEach(({
      name,
      middleware
    }) => {
      if (Array.isArray(middleware)) {
        middleware.forEach(m => this.useMiddleware(router, m, name));
      } else {
        this.useMiddleware(router, middleware, name);
      }
    });
    return this;
  }

  addRoute(router, method, route, actions) {
    let handlers = [],
        middlewareFactory;

    if (_.isPlainObject(actions)) {
      _.forOwn(actions, (options, name) => {
        middlewareFactory = this.getMiddlewareFactory(name);
        handlers.push(this._wrapMiddlewareTracer(middlewareFactory(options, this), name));
      });
    } else {
      actions = _.castArray(actions);
      let lastIndex = actions.length - 1;

      _.each(actions, (action, i) => {
        let type = typeof action;

        if (i === lastIndex) {
          if (type === 'string' && action.lastIndexOf('.') > 0) {
            action = {
              name: 'action',
              options: action
            };
            type = 'object';
          }
        }

        if (type === 'string') {
          middlewareFactory = this.getMiddlewareFactory(action);
          let middleware = middlewareFactory(null, this);

          if (Array.isArray(middleware)) {
            middleware.forEach((middlewareItem, i) => handlers.push(this._wrapMiddlewareTracer(middlewareItem, `${action}-${i}` + (middleware.name ? '-' + middleware.name : ''))));
          } else {
            handlers.push(this._wrapMiddlewareTracer(middleware, action));
          }
        } else if (type === 'function') {
          handlers.push(this._wrapMiddlewareTracer(action));
        } else if (Array.isArray(action)) {
          if (!(action.length > 0 && action.length <= 2)) {
            throw new Error('Invalid middleware entry');
          }

          middlewareFactory = this.getMiddlewareFactory(action[0]);
          handlers.push(this._wrapMiddlewareTracer(middlewareFactory(action.length > 1 ? action[1] : undefined, this)));
        } else {
          if (!(_.isPlainObject(action) && 'name' in action)) {
            throw new Error('Invalid middleware entry');
          }

          middlewareFactory = this.getMiddlewareFactory(action.name);
          handlers.push(this._wrapMiddlewareTracer(middlewareFactory(action.options, this), action.name));
        }
      });
    }

    router[method](route, ...handlers);
    let endpoint = router.opts.prefix ? urlJoin(this.route, router.opts.prefix, route) : urlJoin(this.route, route);
    this.log('verbose', `Route "${method}:${endpoint}" is added from module [${this.name}].`);
    return this;
  }

  addRouter(nestedRouter) {
    this.router.use(nestedRouter.routes());
    this.router.use(nestedRouter.allowedMethods());
    return this;
  }

  mountRouter(route, router) {
    this.router.use(mount(route, router));
  }

  toWebPath(relativePath, ...pathOrQuery) {
    let url, query;

    if (pathOrQuery && pathOrQuery.length > 0 && (pathOrQuery.length > 1 || pathOrQuery[0] !== undefined)) {
      if (_.isObject(pathOrQuery[pathOrQuery.length - 1])) {
        query = pathOrQuery.pop();
      }

      pathOrQuery.unshift(relativePath);
      url = urlJoin(this.route, ...pathOrQuery);
    } else {
      url = urlJoin(this.route, relativePath);
    }

    url = ensureLeftSlash(url);

    if (query) {
      url = urlAppendQuery(url, query);
      url = url.replace('/?', '?');
    }

    return url;
  }

  wrapAction(action) {
    return async ctx => {
      ctx.toUrl = (relativePath, ...pathOrQuery) => {
        return ctx.origin + this.toWebPath(relativePath, ...pathOrQuery);
      };

      Object.assign(ctx.state, {
        _self: ctx.originalUrl || this.toWebPath(ctx.url),
        __: this.__,
        _base: ensureRightSlash(this.toWebPath()),
        _makePath: (relativePath, query) => this.toWebPath(relativePath, query),
        _makeUrl: (relativePath, query) => ctx.toUrl(relativePath, query)
      });

      if (ctx.csrf) {
        ctx.state._csrf = ctx.csrf;
      }

      return action(ctx);
    };
  }

  useMiddleware(router, middleware, name) {
    if (!(typeof middleware === 'function')) {
      throw new Error(middleware);
    }

    router.use(this._wrapMiddlewareTracer(middleware, name));
    this.log('verbose', `Attached middleware [${name}].`);
  }

  _wrapMiddlewareTracer(middleware, name) {
    if (this.options.traceMiddlewares) {
      return async (ctx, next) => {
        this.log('debug', `Step in middleware "${name || middleware.name}" ...`);
        let ret = await middleware(ctx, next);
        this.log('debug', `Step out from middleware "${name || middleware.name}".`);
        return ret;
      };
    }

    return middleware;
  }

  _getFeatureFallbackPath() {
    return super._getFeatureFallbackPath().concat([path.join(this.backendPath, Literal.FEATURES_PATH)]);
  }

};

module.exports = Routable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Sb3V0YWJsZS5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIl8iLCJmcyIsImdsb2IiLCJ1cmxKb2luIiwiZW5zdXJlTGVmdFNsYXNoIiwiZW5zdXJlUmlnaHRTbGFzaCIsInVybEFwcGVuZFF1ZXJ5IiwiSGVscGVycyIsInRyeVJlcXVpcmUiLCJFcnJvcnMiLCJMaXRlcmFsIiwiS29hIiwibW91bnQiLCJSb3V0YWJsZSIsIlQiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJvcHRpb25zIiwiY2xpZW50UGF0aCIsInRvQWJzb2x1dGVQYXRoIiwiQ0xJRU5UX1NSQ19QQVRIIiwicHVibGljUGF0aCIsIlBVQkxJQ19QQVRIIiwicm91dGVyIiwidXNlIiwiY3R4IiwibmV4dCIsImFwcE1vZHVsZSIsIm9uIiwibWlkZGxld2FyZURpciIsImpvaW4iLCJiYWNrZW5kUGF0aCIsIk1JRERMRVdBUkVTX1BBVEgiLCJleGlzdHNTeW5jIiwibG9hZE1pZGRsZXdhcmVzRnJvbSIsInN0YXJ0XyIsIm1pZGRsZXdhcmVGYWN0b3J5UmVnaXN0cnkiLCJzdG9wXyIsImdldEJhY2tlbmRBY3Rpb24iLCJhY3Rpb25CeVBhdGgiLCJscG9zIiwibGFzdEluZGV4T2YiLCJFcnJvciIsImNvbnRyb2xsZXIiLCJzdWJzdHIiLCJtZXRob2QiLCJjb250cm9sbGVyT2JqIiwiZXJyb3IiLCJtZXRob2RGdW5jIiwiZGlyIiwiZmlsZXMiLCJzeW5jIiwibm9kaXIiLCJmb3JFYWNoIiwiZmlsZSIsInJlZ2lzdGVyTWlkZGxld2FyZUZhY3RvcnkiLCJiYXNlbmFtZSIsImZhY3RvcnlNZXRob2QiLCJTZXJ2ZXJFcnJvciIsImxvZyIsImdldE1pZGRsZXdhcmVGYWN0b3J5IiwiaGFzT3duUHJvcGVydHkiLCJzZXJ2ZXIiLCJucG1NaWRkbGV3YXJlIiwidXNlTWlkZGxld2FyZXMiLCJtaWRkbGV3YXJlcyIsIm1pZGRsZXdhcmVGYWN0b3J5IiwibWlkZGxld2FyZSIsIm1pZGRsZXdhcmVGdW5jdGlvbnMiLCJpc1BsYWluT2JqZWN0IiwiZm9yT3duIiwicHVzaCIsImNhc3RBcnJheSIsImVhY2giLCJtaWRkbGV3YXJlRW50cnkiLCJ0eXBlIiwidW5kZWZpbmVkIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJtIiwidXNlTWlkZGxld2FyZSIsImFkZFJvdXRlIiwicm91dGUiLCJhY3Rpb25zIiwiaGFuZGxlcnMiLCJfd3JhcE1pZGRsZXdhcmVUcmFjZXIiLCJsYXN0SW5kZXgiLCJhY3Rpb24iLCJpIiwibWlkZGxld2FyZUl0ZW0iLCJlbmRwb2ludCIsIm9wdHMiLCJwcmVmaXgiLCJhZGRSb3V0ZXIiLCJuZXN0ZWRSb3V0ZXIiLCJyb3V0ZXMiLCJhbGxvd2VkTWV0aG9kcyIsIm1vdW50Um91dGVyIiwidG9XZWJQYXRoIiwicmVsYXRpdmVQYXRoIiwicGF0aE9yUXVlcnkiLCJ1cmwiLCJxdWVyeSIsImlzT2JqZWN0IiwicG9wIiwidW5zaGlmdCIsInJlcGxhY2UiLCJ3cmFwQWN0aW9uIiwidG9VcmwiLCJvcmlnaW4iLCJPYmplY3QiLCJhc3NpZ24iLCJzdGF0ZSIsIl9zZWxmIiwib3JpZ2luYWxVcmwiLCJfXyIsIl9iYXNlIiwiX21ha2VQYXRoIiwiX21ha2VVcmwiLCJjc3JmIiwiX2NzcmYiLCJ0cmFjZU1pZGRsZXdhcmVzIiwicmV0IiwiX2dldEZlYXR1cmVGYWxsYmFja1BhdGgiLCJjb25jYXQiLCJGRUFUVVJFU19QQVRIIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQSxFQUFMO0FBQVNDLEVBQUFBLElBQVQ7QUFBZUMsRUFBQUEsT0FBZjtBQUF3QkMsRUFBQUEsZUFBeEI7QUFBeUNDLEVBQUFBLGdCQUF6QztBQUEyREMsRUFBQUE7QUFBM0QsSUFBOEVQLE9BQU8sQ0FBQyxVQUFELENBQTNGOztBQUNBLE1BQU07QUFBRVEsRUFBQUEsT0FBTyxFQUFFO0FBQUVDLElBQUFBO0FBQUY7QUFBWCxJQUE4QlQsT0FBTyxDQUFDLFdBQUQsQ0FBM0M7O0FBQ0EsTUFBTVUsTUFBTSxHQUFHVixPQUFPLENBQUMsZ0JBQUQsQ0FBdEI7O0FBQ0EsTUFBTVcsT0FBTyxHQUFHWCxPQUFPLENBQUMsZ0JBQUQsQ0FBdkI7O0FBQ0EsTUFBTVksR0FBRyxHQUFHWixPQUFPLENBQUMsS0FBRCxDQUFuQjs7QUFDQSxNQUFNYSxLQUFLLEdBQUdiLE9BQU8sQ0FBQyxXQUFELENBQXJCOztBQUVBLE1BQU1jLFFBQVEsR0FBR0MsQ0FBQyxJQUFJLGNBQWNBLENBQWQsQ0FBZ0I7QUFRbENDLEVBQUFBLFdBQVcsQ0FBQ0MsSUFBRCxFQUFPQyxPQUFQLEVBQWdCO0FBQ3ZCLFVBQU1ELElBQU4sRUFBWUMsT0FBWjtBQU1BLFNBQUtDLFVBQUwsR0FBa0IsS0FBS0MsY0FBTCxDQUFvQixLQUFLRixPQUFMLENBQWFDLFVBQWIsSUFBMkJSLE9BQU8sQ0FBQ1UsZUFBdkQsQ0FBbEI7QUFNQSxTQUFLQyxVQUFMLEdBQWtCLEtBQUtGLGNBQUwsQ0FBb0IsS0FBS0YsT0FBTCxDQUFhSSxVQUFiLElBQTJCWCxPQUFPLENBQUNZLFdBQXZELENBQWxCO0FBTUEsU0FBS0MsTUFBTCxHQUFjLElBQUlaLEdBQUosRUFBZDtBQUdBLFNBQUtZLE1BQUwsQ0FBWUMsR0FBWixDQUFnQixDQUFDQyxHQUFELEVBQU1DLElBQU4sS0FBZTtBQUMzQkQsTUFBQUEsR0FBRyxDQUFDRSxTQUFKLEdBQWdCLElBQWhCO0FBQ0EsYUFBT0QsSUFBSSxFQUFYO0FBQ0gsS0FIRDtBQUtBLFNBQUtFLEVBQUwsQ0FBUSxjQUFSLEVBQXdCLE1BQU07QUFFMUIsVUFBSUMsYUFBYSxHQUFHL0IsSUFBSSxDQUFDZ0MsSUFBTCxDQUFVLEtBQUtDLFdBQWYsRUFBNEJyQixPQUFPLENBQUNzQixnQkFBcEMsQ0FBcEI7O0FBRUEsVUFBSS9CLEVBQUUsQ0FBQ2dDLFVBQUgsQ0FBY0osYUFBZCxDQUFKLEVBQWtDO0FBQzlCLGFBQUtLLG1CQUFMLENBQXlCTCxhQUF6QjtBQUNIO0FBQ0osS0FQRDtBQVFIOztBQUVELFFBQU1NLE1BQU4sR0FBZTtBQUtYLFNBQUtDLHlCQUFMLEdBQWlDLEVBQWpDO0FBRUEsV0FBTyxNQUFNRCxNQUFOLEVBQVA7QUFDSDs7QUFFRCxRQUFNRSxLQUFOLEdBQWM7QUFDVixXQUFPLEtBQUtELHlCQUFaO0FBRUEsV0FBTyxNQUFNQyxLQUFOLEVBQVA7QUFDSDs7QUFFREMsRUFBQUEsZ0JBQWdCLENBQUNDLFlBQUQsRUFBZTtBQUMzQixRQUFJQyxJQUFJLEdBQUdELFlBQVksQ0FBQ0UsV0FBYixDQUF5QixHQUF6QixDQUFYOztBQUVBLFFBQUlELElBQUksS0FBSyxDQUFDLENBQWQsRUFBaUI7QUFDYixZQUFNLElBQUlFLEtBQUosQ0FBVyx3QkFBdUJILFlBQWEsRUFBL0MsQ0FBTjtBQUNIOztBQUVELFFBQUlJLFVBQVUsR0FBR0osWUFBWSxDQUFDSyxNQUFiLENBQW9CLENBQXBCLEVBQXVCSixJQUF2QixDQUFqQjtBQUNBLFFBQUlLLE1BQU0sR0FBR04sWUFBWSxDQUFDSyxNQUFiLENBQW9CSixJQUFJLEdBQUMsQ0FBekIsQ0FBYjtBQUNBLFFBQUlNLGFBQUo7O0FBRUEsUUFBSTtBQUNBQSxNQUFBQSxhQUFhLEdBQUcvQyxPQUFPLENBQUNELElBQUksQ0FBQ2dDLElBQUwsQ0FBVSxLQUFLQyxXQUFmLEVBQTRCWSxVQUE1QixDQUFELENBQXZCO0FBQ0gsS0FGRCxDQUVFLE9BQU9JLEtBQVAsRUFBYztBQUNaLFlBQU0sSUFBSUwsS0FBSixDQUFXLGlDQUFnQ0MsVUFBVyxFQUF0RCxDQUFOO0FBQ0g7O0FBRUQsUUFBSUssVUFBVSxHQUFHRixhQUFhLENBQUNELE1BQUQsQ0FBOUI7O0FBQ0EsUUFBSSxPQUFPRyxVQUFQLEtBQXNCLFVBQTFCLEVBQXNDO0FBQ2xDLFlBQU0sSUFBSU4sS0FBSixDQUFXLDJDQUEwQ0gsWUFBYSxFQUFsRSxDQUFOO0FBQ0g7O0FBRUQsV0FBT1MsVUFBUDtBQUNIOztBQU1EZCxFQUFBQSxtQkFBbUIsQ0FBQ2UsR0FBRCxFQUFNO0FBQ3JCLFFBQUlDLEtBQUssR0FBR2hELElBQUksQ0FBQ2lELElBQUwsQ0FBVXJELElBQUksQ0FBQ2dDLElBQUwsQ0FBVW1CLEdBQVYsRUFBZSxNQUFmLENBQVYsRUFBa0M7QUFBQ0csTUFBQUEsS0FBSyxFQUFFO0FBQVIsS0FBbEMsQ0FBWjtBQUNBRixJQUFBQSxLQUFLLENBQUNHLE9BQU4sQ0FBY0MsSUFBSSxJQUFJLEtBQUtDLHlCQUFMLENBQStCekQsSUFBSSxDQUFDMEQsUUFBTCxDQUFjRixJQUFkLEVBQW9CLEtBQXBCLENBQS9CLEVBQTJEdkQsT0FBTyxDQUFDdUQsSUFBRCxDQUFsRSxDQUF0QjtBQUNIOztBQU9EQyxFQUFBQSx5QkFBeUIsQ0FBQ3ZDLElBQUQsRUFBT3lDLGFBQVAsRUFBc0I7QUFBQSxVQUN0QyxPQUFPQSxhQUFQLEtBQXlCLFVBRGE7QUFBQSxzQkFDRCxpQ0FBaUN6QyxJQURoQztBQUFBOztBQUczQyxRQUFJQSxJQUFJLElBQUksS0FBS29CLHlCQUFqQixFQUE0QztBQUN4QyxZQUFNLElBQUkzQixNQUFNLENBQUNpRCxXQUFYLENBQXVCLGlCQUFnQjFDLElBQWhCLEdBQXNCLHVCQUE3QyxDQUFOO0FBQ0g7O0FBRUQsU0FBS29CLHlCQUFMLENBQStCcEIsSUFBL0IsSUFBdUN5QyxhQUF2QztBQUNBLFNBQUtFLEdBQUwsQ0FBUyxTQUFULEVBQXFCLGdDQUErQjNDLElBQUssSUFBekQ7QUFDSDs7QUFPRDRDLEVBQUFBLG9CQUFvQixDQUFDNUMsSUFBRCxFQUFPO0FBQ3ZCLFFBQUksS0FBS29CLHlCQUFMLENBQStCeUIsY0FBL0IsQ0FBOEM3QyxJQUE5QyxDQUFKLEVBQXlEO0FBQ3JELGFBQU8sS0FBS29CLHlCQUFMLENBQStCcEIsSUFBL0IsQ0FBUDtBQUNIOztBQUVELFFBQUksS0FBSzhDLE1BQUwsSUFBZSxLQUFLQSxNQUFMLEtBQWdCLElBQW5DLEVBQXlDO0FBQ3JDLGFBQU8sS0FBS0EsTUFBTCxDQUFZRixvQkFBWixDQUFpQzVDLElBQWpDLENBQVA7QUFDSDs7QUFFRCxRQUFJK0MsYUFBYSxHQUFHdkQsVUFBVSxDQUFDUSxJQUFELENBQTlCOztBQUNBLFFBQUkrQyxhQUFKLEVBQW1CO0FBQ2YsYUFBT0EsYUFBUDtBQUNIOztBQUVELFVBQU0sSUFBSXRELE1BQU0sQ0FBQ2lELFdBQVgsQ0FBd0Isd0NBQXVDMUMsSUFBSyxJQUFwRSxDQUFOO0FBQ0g7O0FBUURnRCxFQUFBQSxjQUFjLENBQUN6QyxNQUFELEVBQVMwQyxXQUFULEVBQXNCO0FBQ2hDLFFBQUlDLGlCQUFKLEVBQXVCQyxVQUF2QjtBQUNBLFFBQUlDLG1CQUFtQixHQUFHLEVBQTFCOztBQUVBLFFBQUlwRSxDQUFDLENBQUNxRSxhQUFGLENBQWdCSixXQUFoQixDQUFKLEVBQWtDO0FBQzlCakUsTUFBQUEsQ0FBQyxDQUFDc0UsTUFBRixDQUFTTCxXQUFULEVBQXNCLENBQUNoRCxPQUFELEVBQVVELElBQVYsS0FBbUI7QUFDckNrRCxRQUFBQSxpQkFBaUIsR0FBRyxLQUFLTixvQkFBTCxDQUEwQjVDLElBQTFCLENBQXBCO0FBQ0FtRCxRQUFBQSxVQUFVLEdBQUdELGlCQUFpQixDQUFDakQsT0FBRCxFQUFVLElBQVYsQ0FBOUI7QUFDQW1ELFFBQUFBLG1CQUFtQixDQUFDRyxJQUFwQixDQUF5QjtBQUFFdkQsVUFBQUEsSUFBRjtBQUFRbUQsVUFBQUE7QUFBUixTQUF6QjtBQUNILE9BSkQ7QUFLSCxLQU5ELE1BTU87QUFDSEYsTUFBQUEsV0FBVyxHQUFHakUsQ0FBQyxDQUFDd0UsU0FBRixDQUFZUCxXQUFaLENBQWQ7O0FBRUFqRSxNQUFBQSxDQUFDLENBQUN5RSxJQUFGLENBQU9SLFdBQVAsRUFBb0JTLGVBQWUsSUFBSTtBQUNuQyxZQUFJQyxJQUFJLEdBQUcsT0FBT0QsZUFBbEI7O0FBRUEsWUFBSUMsSUFBSSxLQUFLLFFBQWIsRUFBdUI7QUFFbkJULFVBQUFBLGlCQUFpQixHQUFHLEtBQUtOLG9CQUFMLENBQTBCYyxlQUExQixDQUFwQjtBQUNBUCxVQUFBQSxVQUFVLEdBQUdELGlCQUFpQixDQUFDVSxTQUFELEVBQVksSUFBWixDQUE5QjtBQUNBUixVQUFBQSxtQkFBbUIsQ0FBQ0csSUFBcEIsQ0FBeUI7QUFBRXZELFlBQUFBLElBQUksRUFBRTBELGVBQVI7QUFBMEJQLFlBQUFBO0FBQTFCLFdBQXpCO0FBQ0gsU0FMRCxNQUtPLElBQUlRLElBQUksS0FBSyxVQUFiLEVBQXlCO0FBQzVCUCxVQUFBQSxtQkFBbUIsQ0FBQ0csSUFBcEIsQ0FBeUI7QUFBRXZELFlBQUFBLElBQUksRUFBRTBELGVBQWUsQ0FBQzFELElBQWhCLElBQXdCLG1CQUFoQztBQUFxRG1ELFlBQUFBLFVBQVUsRUFBRU87QUFBakUsV0FBekI7QUFDSCxTQUZNLE1BRUEsSUFBSUcsS0FBSyxDQUFDQyxPQUFOLENBQWNKLGVBQWQsQ0FBSixFQUFvQztBQUV2QyxjQUFJQSxlQUFlLENBQUNLLE1BQWhCLEtBQTJCLENBQS9CLEVBQWtDO0FBQzlCLGtCQUFNLElBQUl0RSxNQUFNLENBQUN1RSxvQkFBWCxDQUNGLHdDQURFLEVBRUYsSUFGRSxFQUdGLGFBSEUsQ0FBTjtBQUtIOztBQUVEZCxVQUFBQSxpQkFBaUIsR0FBRyxLQUFLTixvQkFBTCxDQUEwQmMsZUFBZSxDQUFDLENBQUQsQ0FBekMsQ0FBcEI7QUFDQVAsVUFBQUEsVUFBVSxHQUFHRCxpQkFBaUIsQ0FBQ1EsZUFBZSxDQUFDSyxNQUFoQixHQUF5QixDQUF6QixHQUE2QkwsZUFBZSxDQUFDLENBQUQsQ0FBNUMsR0FBa0QsSUFBbkQsRUFBeUQsSUFBekQsQ0FBOUI7QUFDQU4sVUFBQUEsbUJBQW1CLENBQUNHLElBQXBCLENBQXlCO0FBQUV2RCxZQUFBQSxJQUFJLEVBQUUwRCxlQUFlLENBQUMsQ0FBRCxDQUF2QjtBQUE0QlAsWUFBQUE7QUFBNUIsV0FBekI7QUFDSCxTQWJNLE1BYUE7QUFDSCxjQUFJLENBQUNuRSxDQUFDLENBQUNxRSxhQUFGLENBQWdCSyxlQUFoQixDQUFELElBQXFDLEVBQUUsVUFBVUEsZUFBWixDQUF6QyxFQUF1RTtBQUNuRSxrQkFBTSxJQUFJakUsTUFBTSxDQUFDdUUsb0JBQVgsQ0FDRiwyQkFERSxFQUVGLElBRkUsRUFHRixhQUhFLENBQU47QUFLSDs7QUFFRGQsVUFBQUEsaUJBQWlCLEdBQUcsS0FBS04sb0JBQUwsQ0FBMEJjLGVBQWUsQ0FBQzFELElBQTFDLENBQXBCO0FBQ0FtRCxVQUFBQSxVQUFVLEdBQUdELGlCQUFpQixDQUFDUSxlQUFlLENBQUN6RCxPQUFqQixFQUEwQixJQUExQixDQUE5QjtBQUNBbUQsVUFBQUEsbUJBQW1CLENBQUNHLElBQXBCLENBQXlCO0FBQUV2RCxZQUFBQSxJQUFJLEVBQUUwRCxlQUFlLENBQUMxRCxJQUF4QjtBQUE4Qm1ELFlBQUFBO0FBQTlCLFdBQXpCO0FBQ0g7QUFDSixPQXBDRDtBQXFDSDs7QUFFREMsSUFBQUEsbUJBQW1CLENBQUNmLE9BQXBCLENBQTRCLENBQUM7QUFBRXJDLE1BQUFBLElBQUY7QUFBUW1ELE1BQUFBO0FBQVIsS0FBRCxLQUEwQjtBQUNsRCxVQUFJVSxLQUFLLENBQUNDLE9BQU4sQ0FBY1gsVUFBZCxDQUFKLEVBQStCO0FBQzNCQSxRQUFBQSxVQUFVLENBQUNkLE9BQVgsQ0FBbUI0QixDQUFDLElBQUksS0FBS0MsYUFBTCxDQUFtQjNELE1BQW5CLEVBQTJCMEQsQ0FBM0IsRUFBOEJqRSxJQUE5QixDQUF4QjtBQUNILE9BRkQsTUFFTztBQUNILGFBQUtrRSxhQUFMLENBQW1CM0QsTUFBbkIsRUFBMkI0QyxVQUEzQixFQUF1Q25ELElBQXZDO0FBQ0g7QUFDSixLQU5EO0FBUUEsV0FBTyxJQUFQO0FBQ0g7O0FBU0RtRSxFQUFBQSxRQUFRLENBQUM1RCxNQUFELEVBQVNzQixNQUFULEVBQWlCdUMsS0FBakIsRUFBd0JDLE9BQXhCLEVBQWlDO0FBQ3JDLFFBQUlDLFFBQVEsR0FBRyxFQUFmO0FBQUEsUUFBbUJwQixpQkFBbkI7O0FBRUEsUUFBSWxFLENBQUMsQ0FBQ3FFLGFBQUYsQ0FBZ0JnQixPQUFoQixDQUFKLEVBQThCO0FBQzFCckYsTUFBQUEsQ0FBQyxDQUFDc0UsTUFBRixDQUFTZSxPQUFULEVBQWtCLENBQUNwRSxPQUFELEVBQVVELElBQVYsS0FBbUI7QUFDakNrRCxRQUFBQSxpQkFBaUIsR0FBRyxLQUFLTixvQkFBTCxDQUEwQjVDLElBQTFCLENBQXBCO0FBQ0FzRSxRQUFBQSxRQUFRLENBQUNmLElBQVQsQ0FBYyxLQUFLZ0IscUJBQUwsQ0FBMkJyQixpQkFBaUIsQ0FBQ2pELE9BQUQsRUFBVSxJQUFWLENBQTVDLEVBQTZERCxJQUE3RCxDQUFkO0FBQ0gsT0FIRDtBQUlILEtBTEQsTUFLTztBQUNIcUUsTUFBQUEsT0FBTyxHQUFHckYsQ0FBQyxDQUFDd0UsU0FBRixDQUFZYSxPQUFaLENBQVY7QUFDQSxVQUFJRyxTQUFTLEdBQUdILE9BQU8sQ0FBQ04sTUFBUixHQUFpQixDQUFqQzs7QUFFQS9FLE1BQUFBLENBQUMsQ0FBQ3lFLElBQUYsQ0FBT1ksT0FBUCxFQUFnQixDQUFDSSxNQUFELEVBQVNDLENBQVQsS0FBZTtBQUMzQixZQUFJZixJQUFJLEdBQUcsT0FBT2MsTUFBbEI7O0FBRUEsWUFBSUMsQ0FBQyxLQUFLRixTQUFWLEVBQXFCO0FBRWpCLGNBQUliLElBQUksS0FBSyxRQUFULElBQXFCYyxNQUFNLENBQUNoRCxXQUFQLENBQW1CLEdBQW5CLElBQTBCLENBQW5ELEVBQXNEO0FBQ2xEZ0QsWUFBQUEsTUFBTSxHQUFHO0FBQ0x6RSxjQUFBQSxJQUFJLEVBQUUsUUFERDtBQUVMQyxjQUFBQSxPQUFPLEVBQUV3RTtBQUZKLGFBQVQ7QUFLQWQsWUFBQUEsSUFBSSxHQUFHLFFBQVA7QUFDSDtBQUNKOztBQUVELFlBQUlBLElBQUksS0FBSyxRQUFiLEVBQXVCO0FBRW5CVCxVQUFBQSxpQkFBaUIsR0FBRyxLQUFLTixvQkFBTCxDQUEwQjZCLE1BQTFCLENBQXBCO0FBRUEsY0FBSXRCLFVBQVUsR0FBR0QsaUJBQWlCLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBbEM7O0FBR0EsY0FBSVcsS0FBSyxDQUFDQyxPQUFOLENBQWNYLFVBQWQsQ0FBSixFQUErQjtBQUMzQkEsWUFBQUEsVUFBVSxDQUFDZCxPQUFYLENBQW1CLENBQUNzQyxjQUFELEVBQWlCRCxDQUFqQixLQUF1QkosUUFBUSxDQUFDZixJQUFULENBQ3RDLEtBQUtnQixxQkFBTCxDQUEyQkksY0FBM0IsRUFBNEMsR0FBRUYsTUFBTyxJQUFHQyxDQUFFLEVBQWYsSUFBb0J2QixVQUFVLENBQUNuRCxJQUFYLEdBQW1CLE1BQU1tRCxVQUFVLENBQUNuRCxJQUFwQyxHQUE0QyxFQUFoRSxDQUEzQyxDQURzQyxDQUExQztBQUdILFdBSkQsTUFJTztBQUNIc0UsWUFBQUEsUUFBUSxDQUFDZixJQUFULENBQWMsS0FBS2dCLHFCQUFMLENBQTJCcEIsVUFBM0IsRUFBdUNzQixNQUF2QyxDQUFkO0FBQ0g7QUFDSixTQWRELE1BY08sSUFBSWQsSUFBSSxLQUFLLFVBQWIsRUFBeUI7QUFDNUJXLFVBQUFBLFFBQVEsQ0FBQ2YsSUFBVCxDQUFjLEtBQUtnQixxQkFBTCxDQUEyQkUsTUFBM0IsQ0FBZDtBQUNILFNBRk0sTUFFQSxJQUFJWixLQUFLLENBQUNDLE9BQU4sQ0FBY1csTUFBZCxDQUFKLEVBQTJCO0FBQUEsZ0JBQ3RCQSxNQUFNLENBQUNWLE1BQVAsR0FBZ0IsQ0FBaEIsSUFBcUJVLE1BQU0sQ0FBQ1YsTUFBUCxJQUFpQixDQURoQjtBQUFBLDRCQUNtQiwwQkFEbkI7QUFBQTs7QUFHOUJiLFVBQUFBLGlCQUFpQixHQUFHLEtBQUtOLG9CQUFMLENBQTBCNkIsTUFBTSxDQUFDLENBQUQsQ0FBaEMsQ0FBcEI7QUFDQUgsVUFBQUEsUUFBUSxDQUFDZixJQUFULENBQWMsS0FBS2dCLHFCQUFMLENBQTJCckIsaUJBQWlCLENBQUN1QixNQUFNLENBQUNWLE1BQVAsR0FBZ0IsQ0FBaEIsR0FBb0JVLE1BQU0sQ0FBQyxDQUFELENBQTFCLEdBQWdDYixTQUFqQyxFQUE0QyxJQUE1QyxDQUE1QyxDQUFkO0FBQ0gsU0FMTSxNQUtBO0FBQUEsZ0JBQ0s1RSxDQUFDLENBQUNxRSxhQUFGLENBQWdCb0IsTUFBaEIsS0FBMkIsVUFBVUEsTUFEMUM7QUFBQSw0QkFDa0QsMEJBRGxEO0FBQUE7O0FBR0h2QixVQUFBQSxpQkFBaUIsR0FBRyxLQUFLTixvQkFBTCxDQUEwQjZCLE1BQU0sQ0FBQ3pFLElBQWpDLENBQXBCO0FBQ0FzRSxVQUFBQSxRQUFRLENBQUNmLElBQVQsQ0FBYyxLQUFLZ0IscUJBQUwsQ0FBMkJyQixpQkFBaUIsQ0FBQ3VCLE1BQU0sQ0FBQ3hFLE9BQVIsRUFBaUIsSUFBakIsQ0FBNUMsRUFBb0V3RSxNQUFNLENBQUN6RSxJQUEzRSxDQUFkO0FBQ0g7QUFDSixPQTFDRDtBQTJDSDs7QUFFRE8sSUFBQUEsTUFBTSxDQUFDc0IsTUFBRCxDQUFOLENBQWV1QyxLQUFmLEVBQXNCLEdBQUdFLFFBQXpCO0FBRUEsUUFBSU0sUUFBUSxHQUFHckUsTUFBTSxDQUFDc0UsSUFBUCxDQUFZQyxNQUFaLEdBQXFCM0YsT0FBTyxDQUFDLEtBQUtpRixLQUFOLEVBQWE3RCxNQUFNLENBQUNzRSxJQUFQLENBQVlDLE1BQXpCLEVBQWlDVixLQUFqQyxDQUE1QixHQUFzRWpGLE9BQU8sQ0FBQyxLQUFLaUYsS0FBTixFQUFhQSxLQUFiLENBQTVGO0FBRUEsU0FBS3pCLEdBQUwsQ0FBUyxTQUFULEVBQXFCLFVBQVNkLE1BQU8sSUFBRytDLFFBQVMsMkJBQTBCLEtBQUs1RSxJQUFLLElBQXJGO0FBRUEsV0FBTyxJQUFQO0FBQ0g7O0FBTUQrRSxFQUFBQSxTQUFTLENBQUNDLFlBQUQsRUFBZTtBQUNwQixTQUFLekUsTUFBTCxDQUFZQyxHQUFaLENBQWdCd0UsWUFBWSxDQUFDQyxNQUFiLEVBQWhCO0FBQ0EsU0FBSzFFLE1BQUwsQ0FBWUMsR0FBWixDQUFnQndFLFlBQVksQ0FBQ0UsY0FBYixFQUFoQjtBQUNBLFdBQU8sSUFBUDtBQUNIOztBQU9EQyxFQUFBQSxXQUFXLENBQUNmLEtBQUQsRUFBUTdELE1BQVIsRUFBZ0I7QUFDdkIsU0FBS0EsTUFBTCxDQUFZQyxHQUFaLENBQWdCWixLQUFLLENBQUN3RSxLQUFELEVBQVE3RCxNQUFSLENBQXJCO0FBQ0g7O0FBUUQ2RSxFQUFBQSxTQUFTLENBQUNDLFlBQUQsRUFBZSxHQUFHQyxXQUFsQixFQUErQjtBQUNwQyxRQUFJQyxHQUFKLEVBQVNDLEtBQVQ7O0FBRUEsUUFBSUYsV0FBVyxJQUFJQSxXQUFXLENBQUN2QixNQUFaLEdBQXFCLENBQXBDLEtBQTBDdUIsV0FBVyxDQUFDdkIsTUFBWixHQUFxQixDQUFyQixJQUEwQnVCLFdBQVcsQ0FBQyxDQUFELENBQVgsS0FBbUIxQixTQUF2RixDQUFKLEVBQXVHO0FBQ25HLFVBQUk1RSxDQUFDLENBQUN5RyxRQUFGLENBQVdILFdBQVcsQ0FBQ0EsV0FBVyxDQUFDdkIsTUFBWixHQUFxQixDQUF0QixDQUF0QixDQUFKLEVBQXFEO0FBQ2pEeUIsUUFBQUEsS0FBSyxHQUFHRixXQUFXLENBQUNJLEdBQVosRUFBUjtBQUNIOztBQUNESixNQUFBQSxXQUFXLENBQUNLLE9BQVosQ0FBb0JOLFlBQXBCO0FBQ0FFLE1BQUFBLEdBQUcsR0FBR3BHLE9BQU8sQ0FBQyxLQUFLaUYsS0FBTixFQUFhLEdBQUdrQixXQUFoQixDQUFiO0FBQ0gsS0FORCxNQU1PO0FBQ0hDLE1BQUFBLEdBQUcsR0FBR3BHLE9BQU8sQ0FBQyxLQUFLaUYsS0FBTixFQUFhaUIsWUFBYixDQUFiO0FBQ0g7O0FBRURFLElBQUFBLEdBQUcsR0FBR25HLGVBQWUsQ0FBQ21HLEdBQUQsQ0FBckI7O0FBRUEsUUFBSUMsS0FBSixFQUFXO0FBQ1BELE1BQUFBLEdBQUcsR0FBR2pHLGNBQWMsQ0FBQ2lHLEdBQUQsRUFBTUMsS0FBTixDQUFwQjtBQUNBRCxNQUFBQSxHQUFHLEdBQUdBLEdBQUcsQ0FBQ0ssT0FBSixDQUFZLElBQVosRUFBa0IsR0FBbEIsQ0FBTjtBQUNIOztBQUVELFdBQU9MLEdBQVA7QUFDSDs7QUFRRE0sRUFBQUEsVUFBVSxDQUFDcEIsTUFBRCxFQUFTO0FBQ2YsV0FBTyxNQUFPaEUsR0FBUCxJQUFlO0FBQ2xCQSxNQUFBQSxHQUFHLENBQUNxRixLQUFKLEdBQVksQ0FBQ1QsWUFBRCxFQUFlLEdBQUdDLFdBQWxCLEtBQWtDO0FBQzFDLGVBQU83RSxHQUFHLENBQUNzRixNQUFKLEdBQWEsS0FBS1gsU0FBTCxDQUFlQyxZQUFmLEVBQTZCLEdBQUdDLFdBQWhDLENBQXBCO0FBQ0gsT0FGRDs7QUFJQVUsTUFBQUEsTUFBTSxDQUFDQyxNQUFQLENBQWN4RixHQUFHLENBQUN5RixLQUFsQixFQUF5QjtBQUNyQkMsUUFBQUEsS0FBSyxFQUFFMUYsR0FBRyxDQUFDMkYsV0FBSixJQUFtQixLQUFLaEIsU0FBTCxDQUFlM0UsR0FBRyxDQUFDOEUsR0FBbkIsQ0FETDtBQUVyQmMsUUFBQUEsRUFBRSxFQUFFLEtBQUtBLEVBRlk7QUFHckJDLFFBQUFBLEtBQUssRUFBRWpILGdCQUFnQixDQUFDLEtBQUsrRixTQUFMLEVBQUQsQ0FIRjtBQUlyQm1CLFFBQUFBLFNBQVMsRUFBRSxDQUFDbEIsWUFBRCxFQUFlRyxLQUFmLEtBQXlCLEtBQUtKLFNBQUwsQ0FBZUMsWUFBZixFQUE2QkcsS0FBN0IsQ0FKZjtBQUtyQmdCLFFBQUFBLFFBQVEsRUFBRSxDQUFDbkIsWUFBRCxFQUFlRyxLQUFmLEtBQXlCL0UsR0FBRyxDQUFDcUYsS0FBSixDQUFVVCxZQUFWLEVBQXdCRyxLQUF4QjtBQUxkLE9BQXpCOztBQVFBLFVBQUkvRSxHQUFHLENBQUNnRyxJQUFSLEVBQWM7QUFDVmhHLFFBQUFBLEdBQUcsQ0FBQ3lGLEtBQUosQ0FBVVEsS0FBVixHQUFrQmpHLEdBQUcsQ0FBQ2dHLElBQXRCO0FBQ0g7O0FBRUQsYUFBT2hDLE1BQU0sQ0FBQ2hFLEdBQUQsQ0FBYjtBQUNILEtBbEJEO0FBbUJIOztBQUVEeUQsRUFBQUEsYUFBYSxDQUFDM0QsTUFBRCxFQUFTNEMsVUFBVCxFQUFxQm5ELElBQXJCLEVBQTJCO0FBQUEsVUFDNUIsT0FBT21ELFVBQVAsS0FBc0IsVUFETTtBQUFBLHNCQUNNQSxVQUROO0FBQUE7O0FBRXBDNUMsSUFBQUEsTUFBTSxDQUFDQyxHQUFQLENBQVcsS0FBSytELHFCQUFMLENBQTJCcEIsVUFBM0IsRUFBdUNuRCxJQUF2QyxDQUFYO0FBQ0EsU0FBSzJDLEdBQUwsQ0FBUyxTQUFULEVBQXFCLHdCQUF1QjNDLElBQUssSUFBakQ7QUFDSDs7QUFFRHVFLEVBQUFBLHFCQUFxQixDQUFDcEIsVUFBRCxFQUFhbkQsSUFBYixFQUFtQjtBQUNwQyxRQUFJLEtBQUtDLE9BQUwsQ0FBYTBHLGdCQUFqQixFQUFtQztBQUMvQixhQUFPLE9BQU9sRyxHQUFQLEVBQVlDLElBQVosS0FBcUI7QUFDeEIsYUFBS2lDLEdBQUwsQ0FBUyxPQUFULEVBQW1CLHVCQUFzQjNDLElBQUksSUFBSW1ELFVBQVUsQ0FBQ25ELElBQUssT0FBakU7QUFDQSxZQUFJNEcsR0FBRyxHQUFHLE1BQU16RCxVQUFVLENBQUMxQyxHQUFELEVBQU1DLElBQU4sQ0FBMUI7QUFDQSxhQUFLaUMsR0FBTCxDQUFTLE9BQVQsRUFBbUIsNkJBQTRCM0MsSUFBSSxJQUFJbUQsVUFBVSxDQUFDbkQsSUFBSyxJQUF2RTtBQUNBLGVBQU80RyxHQUFQO0FBQ0gsT0FMRDtBQU1IOztBQUVELFdBQU96RCxVQUFQO0FBQ0g7O0FBRUQwRCxFQUFBQSx1QkFBdUIsR0FBRztBQUN0QixXQUFPLE1BQU1BLHVCQUFOLEdBQWdDQyxNQUFoQyxDQUF1QyxDQUFFaEksSUFBSSxDQUFDZ0MsSUFBTCxDQUFVLEtBQUtDLFdBQWYsRUFBNEJyQixPQUFPLENBQUNxSCxhQUFwQyxDQUFGLENBQXZDLENBQVA7QUFDSDs7QUFwWGlDLENBQXRDOztBQXVYQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCcEgsUUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHsgXywgZnMsIGdsb2IsIHVybEpvaW4sIGVuc3VyZUxlZnRTbGFzaCwgZW5zdXJlUmlnaHRTbGFzaCwgdXJsQXBwZW5kUXVlcnkgfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IEhlbHBlcnM6IHsgdHJ5UmVxdWlyZSB9IH0gPSByZXF1aXJlKCdAZ2VueC9hcHAnKTtcbmNvbnN0IEVycm9ycyA9IHJlcXVpcmUoJy4vdXRpbHMvRXJyb3JzJyk7XG5jb25zdCBMaXRlcmFsID0gcmVxdWlyZSgnLi9lbnVtL0xpdGVyYWwnKTtcbmNvbnN0IEtvYSA9IHJlcXVpcmUoJ2tvYScpO1xuY29uc3QgbW91bnQgPSByZXF1aXJlKCdrb2EtbW91bnQnKTtcblxuY29uc3QgUm91dGFibGUgPSBUID0+IGNsYXNzIGV4dGVuZHMgVCB7ICAgIFxuICAgIC8qKiAgICAgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcm91dGFibGUgaW5zdGFuY2UuICAgICBcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIC0gUm91dGFibGUgb3B0aW9ucyAgICAgICAgICAgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbb3B0aW9ucy5iYWNrZW5kUGF0aD0nc2VydmVyJ10gLSBSZWxhdGl2ZSBwYXRoIG9mIGJhY2stZW5kIHNlcnZlciBzb3VyY2UgZmlsZXNcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW29wdGlvbnMuY2xpZW50UGF0aD0nY2xpZW50J10gLSBSZWxhdGl2ZSBwYXRoIG9mIGZyb250LWVuZCBjbGllbnQgc291cmNlIGZpbGVzICAgICBcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW29wdGlvbnMucHVibGljUGF0aD0ncHVibGljJ10gLSBSZWxhdGl2ZSBwYXRoIG9mIGZyb250LWVuZCBzdGF0aWMgZmlsZXMgXG4gICAgICovICAgICAgICAgXG4gICAgY29uc3RydWN0b3IobmFtZSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihuYW1lLCBvcHRpb25zKTsgICAgICAgIFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGcm9udGVuZCBzb3VyY2UgZmlsZXMgcGF0aC5cbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAgICAgKiovXG4gICAgICAgIHRoaXMuY2xpZW50UGF0aCA9IHRoaXMudG9BYnNvbHV0ZVBhdGgodGhpcy5vcHRpb25zLmNsaWVudFBhdGggfHwgTGl0ZXJhbC5DTElFTlRfU1JDX1BBVEgpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGcm9udGVuZCBzdGF0aWMgZmlsZXMgcGF0aC5cbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAgICAgKiovXG4gICAgICAgIHRoaXMucHVibGljUGF0aCA9IHRoaXMudG9BYnNvbHV0ZVBhdGgodGhpcy5vcHRpb25zLnB1YmxpY1BhdGggfHwgTGl0ZXJhbC5QVUJMSUNfUEFUSCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVhY2ggYXBwIGhhcyBpdHMgb3duIHJvdXRlci5cbiAgICAgICAgICogQG1lbWJlciB7S29hfVxuICAgICAgICAgKiovXG4gICAgICAgIHRoaXMucm91dGVyID0gbmV3IEtvYSgpO1xuXG4gICAgICAgIC8vaW5qZWN0IHRoZSBhcHBNb2R1bGUgaW5zdGFuY2UgaW4gdGhlIGZpcnN0IG1pZGRsZXdhcmVcbiAgICAgICAgdGhpcy5yb3V0ZXIudXNlKChjdHgsIG5leHQpID0+IHsgXG4gICAgICAgICAgICBjdHguYXBwTW9kdWxlID0gdGhpczsgXG4gICAgICAgICAgICByZXR1cm4gbmV4dCgpOyBcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5vbignY29uZmlnTG9hZGVkJywgKCkgPT4ge1xuICAgICAgICAgICAgLy9sb2FkIG1pZGRsZXdhcmVzIGlmIGV4aXN0cyBpbiBzZXJ2ZXIgb3IgYXBwIHBhdGhcbiAgICAgICAgICAgIGxldCBtaWRkbGV3YXJlRGlyID0gcGF0aC5qb2luKHRoaXMuYmFja2VuZFBhdGgsIExpdGVyYWwuTUlERExFV0FSRVNfUEFUSCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChmcy5leGlzdHNTeW5jKG1pZGRsZXdhcmVEaXIpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkTWlkZGxld2FyZXNGcm9tKG1pZGRsZXdhcmVEaXIpO1xuICAgICAgICAgICAgfSAgICAgICAgICAgIFxuICAgICAgICB9KTsgIFxuICAgIH1cblxuICAgIGFzeW5jIHN0YXJ0XygpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1pZGRsZXdhcmUgZmFjdG9yeSByZWdpc3RyeS5cbiAgICAgICAgICogQG1lbWJlciB7b2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5taWRkbGV3YXJlRmFjdG9yeVJlZ2lzdHJ5ID0ge307XG5cbiAgICAgICAgcmV0dXJuIHN1cGVyLnN0YXJ0XygpO1xuICAgIH1cblxuICAgIGFzeW5jIHN0b3BfKCkge1xuICAgICAgICBkZWxldGUgdGhpcy5taWRkbGV3YXJlRmFjdG9yeVJlZ2lzdHJ5O1xuXG4gICAgICAgIHJldHVybiBzdXBlci5zdG9wXygpO1xuICAgIH1cblxuICAgIGdldEJhY2tlbmRBY3Rpb24oYWN0aW9uQnlQYXRoKSB7XG4gICAgICAgIGxldCBscG9zID0gYWN0aW9uQnlQYXRoLmxhc3RJbmRleE9mKCcuJyk7XG5cbiAgICAgICAgaWYgKGxwb3MgPT09IC0xKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgYWN0aW9uIHBhdGg6ICR7YWN0aW9uQnlQYXRofWApO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGNvbnRyb2xsZXIgPSBhY3Rpb25CeVBhdGguc3Vic3RyKDAsIGxwb3MpO1xuICAgICAgICBsZXQgbWV0aG9kID0gYWN0aW9uQnlQYXRoLnN1YnN0cihscG9zKzEpO1xuICAgICAgICBsZXQgY29udHJvbGxlck9iajtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29udHJvbGxlck9iaiA9IHJlcXVpcmUocGF0aC5qb2luKHRoaXMuYmFja2VuZFBhdGgsIGNvbnRyb2xsZXIpKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQmFja2VuZCBjb250cm9sbGVyIG5vdCBmb3VuZDogJHtjb250cm9sbGVyfWApO1xuICAgICAgICB9ICAgICAgIFxuXG4gICAgICAgIGxldCBtZXRob2RGdW5jID0gY29udHJvbGxlck9ialttZXRob2RdO1xuICAgICAgICBpZiAodHlwZW9mIG1ldGhvZEZ1bmMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIHNwZWNpZmllZCBhY3Rpb24gaXMgbm90IGEgZnVuY3Rpb246ICR7YWN0aW9uQnlQYXRofWApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1ldGhvZEZ1bmM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9hZCBhbmQgcmVnc2l0ZXIgbWlkZGxld2FyZSBmaWxlcyBmcm9tIGEgc3BlY2lmaWVkIHBhdGguXG4gICAgICogQHBhcmFtIGRpclxuICAgICAqL1xuICAgIGxvYWRNaWRkbGV3YXJlc0Zyb20oZGlyKSB7XG4gICAgICAgIGxldCBmaWxlcyA9IGdsb2Iuc3luYyhwYXRoLmpvaW4oZGlyLCAnKi5qcycpLCB7bm9kaXI6IHRydWV9KTtcbiAgICAgICAgZmlsZXMuZm9yRWFjaChmaWxlID0+IHRoaXMucmVnaXN0ZXJNaWRkbGV3YXJlRmFjdG9yeShwYXRoLmJhc2VuYW1lKGZpbGUsICcuanMnKSwgcmVxdWlyZShmaWxlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIHRoZSBmYWN0b3J5IG1ldGhvZCBvZiBhIG5hbWVkIG1pZGRsZXdhcmUuICAgICBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBtaWRkbGV3YXJlIFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZhY3RvcnlNZXRob2QgLSBUaGUgZmFjdG9yeSBtZXRob2Qgb2YgYSBtaWRkbGV3YXJlXG4gICAgICovXG4gICAgcmVnaXN0ZXJNaWRkbGV3YXJlRmFjdG9yeShuYW1lLCBmYWN0b3J5TWV0aG9kKSB7XG4gICAgICAgIHByZTogdHlwZW9mIGZhY3RvcnlNZXRob2QgPT09ICdmdW5jdGlvbicsICdJbnZhbGlkIG1pZGRsZXdhcmUgZmFjdG9yeTogJyArIG5hbWU7ICAgICAgICBcblxuICAgICAgICBpZiAobmFtZSBpbiB0aGlzLm1pZGRsZXdhcmVGYWN0b3J5UmVnaXN0cnkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcnMuU2VydmVyRXJyb3IoJ01pZGRsZXdhcmUgXCInKyBuYW1lICsnXCIgYWxyZWFkeSByZWdpc3RlcmVkIScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5taWRkbGV3YXJlRmFjdG9yeVJlZ2lzdHJ5W25hbWVdID0gZmFjdG9yeU1ldGhvZDtcbiAgICAgICAgdGhpcy5sb2coJ3ZlcmJvc2UnLCBgUmVnaXN0ZXJlZCBuYW1lZCBtaWRkbGV3YXJlIFske25hbWV9XS5gKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGZhY3RvcnkgbWV0aG9kIG9mIGEgbWlkZGxld2FyZSBmcm9tIG1vZHVsZSBoaWVyYXJjaHkuICAgICBcbiAgICAgKiBAcGFyYW0gbmFtZVxuICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbn1cbiAgICAgKi9cbiAgICBnZXRNaWRkbGV3YXJlRmFjdG9yeShuYW1lKSB7XG4gICAgICAgIGlmICh0aGlzLm1pZGRsZXdhcmVGYWN0b3J5UmVnaXN0cnkuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1pZGRsZXdhcmVGYWN0b3J5UmVnaXN0cnlbbmFtZV07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zZXJ2ZXIgJiYgdGhpcy5zZXJ2ZXIgIT09IHRoaXMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlcnZlci5nZXRNaWRkbGV3YXJlRmFjdG9yeShuYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBucG1NaWRkbGV3YXJlID0gdHJ5UmVxdWlyZShuYW1lKTtcbiAgICAgICAgaWYgKG5wbU1pZGRsZXdhcmUpIHtcbiAgICAgICAgICAgIHJldHVybiBucG1NaWRkbGV3YXJlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9ycy5TZXJ2ZXJFcnJvcihgRG9uJ3Qga25vdyB3aGVyZSB0byBsb2FkIG1pZGRsZXdhcmUgXCIke25hbWV9XCIuYCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlIG1pZGRsZXdhcmVzXG4gICAgICogQHBhcmFtIHtSb3V0ZXJ9IHJvdXRlclxuICAgICAqIEBwYXJhbSB7Kn0gbWlkZGxld2FyZXMgLSBDYW4gYmUgYW4gYXJyYXkgb2YgbWlkZGxld2FyZSBlbnRyaWVzIG9yIGEga2V5LXZhbHVlIGxpc3Qgb2YgcmVnaXN0ZXJyZWQgbWlkZGxld2FyZXNcbiAgICAgKiBAcmV0dXJucyB7Um91dGFibGV9XG4gICAgICovXG4gICAgdXNlTWlkZGxld2FyZXMocm91dGVyLCBtaWRkbGV3YXJlcykge1xuICAgICAgICBsZXQgbWlkZGxld2FyZUZhY3RvcnksIG1pZGRsZXdhcmU7XG4gICAgICAgIGxldCBtaWRkbGV3YXJlRnVuY3Rpb25zID0gW107XG4gICAgICAgIFxuICAgICAgICBpZiAoXy5pc1BsYWluT2JqZWN0KG1pZGRsZXdhcmVzKSkge1xuICAgICAgICAgICAgXy5mb3JPd24obWlkZGxld2FyZXMsIChvcHRpb25zLCBuYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgbWlkZGxld2FyZUZhY3RvcnkgPSB0aGlzLmdldE1pZGRsZXdhcmVGYWN0b3J5KG5hbWUpOyAgIFxuICAgICAgICAgICAgICAgIG1pZGRsZXdhcmUgPSBtaWRkbGV3YXJlRmFjdG9yeShvcHRpb25zLCB0aGlzKTtcbiAgICAgICAgICAgICAgICBtaWRkbGV3YXJlRnVuY3Rpb25zLnB1c2goeyBuYW1lLCBtaWRkbGV3YXJlIH0pOyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWlkZGxld2FyZXMgPSBfLmNhc3RBcnJheShtaWRkbGV3YXJlcyk7ICAgICAgICAgIFxuICAgICAgICBcbiAgICAgICAgICAgIF8uZWFjaChtaWRkbGV3YXJlcywgbWlkZGxld2FyZUVudHJ5ID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdHlwZSA9IHR5cGVvZiBtaWRkbGV3YXJlRW50cnk7XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gWyAnbmFtZWRNaWRkbGV3YXJlJyBdXG4gICAgICAgICAgICAgICAgICAgIG1pZGRsZXdhcmVGYWN0b3J5ID0gdGhpcy5nZXRNaWRkbGV3YXJlRmFjdG9yeShtaWRkbGV3YXJlRW50cnkpO1xuICAgICAgICAgICAgICAgICAgICBtaWRkbGV3YXJlID0gbWlkZGxld2FyZUZhY3RvcnkodW5kZWZpbmVkLCB0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgbWlkZGxld2FyZUZ1bmN0aW9ucy5wdXNoKHsgbmFtZTogbWlkZGxld2FyZUVudHJ5ICwgbWlkZGxld2FyZSB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgbWlkZGxld2FyZUZ1bmN0aW9ucy5wdXNoKHsgbmFtZTogbWlkZGxld2FyZUVudHJ5Lm5hbWUgfHwgJ3VuYW1lZCBtaWRkbGV3YXJlJywgbWlkZGxld2FyZTogbWlkZGxld2FyZUVudHJ5fSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG1pZGRsZXdhcmVFbnRyeSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gWyBbICduYW1lZE1pZGRsZXdhcmUnLCBjb25maWcgXSBdXG4gICAgICAgICAgICAgICAgICAgIGlmIChtaWRkbGV3YXJlRW50cnkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JzLkludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdFbXB0eSBhcnJheSBmb3VuZCBhcyBtaWRkbGV3YXJlIGVudHJ5IScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbWlkZGxld2FyZXMnXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbWlkZGxld2FyZUZhY3RvcnkgPSB0aGlzLmdldE1pZGRsZXdhcmVGYWN0b3J5KG1pZGRsZXdhcmVFbnRyeVswXSk7XG4gICAgICAgICAgICAgICAgICAgIG1pZGRsZXdhcmUgPSBtaWRkbGV3YXJlRmFjdG9yeShtaWRkbGV3YXJlRW50cnkubGVuZ3RoID4gMSA/IG1pZGRsZXdhcmVFbnRyeVsxXSA6IG51bGwsIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBtaWRkbGV3YXJlRnVuY3Rpb25zLnB1c2goeyBuYW1lOiBtaWRkbGV3YXJlRW50cnlbMF0sIG1pZGRsZXdhcmUgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfLmlzUGxhaW5PYmplY3QobWlkZGxld2FyZUVudHJ5KSB8fCAhKCduYW1lJyBpbiBtaWRkbGV3YXJlRW50cnkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3JzLkludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdJbnZhbGlkIG1pZGRsZXdhcmUgZW50cnkhJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtaWRkbGV3YXJlcydcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBtaWRkbGV3YXJlRmFjdG9yeSA9IHRoaXMuZ2V0TWlkZGxld2FyZUZhY3RvcnkobWlkZGxld2FyZUVudHJ5Lm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBtaWRkbGV3YXJlID0gbWlkZGxld2FyZUZhY3RvcnkobWlkZGxld2FyZUVudHJ5Lm9wdGlvbnMsIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBtaWRkbGV3YXJlRnVuY3Rpb25zLnB1c2goeyBuYW1lOiBtaWRkbGV3YXJlRW50cnkubmFtZSwgbWlkZGxld2FyZSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBcbiAgICAgICAgXG4gICAgICAgIG1pZGRsZXdhcmVGdW5jdGlvbnMuZm9yRWFjaCgoeyBuYW1lLCBtaWRkbGV3YXJlIH0pID0+IHsgICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG1pZGRsZXdhcmUpKSB7XG4gICAgICAgICAgICAgICAgbWlkZGxld2FyZS5mb3JFYWNoKG0gPT4gdGhpcy51c2VNaWRkbGV3YXJlKHJvdXRlciwgbSwgbmFtZSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVzZU1pZGRsZXdhcmUocm91dGVyLCBtaWRkbGV3YXJlLCBuYW1lKTtcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcbiAgICAgICAgfSk7ICAgICAgICBcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSByb3V0ZSB0byBhIHJvdXRlciwgc2tpcHBlZCB3aGlsZSB0aGUgc2VydmVyIHJ1bm5pbmcgaW4gZGVhZiBtb2RlLiAgICAgXG4gICAgICogQHBhcmFtIHJvdXRlclxuICAgICAqIEBwYXJhbSBtZXRob2RcbiAgICAgKiBAcGFyYW0gcm91dGVcbiAgICAgKiBAcGFyYW0gYWN0aW9uc1xuICAgICAqL1xuICAgIGFkZFJvdXRlKHJvdXRlciwgbWV0aG9kLCByb3V0ZSwgYWN0aW9ucykge1xuICAgICAgICBsZXQgaGFuZGxlcnMgPSBbXSwgbWlkZGxld2FyZUZhY3Rvcnk7XG5cbiAgICAgICAgaWYgKF8uaXNQbGFpbk9iamVjdChhY3Rpb25zKSkge1xuICAgICAgICAgICAgXy5mb3JPd24oYWN0aW9ucywgKG9wdGlvbnMsIG5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICBtaWRkbGV3YXJlRmFjdG9yeSA9IHRoaXMuZ2V0TWlkZGxld2FyZUZhY3RvcnkobmFtZSk7XG4gICAgICAgICAgICAgICAgaGFuZGxlcnMucHVzaCh0aGlzLl93cmFwTWlkZGxld2FyZVRyYWNlcihtaWRkbGV3YXJlRmFjdG9yeShvcHRpb25zLCB0aGlzKSwgbmFtZSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY3Rpb25zID0gXy5jYXN0QXJyYXkoYWN0aW9ucyk7XG4gICAgICAgICAgICBsZXQgbGFzdEluZGV4ID0gYWN0aW9ucy5sZW5ndGggLSAxO1xuXG4gICAgICAgICAgICBfLmVhY2goYWN0aW9ucywgKGFjdGlvbiwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB0eXBlID0gdHlwZW9mIGFjdGlvbjtcblxuICAgICAgICAgICAgICAgIGlmIChpID09PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbGFzdCBtaWRkbGV3YXJlIG1heSBiZSBhbiBhY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIGFjdGlvbi5sYXN0SW5kZXhPZignLicpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdhY3Rpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IGFjdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICdvYmplY3QnO1xuICAgICAgICAgICAgICAgICAgICB9ICAgIFxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBbICduYW1lZE1pZGRsZXdhcmUnIF1cbiAgICAgICAgICAgICAgICAgICAgbWlkZGxld2FyZUZhY3RvcnkgPSB0aGlzLmdldE1pZGRsZXdhcmVGYWN0b3J5KGFjdGlvbik7ICAgXG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IG1pZGRsZXdhcmUgPSBtaWRkbGV3YXJlRmFjdG9yeShudWxsLCB0aGlzKTtcblxuICAgICAgICAgICAgICAgICAgICAvL2luIGNhc2UgaXQncyByZWdpc3RlciBieSB0aGUgbWlkZGxld2FyZUZhY3RvcnkgZmVhdHVyZVxuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShtaWRkbGV3YXJlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWlkZGxld2FyZS5mb3JFYWNoKChtaWRkbGV3YXJlSXRlbSwgaSkgPT4gaGFuZGxlcnMucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl93cmFwTWlkZGxld2FyZVRyYWNlcihtaWRkbGV3YXJlSXRlbSwgYCR7YWN0aW9ufS0ke2l9YCArIChtaWRkbGV3YXJlLm5hbWUgPyAoJy0nICsgbWlkZGxld2FyZS5uYW1lKSA6ICcnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVycy5wdXNoKHRoaXMuX3dyYXBNaWRkbGV3YXJlVHJhY2VyKG1pZGRsZXdhcmUsIGFjdGlvbikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXJzLnB1c2godGhpcy5fd3JhcE1pZGRsZXdhcmVUcmFjZXIoYWN0aW9uKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFjdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0OiBhY3Rpb24ubGVuZ3RoID4gMCAmJiBhY3Rpb24ubGVuZ3RoIDw9IDIsICdJbnZhbGlkIG1pZGRsZXdhcmUgZW50cnknO1xuXG4gICAgICAgICAgICAgICAgICAgIG1pZGRsZXdhcmVGYWN0b3J5ID0gdGhpcy5nZXRNaWRkbGV3YXJlRmFjdG9yeShhY3Rpb25bMF0pOyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXJzLnB1c2godGhpcy5fd3JhcE1pZGRsZXdhcmVUcmFjZXIobWlkZGxld2FyZUZhY3RvcnkoYWN0aW9uLmxlbmd0aCA+IDEgPyBhY3Rpb25bMV0gOiB1bmRlZmluZWQsIHRoaXMpKSk7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnQ6IF8uaXNQbGFpbk9iamVjdChhY3Rpb24pICYmICduYW1lJyBpbiBhY3Rpb24sICdJbnZhbGlkIG1pZGRsZXdhcmUgZW50cnknO1xuXG4gICAgICAgICAgICAgICAgICAgIG1pZGRsZXdhcmVGYWN0b3J5ID0gdGhpcy5nZXRNaWRkbGV3YXJlRmFjdG9yeShhY3Rpb24ubmFtZSk7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcnMucHVzaCh0aGlzLl93cmFwTWlkZGxld2FyZVRyYWNlcihtaWRkbGV3YXJlRmFjdG9yeShhY3Rpb24ub3B0aW9ucywgdGhpcyksIGFjdGlvbi5uYW1lKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJvdXRlclttZXRob2RdKHJvdXRlLCAuLi5oYW5kbGVycyk7XG5cbiAgICAgICAgbGV0IGVuZHBvaW50ID0gcm91dGVyLm9wdHMucHJlZml4ID8gdXJsSm9pbih0aGlzLnJvdXRlLCByb3V0ZXIub3B0cy5wcmVmaXgsIHJvdXRlKSA6IHVybEpvaW4odGhpcy5yb3V0ZSwgcm91dGUpO1xuXG4gICAgICAgIHRoaXMubG9nKCd2ZXJib3NlJywgYFJvdXRlIFwiJHttZXRob2R9OiR7ZW5kcG9pbnR9XCIgaXMgYWRkZWQgZnJvbSBtb2R1bGUgWyR7dGhpcy5uYW1lfV0uYCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSAgICBcblxuICAgIC8qKlxuICAgICAqIEF0dGFjaCBhIHJvdXRlciB0byB0aGlzIGFwcCBtb2R1bGUsIHNraXBwZWQgd2hpbGUgdGhlIHNlcnZlciBydW5uaW5nIGluIGRlYWYgbW9kZSAgICAgXG4gICAgICogQHBhcmFtIHtSb3V0ZXJ9IG5lc3RlZFJvdXRlclxuICAgICAqL1xuICAgIGFkZFJvdXRlcihuZXN0ZWRSb3V0ZXIpIHtcbiAgICAgICAgdGhpcy5yb3V0ZXIudXNlKG5lc3RlZFJvdXRlci5yb3V0ZXMoKSk7XG4gICAgICAgIHRoaXMucm91dGVyLnVzZShuZXN0ZWRSb3V0ZXIuYWxsb3dlZE1ldGhvZHMoKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEF0dGFjaCBhIHJvdXRlciB0byB0aGlzIGFwcCBtb2R1bGUgYnkgbW91bnRpbmcgdGhlIHJvdXRlciB0byBhIHJvdXRlXG4gICAgICogQHBhcmFtIHsqfSByb3V0ZSBcbiAgICAgKiBAcGFyYW0geyp9IHJvdXRlciBcbiAgICAgKi9cbiAgICBtb3VudFJvdXRlcihyb3V0ZSwgcm91dGVyKSB7XG4gICAgICAgIHRoaXMucm91dGVyLnVzZShtb3VudChyb3V0ZSwgcm91dGVyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJhbnNsYXRlIGEgcmVsYXRpdmUgcGF0aCBhbmQgcXVlcnkgcGFyYW1ldGVycyBpZiBhbnkgdG8gYSB1cmwgcGF0aCAgICAgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlUGF0aCAtIFJlbGF0aXZlIHBhdGhcbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXRoT3JRdWVyeV0gLSBRdWVyaWVzXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICB0b1dlYlBhdGgocmVsYXRpdmVQYXRoLCAuLi5wYXRoT3JRdWVyeSkge1xuICAgICAgICBsZXQgdXJsLCBxdWVyeTtcblxuICAgICAgICBpZiAocGF0aE9yUXVlcnkgJiYgcGF0aE9yUXVlcnkubGVuZ3RoID4gMCAmJiAocGF0aE9yUXVlcnkubGVuZ3RoID4gMSB8fCBwYXRoT3JRdWVyeVswXSAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgaWYgKF8uaXNPYmplY3QocGF0aE9yUXVlcnlbcGF0aE9yUXVlcnkubGVuZ3RoIC0gMV0pKSB7XG4gICAgICAgICAgICAgICAgcXVlcnkgPSBwYXRoT3JRdWVyeS5wb3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhdGhPclF1ZXJ5LnVuc2hpZnQocmVsYXRpdmVQYXRoKTtcbiAgICAgICAgICAgIHVybCA9IHVybEpvaW4odGhpcy5yb3V0ZSwgLi4ucGF0aE9yUXVlcnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdXJsID0gdXJsSm9pbih0aGlzLnJvdXRlLCByZWxhdGl2ZVBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsID0gZW5zdXJlTGVmdFNsYXNoKHVybCk7XG5cbiAgICAgICAgaWYgKHF1ZXJ5KSB7XG4gICAgICAgICAgICB1cmwgPSB1cmxBcHBlbmRRdWVyeSh1cmwsIHF1ZXJ5KTtcbiAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKCcvPycsICc/Jyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdXJsO1xuICAgIH0gICAgXG5cbiAgICAvKipcbiAgICAgKiBQcmVwYXJlIGNvbnRleHQgZm9yIGtvYSBhY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY3R4IC0gS29hIHJlcXVlc3QgY29udGV4dFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGFjdGlvbiAtIEFjdGlvbiBmdW5jdGlvblxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9ufVxuICAgICAqL1xuICAgIHdyYXBBY3Rpb24oYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBhc3luYyAoY3R4KSA9PiB7XG4gICAgICAgICAgICBjdHgudG9VcmwgPSAocmVsYXRpdmVQYXRoLCAuLi5wYXRoT3JRdWVyeSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdHgub3JpZ2luICsgdGhpcy50b1dlYlBhdGgocmVsYXRpdmVQYXRoLCAuLi5wYXRoT3JRdWVyeSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGN0eC5zdGF0ZSwge1xuICAgICAgICAgICAgICAgIF9zZWxmOiBjdHgub3JpZ2luYWxVcmwgfHwgdGhpcy50b1dlYlBhdGgoY3R4LnVybCksXG4gICAgICAgICAgICAgICAgX186IHRoaXMuX18sXG4gICAgICAgICAgICAgICAgX2Jhc2U6IGVuc3VyZVJpZ2h0U2xhc2godGhpcy50b1dlYlBhdGgoKSksXG4gICAgICAgICAgICAgICAgX21ha2VQYXRoOiAocmVsYXRpdmVQYXRoLCBxdWVyeSkgPT4gdGhpcy50b1dlYlBhdGgocmVsYXRpdmVQYXRoLCBxdWVyeSksXG4gICAgICAgICAgICAgICAgX21ha2VVcmw6IChyZWxhdGl2ZVBhdGgsIHF1ZXJ5KSA9PiBjdHgudG9VcmwocmVsYXRpdmVQYXRoLCBxdWVyeSkgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoY3R4LmNzcmYpIHsgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjdHguc3RhdGUuX2NzcmYgPSBjdHguY3NyZjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGFjdGlvbihjdHgpO1xuICAgICAgICB9OyAgICAgICAgXG4gICAgfSAgIFxuXG4gICAgdXNlTWlkZGxld2FyZShyb3V0ZXIsIG1pZGRsZXdhcmUsIG5hbWUpIHsgICAgICAgICAgXG4gICAgICAgIGFzc2VydDogdHlwZW9mIG1pZGRsZXdhcmUgPT09ICdmdW5jdGlvbicsIG1pZGRsZXdhcmU7XG4gICAgICAgIHJvdXRlci51c2UodGhpcy5fd3JhcE1pZGRsZXdhcmVUcmFjZXIobWlkZGxld2FyZSwgbmFtZSkpO1xuICAgICAgICB0aGlzLmxvZygndmVyYm9zZScsIGBBdHRhY2hlZCBtaWRkbGV3YXJlIFske25hbWV9XS5gKTtcbiAgICB9XG5cbiAgICBfd3JhcE1pZGRsZXdhcmVUcmFjZXIobWlkZGxld2FyZSwgbmFtZSkgeyAgICAgICAgXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudHJhY2VNaWRkbGV3YXJlcykgeyAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGFzeW5jIChjdHgsIG5leHQpID0+IHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdGhpcy5sb2coJ2RlYnVnJywgYFN0ZXAgaW4gbWlkZGxld2FyZSBcIiR7bmFtZSB8fCBtaWRkbGV3YXJlLm5hbWV9XCIgLi4uYCk7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxldCByZXQgPSBhd2FpdCBtaWRkbGV3YXJlKGN0eCwgbmV4dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2coJ2RlYnVnJywgYFN0ZXAgb3V0IGZyb20gbWlkZGxld2FyZSBcIiR7bmFtZSB8fCBtaWRkbGV3YXJlLm5hbWV9XCIuYCk7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWlkZGxld2FyZTtcbiAgICB9XG5cbiAgICBfZ2V0RmVhdHVyZUZhbGxiYWNrUGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLl9nZXRGZWF0dXJlRmFsbGJhY2tQYXRoKCkuY29uY2F0KFsgcGF0aC5qb2luKHRoaXMuYmFja2VuZFBhdGgsIExpdGVyYWwuRkVBVFVSRVNfUEFUSCkgXSk7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSb3V0YWJsZTsiXX0=