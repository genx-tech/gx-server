"use strict";

require("source-map-support/register");

const {
  _,
  text
} = require('@genx/july');

const Router = require('@koa/router');

const {
  InvalidConfiguration
} = require('@genx/error');

const Literal = require('../enum/Literal');

function load_(app, baseRoute, options) {
  let router = baseRoute === '/' ? new Router() : new Router({
    prefix: baseRoute
  });

  if (options.middlewares) {
    app.useMiddlewares(router, options.middlewares);
  }

  _.forOwn(options.rules || {}, (methods, subRoute) => {
    let pos = subRoute.indexOf(':/');

    if (pos !== -1) {
      if (pos === 0) {
        throw new InvalidConfiguration('Invalid route rule syntax: ' + subRoute, app, `routing[${baseRoute}].rule.rules`);
      }

      let embeddedMethod = subRoute.substr(0, pos).toLocaleLowerCase();
      subRoute = subRoute.substr(pos + 2);
      methods = {
        [embeddedMethod]: methods
      };
    }

    subRoute = text.ensureStartsWith(subRoute, '/');

    if (typeof methods === 'string' || Array.isArray(methods)) {
      methods = {
        get: methods
      };
    }

    _.forOwn(methods, (middlewares, method) => {
      if (!Literal.ALLOWED_HTTP_METHODS.has(method) && method !== 'all') {
        throw new InvalidConfiguration('Unsupported http method: ' + method, app, `routing[${baseRoute}].rule.rules[${subRoute}]`);
      }

      app.addRoute(router, method, subRoute, middlewares);
    });
  });

  app.addRouter(router);
}

;
module.exports = load_;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXJzL3J1bGUuanMiXSwibmFtZXMiOlsiXyIsInRleHQiLCJyZXF1aXJlIiwiUm91dGVyIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJMaXRlcmFsIiwibG9hZF8iLCJhcHAiLCJiYXNlUm91dGUiLCJvcHRpb25zIiwicm91dGVyIiwicHJlZml4IiwibWlkZGxld2FyZXMiLCJ1c2VNaWRkbGV3YXJlcyIsImZvck93biIsInJ1bGVzIiwibWV0aG9kcyIsInN1YlJvdXRlIiwicG9zIiwiaW5kZXhPZiIsImVtYmVkZGVkTWV0aG9kIiwic3Vic3RyIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJlbnN1cmVTdGFydHNXaXRoIiwiQXJyYXkiLCJpc0FycmF5IiwiZ2V0IiwibWV0aG9kIiwiQUxMT1dFRF9IVFRQX01FVEhPRFMiLCJoYXMiLCJhZGRSb3V0ZSIsImFkZFJvdXRlciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTTtBQUFFQSxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBO0FBQUwsSUFBY0MsT0FBTyxDQUFDLFlBQUQsQ0FBM0I7O0FBQ0EsTUFBTUMsTUFBTSxHQUFHRCxPQUFPLENBQUMsYUFBRCxDQUF0Qjs7QUFDQSxNQUFNO0FBQUVFLEVBQUFBO0FBQUYsSUFBMkJGLE9BQU8sQ0FBQyxhQUFELENBQXhDOztBQUNBLE1BQU1HLE9BQU8sR0FBR0gsT0FBTyxDQUFDLGlCQUFELENBQXZCOztBQTJDQSxTQUFTSSxLQUFULENBQWVDLEdBQWYsRUFBb0JDLFNBQXBCLEVBQStCQyxPQUEvQixFQUF3QztBQUNwQyxNQUFJQyxNQUFNLEdBQUdGLFNBQVMsS0FBSyxHQUFkLEdBQW9CLElBQUlMLE1BQUosRUFBcEIsR0FBbUMsSUFBSUEsTUFBSixDQUFXO0FBQUNRLElBQUFBLE1BQU0sRUFBRUg7QUFBVCxHQUFYLENBQWhEOztBQUVBLE1BQUlDLE9BQU8sQ0FBQ0csV0FBWixFQUF5QjtBQUNyQkwsSUFBQUEsR0FBRyxDQUFDTSxjQUFKLENBQW1CSCxNQUFuQixFQUEyQkQsT0FBTyxDQUFDRyxXQUFuQztBQUNIOztBQUVEWixFQUFBQSxDQUFDLENBQUNjLE1BQUYsQ0FBU0wsT0FBTyxDQUFDTSxLQUFSLElBQWlCLEVBQTFCLEVBQThCLENBQUNDLE9BQUQsRUFBVUMsUUFBVixLQUF1QjtBQUNqRCxRQUFJQyxHQUFHLEdBQUdELFFBQVEsQ0FBQ0UsT0FBVCxDQUFpQixJQUFqQixDQUFWOztBQUVBLFFBQUlELEdBQUcsS0FBSyxDQUFDLENBQWIsRUFBZ0I7QUFDWixVQUFJQSxHQUFHLEtBQUssQ0FBWixFQUFlO0FBQ1gsY0FBTSxJQUFJZCxvQkFBSixDQUNGLGdDQUFnQ2EsUUFEOUIsRUFFRlYsR0FGRSxFQUdELFdBQVVDLFNBQVUsY0FIbkIsQ0FBTjtBQUlIOztBQUlELFVBQUlZLGNBQWMsR0FBR0gsUUFBUSxDQUFDSSxNQUFULENBQWdCLENBQWhCLEVBQW1CSCxHQUFuQixFQUF3QkksaUJBQXhCLEVBQXJCO0FBQ0FMLE1BQUFBLFFBQVEsR0FBR0EsUUFBUSxDQUFDSSxNQUFULENBQWdCSCxHQUFHLEdBQUcsQ0FBdEIsQ0FBWDtBQUVBRixNQUFBQSxPQUFPLEdBQUc7QUFBQyxTQUFDSSxjQUFELEdBQWtCSjtBQUFuQixPQUFWO0FBQ0g7O0FBRURDLElBQUFBLFFBQVEsR0FBR2hCLElBQUksQ0FBQ3NCLGdCQUFMLENBQXNCTixRQUF0QixFQUFnQyxHQUFoQyxDQUFYOztBQUVBLFFBQUksT0FBT0QsT0FBUCxLQUFtQixRQUFuQixJQUErQlEsS0FBSyxDQUFDQyxPQUFOLENBQWNULE9BQWQsQ0FBbkMsRUFBMkQ7QUFDdkRBLE1BQUFBLE9BQU8sR0FBRztBQUFFVSxRQUFBQSxHQUFHLEVBQUVWO0FBQVAsT0FBVjtBQUNIOztBQUVEaEIsSUFBQUEsQ0FBQyxDQUFDYyxNQUFGLENBQVNFLE9BQVQsRUFBa0IsQ0FBQ0osV0FBRCxFQUFjZSxNQUFkLEtBQXlCO0FBQ3ZDLFVBQUksQ0FBQ3RCLE9BQU8sQ0FBQ3VCLG9CQUFSLENBQTZCQyxHQUE3QixDQUFpQ0YsTUFBakMsQ0FBRCxJQUE2Q0EsTUFBTSxLQUFLLEtBQTVELEVBQW1FO0FBQy9ELGNBQU0sSUFBSXZCLG9CQUFKLENBQ0YsOEJBQThCdUIsTUFENUIsRUFFRnBCLEdBRkUsRUFHRCxXQUFVQyxTQUFVLGdCQUFlUyxRQUFTLEdBSDNDLENBQU47QUFJSDs7QUFFRFYsTUFBQUEsR0FBRyxDQUFDdUIsUUFBSixDQUFhcEIsTUFBYixFQUFxQmlCLE1BQXJCLEVBQTZCVixRQUE3QixFQUF1Q0wsV0FBdkM7QUFDSCxLQVREO0FBVUgsR0FuQ0Q7O0FBcUNBTCxFQUFBQSxHQUFHLENBQUN3QixTQUFKLENBQWNyQixNQUFkO0FBQ0g7O0FBQUE7QUFFRHNCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjNCLEtBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHsgXywgdGV4dCB9ID0gcmVxdWlyZSgnQGdlbngvanVseScpO1xuY29uc3QgUm91dGVyID0gcmVxdWlyZSgnQGtvYS9yb3V0ZXInKTtcbmNvbnN0IHsgSW52YWxpZENvbmZpZ3VyYXRpb24gfSA9IHJlcXVpcmUoJ0BnZW54L2Vycm9yJyk7XG5jb25zdCBMaXRlcmFsID0gcmVxdWlyZSgnLi4vZW51bS9MaXRlcmFsJyk7XG5cbi8qKlxuICogUnVsZSBiYXNlZCByb3V0ZXIuXG4gKiBAbW9kdWxlIFJvdXRlcl9SdWxlIFxuICovXG5cbi8qKiBcbiAqIENyZWF0ZSBhIHJ1bGUtYmFzZWQgcm91dGVyLlxuICogQHBhcmFtIHtXZWJNb2R1bGV9IGFwcCBcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlUm91dGUgXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBcbiAqIEBleGFtcGxlXG4gKiAnPGJhc2UgcGF0aD4nOiB7XG4gKiAgICAgcnVsZToge1xuICogICAgICAgICBtaWRkbGV3YXJlczpcbiAqICAgICAgICAgcnVsZXM6IHtcbiAqICAgICAgICAgICAgIC8vIHR5cGUgMSwgZGVmYXVsdCBpcyBcImdldFwiLCBtZXRob2RzIG1hcHBlZCB0byBvbmUgYWN0aW9uXG4gKiAgICAgICAgICAgICAnPHN1YiByb3V0ZT4nOiAnPGNvbnRyb2xsZXIgd2l0aCByZWxhdGl2ZSBwYXRoPi48YWN0aW9uPicsXG4gKiBcbiAqICAgICAgICAgICAgIC8vIHR5cGUgMiwgZGlmZmVyZW50IG1ldGhvZHMgbWFwcGVkIHRvIGRpZmZlcmVudCBtZXRob2RcbiAqICAgICAgICAgICAgICc8c3ViIHJvdXRlPic6IHtcbiAqICAgICAgICAgICAgICAgICc8bWV0aG9kPic6ICc8Y29udHJvbGxlciB3aXRoIHJlbGF0aXZlIHBhdGg+LjxhY3Rpb24+J1xuICogICAgICAgICAgICAgfSxcbiAqIFxuICogICAgICAgICAgICAgLy8gdHlwZSAzLCB3aXRoIG1pZGRsZXdhcmVcbiAqICAgICAgICAgICAgICc8c3ViIHJvdXRlPic6IHtcbiAqICAgICAgICAgICAgICAgICAnPG1ldGhvZD4nOiB7XG4gKiAgICAgICAgICAgICAgICAgICAgJzxtaWRkbGV3YXJlIG5hbWU+JzogeyAvL21pZGRsZXdhcmUgb3B0aW9ucyB9XG4gKiAgICAgICAgICAgICAgICAgfVxuICogICAgICAgICAgICAgfSxcbiAqIFxuICogICAgICAgICAgICAgLy8gdHlwZSA0LCBhbGwgbWV0aG9kcyBtYXBwZWQgdG8gb25lIGFjdGlvblxuICogICAgICAgICAgICAgJzxtZXRob2Q+Oi88c3ViIHJvdXRlPic6ICc8Y29udHJvbGxlciB3aXRoIHJlbGF0aXZlIHBhdGg+LjxhY3Rpb24+J1xuICogXG4gKiAgICAgICAgICAgICAvLyB0eXBlIDUsIGFsbCBtZXRob2RzIG1hcHBlZCB0byBvbmUgYWN0aW9uXG4gKiAgICAgICAgICAgICAnPG1ldGhvZD46LzxzdWIgcm91dGU+Jzoge1xuICogICAgICAgICAgICAgICAgICc8bWlkZGxld2FyZSBuYW1lPic6IHsgLy9taWRkbGV3YXJlIG9wdGlvbnMgfVxuICogICAgICAgICAgICAgfVxuICogICAgICAgICB9XG4gKiAgICAgfVxuICogfVxuICovXG5mdW5jdGlvbiBsb2FkXyhhcHAsIGJhc2VSb3V0ZSwgb3B0aW9ucykge1xuICAgIGxldCByb3V0ZXIgPSBiYXNlUm91dGUgPT09ICcvJyA/IG5ldyBSb3V0ZXIoKSA6IG5ldyBSb3V0ZXIoe3ByZWZpeDogYmFzZVJvdXRlfSk7XG5cbiAgICBpZiAob3B0aW9ucy5taWRkbGV3YXJlcykge1xuICAgICAgICBhcHAudXNlTWlkZGxld2FyZXMocm91dGVyLCBvcHRpb25zLm1pZGRsZXdhcmVzKTtcbiAgICB9XG5cbiAgICBfLmZvck93bihvcHRpb25zLnJ1bGVzIHx8IHt9LCAobWV0aG9kcywgc3ViUm91dGUpID0+IHtcbiAgICAgICAgbGV0IHBvcyA9IHN1YlJvdXRlLmluZGV4T2YoJzovJyk7XG5cbiAgICAgICAgaWYgKHBvcyAhPT0gLTEpIHtcbiAgICAgICAgICAgIGlmIChwb3MgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgICAgICAgICdJbnZhbGlkIHJvdXRlIHJ1bGUgc3ludGF4OiAnICsgc3ViUm91dGUsIFxuICAgICAgICAgICAgICAgICAgICBhcHAsIFxuICAgICAgICAgICAgICAgICAgICBgcm91dGluZ1ske2Jhc2VSb3V0ZX1dLnJ1bGUucnVsZXNgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gbGlrZSBnZXQ6Lywgb3IgcG9zdDovXG5cbiAgICAgICAgICAgIGxldCBlbWJlZGRlZE1ldGhvZCA9IHN1YlJvdXRlLnN1YnN0cigwLCBwb3MpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBzdWJSb3V0ZSA9IHN1YlJvdXRlLnN1YnN0cihwb3MgKyAyKTtcblxuICAgICAgICAgICAgbWV0aG9kcyA9IHtbZW1iZWRkZWRNZXRob2RdOiBtZXRob2RzfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YlJvdXRlID0gdGV4dC5lbnN1cmVTdGFydHNXaXRoKHN1YlJvdXRlLCAnLycpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgbWV0aG9kcyA9PT0gJ3N0cmluZycgfHwgQXJyYXkuaXNBcnJheShtZXRob2RzKSkge1xuICAgICAgICAgICAgbWV0aG9kcyA9IHsgZ2V0OiBtZXRob2RzIH07XG4gICAgICAgIH1cblxuICAgICAgICBfLmZvck93bihtZXRob2RzLCAobWlkZGxld2FyZXMsIG1ldGhvZCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFMaXRlcmFsLkFMTE9XRURfSFRUUF9NRVRIT0RTLmhhcyhtZXRob2QpICYmIG1ldGhvZCAhPT0gJ2FsbCcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgICAgICAgICdVbnN1cHBvcnRlZCBodHRwIG1ldGhvZDogJyArIG1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgICAgICAgICBgcm91dGluZ1ske2Jhc2VSb3V0ZX1dLnJ1bGUucnVsZXNbJHtzdWJSb3V0ZX1dYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFwcC5hZGRSb3V0ZShyb3V0ZXIsIG1ldGhvZCwgc3ViUm91dGUsIG1pZGRsZXdhcmVzKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBhcHAuYWRkUm91dGVyKHJvdXRlcik7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvYWRfOyJdfQ==