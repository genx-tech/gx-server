"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  eachAsync_
} = require('rk-utils');

const {
  Runable,
  ServiceContainer
} = require('@genx/app');

const Routable = require('./Routable');

const Literal = require('./enum/Literal');

const mount = require('koa-mount');

class WebServer extends Routable(Runable(ServiceContainer)) {
  constructor(name, options) {
    if (typeof options === 'undefined' && _.isPlainObject(name)) {
      options = name;
      name = undefined;
    }

    super(name || 'server', Object.assign({
      configName: Literal.SERVER_CFG_NAME
    }, options));
    this.server = this;
    this.isServer = true;
    this.appModulesPath = this.toAbsolutePath(this.options.appModulesPath || Literal.APP_MODULES_PATH);
    this.route = "/";
    this.on('configLoaded', () => {
      this.loadMiddlewaresFrom(path.resolve(__dirname, Literal.MIDDLEWARES_PATH));
    });
  }

  async stop_() {
    if (this.started && this.appModules) {
      await eachAsync_(this.appModules, app => app.stop_());
      delete this.appModules;
      delete this.appModulesByAlias;
    }

    if (this.httpServer) {
      await new Promise((resolve, reject) => {
        this.httpServer.close(err => {
          if (err) return reject(err);
          resolve();
        });
      });
      delete this.httpServer;
      this.log('info', `The http service is stopped.`);
    }

    return super.stop_();
  }

  mountApp(app) {
    if (!this.appModules) {
      this.appModules = {};
      this.appModulesByAlias = {};
    }

    if (!!this.appModules.hasOwnProperty(app.route)) {
      throw new Error("Assertion failed: !this.appModules.hasOwnProperty(app.route)");
    }

    this.router.use(mount(app.route, app.router));
    this.appModules[app.route] = app;

    if (app.name in this.appModulesByAlias) {
      let existingApp = this.appModulesByAlias[app.name];
      this.appModulesByAlias[`${existingApp.name}[@${existingApp.route}]`] = existingApp;
      delete this.appModulesByAlias[app.name];
      this.appModulesByAlias[`${app.name}[@${app.route}]`] = app;
    } else {
      this.appModulesByAlias[app.name] = app;
    }

    this.log('verbose', `All routes from app [${app.name}] are mounted under "${app.route}".`);
  }

  getAppByRoute(p) {
    return this.appModules[p];
  }

  getAppByAlias(a) {
    return this.appModulesByAlias[a];
  }

  getService(name) {
    let pos = name.indexOf(':');

    if (pos === -1) {
      return super.getService(name);
    }

    let modAlias = name.substr(0, pos);
    name = name.substr(pos + 1);
    let app = this.getAppByAlias(modAlias);
    return app && app.getService(name, true);
  }

  _getFeatureFallbackPath() {
    let pathArray = super._getFeatureFallbackPath();

    pathArray.splice(1, 0, path.resolve(__dirname, Literal.FEATURES_PATH), path.resolve(__dirname, Literal.SERVER_FEATURES_PATH));
    return pathArray;
  }

}

module.exports = WebServer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9XZWJTZXJ2ZXIuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJfIiwiZWFjaEFzeW5jXyIsIlJ1bmFibGUiLCJTZXJ2aWNlQ29udGFpbmVyIiwiUm91dGFibGUiLCJMaXRlcmFsIiwibW91bnQiLCJXZWJTZXJ2ZXIiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJvcHRpb25zIiwiaXNQbGFpbk9iamVjdCIsInVuZGVmaW5lZCIsIk9iamVjdCIsImFzc2lnbiIsImNvbmZpZ05hbWUiLCJTRVJWRVJfQ0ZHX05BTUUiLCJzZXJ2ZXIiLCJpc1NlcnZlciIsImFwcE1vZHVsZXNQYXRoIiwidG9BYnNvbHV0ZVBhdGgiLCJBUFBfTU9EVUxFU19QQVRIIiwicm91dGUiLCJvbiIsImxvYWRNaWRkbGV3YXJlc0Zyb20iLCJyZXNvbHZlIiwiX19kaXJuYW1lIiwiTUlERExFV0FSRVNfUEFUSCIsInN0b3BfIiwic3RhcnRlZCIsImFwcE1vZHVsZXMiLCJhcHAiLCJhcHBNb2R1bGVzQnlBbGlhcyIsImh0dHBTZXJ2ZXIiLCJQcm9taXNlIiwicmVqZWN0IiwiY2xvc2UiLCJlcnIiLCJsb2ciLCJtb3VudEFwcCIsImhhc093blByb3BlcnR5Iiwicm91dGVyIiwidXNlIiwiZXhpc3RpbmdBcHAiLCJnZXRBcHBCeVJvdXRlIiwicCIsImdldEFwcEJ5QWxpYXMiLCJhIiwiZ2V0U2VydmljZSIsInBvcyIsImluZGV4T2YiLCJtb2RBbGlhcyIsInN1YnN0ciIsIl9nZXRGZWF0dXJlRmFsbGJhY2tQYXRoIiwicGF0aEFycmF5Iiwic3BsaWNlIiwiRkVBVFVSRVNfUEFUSCIsIlNFUlZFUl9GRUFUVVJFU19QQVRIIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQTtBQUFMLElBQW9CRixPQUFPLENB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QUFDQXhDLElBQUFBLElBQUksR0FBR0EsSUFBSSxDQUFDMkMsTUFBTCxDQUFZSCxHQUFHLEdBQUMsQ0FBaEIsQ0FBUDtBQUVBLFFBQUlsQixHQUFHLEdBQUcsS0FBS2UsYUFBTCxDQUFtQkssUUFBbkIsQ0FBVjtBQUNBLFdBQU9wQixHQUFHLElBQUlBLEdBQUcsQ0FBQ2lCLFVBQUosQ0FBZXZDLElBQWYsRUFBcUIsSUFBckIsQ0FBZDtBQUNIOztBQUVENEMsRUFBQUEsdUJBQXVCLEdBQUc7QUFDdEIsUUFBSUMsU0FBUyxHQUFHLE1BQU1ELHVCQUFOLEVBQWhCOztBQUNBQyxJQUFBQSxTQUFTLENBQUNDLE1BQVYsQ0FBaUIsQ0FBakIsRUFBb0IsQ0FBcEIsRUFBdUJ6RCxJQUFJLENBQUMyQixPQUFMLENBQWFDLFNBQWIsRUFBd0JyQixPQUFPLENBQUNtRCxhQUFoQyxDQUF2QixFQUF1RTFELElBQUksQ0FBQzJCLE9BQUwsQ0FBYUMsU0FBYixFQUF3QnJCLE9BQU8sQ0FBQ29ELG9CQUFoQyxDQUF2RTtBQUNBLFdBQU9ILFNBQVA7QUFDSDs7QUF6SXVEOztBQTRJNURJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnBELFNBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCB7IF8sIGVhY2hBc3luY18gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IFJ1bmFibGUsIFNlcnZpY2VDb250YWluZXIgfSA9IHJlcXVpcmUoJ0BnZW54L2FwcCcpO1xuY29uc3QgUm91dGFibGUgPSByZXF1aXJlKCcuL1JvdXRhYmxlJyk7XG5jb25zdCBMaXRlcmFsID0gcmVxdWlyZSgnLi9lbnVtL0xpdGVyYWwnKTtcbmNvbnN0IG1vdW50ID0gcmVxdWlyZSgna29hLW1vdW50Jyk7XG5cbi8qKlxuICogV2ViIHNlcnZlciBjbGFzcy5cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUm91dGFibGUoQXBwKVxuICovXG5jbGFzcyBXZWJTZXJ2ZXIgZXh0ZW5kcyBSb3V0YWJsZShSdW5hYmxlKFNlcnZpY2VDb250YWluZXIpKSB7XG4gICAgLyoqICAgICAgICAgIFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZT0nc2VydmVyJ10gLSBUaGUgbmFtZSBvZiB0aGUgc2VydmVyLiAgICAgXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSAtIFRoZSBhcHAgbW9kdWxlJ3MgZXh0cmEgb3B0aW9ucyBkZWZpbmVkIGluIGl0cyBwYXJlbnQncyBjb25maWd1cmF0aW9uLlxuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBbb3B0aW9ucy5sb2dnZXJdIC0gTG9nZ2VyIG9wdGlvbnNcbiAgICAgKiBAcHJvcGVydHkge2Jvb2x9IFtvcHRpb25zLnZlcmJvc2U9ZmFsc2VdIC0gRmxhZyB0byBvdXRwdXQgdHJpdmlhbCBpbmZvcm1hdGlvbiBmb3IgZGlhZ25vc3RpY3NcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW29wdGlvbnMuZW52XSAtIEVudmlyb25tZW50LCBkZWZhdWx0IHRvIHByb2Nlc3MuZW52Lk5PREVfRU5WXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtvcHRpb25zLndvcmtpbmdQYXRoXSAtIEFwcCdzIHdvcmtpbmcgcGF0aCwgZGVmYXVsdCB0byBwcm9jZXNzLmN3ZCgpXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtvcHRpb25zLmNvbmZpZ1BhdGhdIC0gQXBwJ3MgY29uZmlnIHBhdGgsIGRlZmF1bHQgdG8gXCJjb25mXCIgdW5kZXIgd29ya2luZ1BhdGggICBcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW29wdGlvbnMuY29uZmlnTmFtZV0gLSBBcHAncyBjb25maWcgYmFzZW5hbWUsIGRlZmF1bHQgdG8gXCJhcHBcIlxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbb3B0aW9ucy5iYWNrZW5kUGF0aD0nc2VydmVyJ10gLSBSZWxhdGl2ZSBwYXRoIG9mIGJhY2stZW5kIHNlcnZlciBzb3VyY2UgZmlsZXNcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW29wdGlvbnMuY2xpZW50UGF0aD0nY2xpZW50J10gLSBSZWxhdGl2ZSBwYXRoIG9mIGZyb250LWVuZCBjbGllbnQgc291cmNlIGZpbGVzICAgICBcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gW29wdGlvbnMucHVibGljUGF0aD0ncHVibGljJ10gLSBSZWxhdGl2ZSBwYXRoIG9mIGZyb250LWVuZCBzdGF0aWMgZmlsZXMgICAgXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtvcHRpb25zLmFwcE1vZHVsZXNQYXRoPWFwcF9tb2R1bGVzXSAtIFJlbGF0aXZlIHBhdGggb2YgY2hpbGQgbW9kdWxlcyAgICAgICAgICAgICAgICAgICAgXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobmFtZSwgb3B0aW9ucykge1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICd1bmRlZmluZWQnICYmIF8uaXNQbGFpbk9iamVjdChuYW1lKSkge1xuICAgICAgICAgICAgb3B0aW9ucyA9IG5hbWU7XG4gICAgICAgICAgICBuYW1lID0gdW5kZWZpbmVkO1xuICAgICAgICB9ICAgICAgICBcblxuICAgICAgICBzdXBlcihuYW1lIHx8ICdzZXJ2ZXInLCBPYmplY3QuYXNzaWduKHsgY29uZmlnTmFtZTogTGl0ZXJhbC5TRVJWRVJfQ0ZHX05BTUUgfSwgb3B0aW9ucykpOyAgICBcblxuICAgICAgICAvKipcbiAgICAgICAgICogSG9zdGluZyBzZXJ2ZXIuXG4gICAgICAgICAqIEBtZW1iZXIge1dlYlNlcnZlcn1cbiAgICAgICAgICoqL1xuICAgICAgICB0aGlzLnNlcnZlciA9IHRoaXM7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZXRoZXIgaXQgaXMgYSBzZXJ2ZXIuXG4gICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59XG4gICAgICAgICAqKi9cbiAgICAgICAgdGhpcy5pc1NlcnZlciA9IHRydWU7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFwcCBtb2R1bGVzIHBhdGguXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYXBwTW9kdWxlc1BhdGggPSB0aGlzLnRvQWJzb2x1dGVQYXRoKHRoaXMub3B0aW9ucy5hcHBNb2R1bGVzUGF0aCB8fCBMaXRlcmFsLkFQUF9NT0RVTEVTX1BBVEgpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCYXNlIHJvdXRlLlxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJvdXRlID0gXCIvXCI7XG4gICAgICAgIFxuICAgICAgICB0aGlzLm9uKCdjb25maWdMb2FkZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAvLyBsb2FkIGJ1aWx0aW4gbWlkZGxld2FyZXNcbiAgICAgICAgICAgIHRoaXMubG9hZE1pZGRsZXdhcmVzRnJvbShwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBMaXRlcmFsLk1JRERMRVdBUkVTX1BBVEgpKTtcbiAgICAgICAgfSk7ICAgICAgICBcbiAgICB9XG5cbiAgICBhc3luYyBzdG9wXygpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhcnRlZCAmJiB0aGlzLmFwcE1vZHVsZXMpIHtcbiAgICAgICAgICAgIGF3YWl0IGVhY2hBc3luY18odGhpcy5hcHBNb2R1bGVzLCBhcHAgPT4gYXBwLnN0b3BfKCkpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuYXBwTW9kdWxlcztcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmFwcE1vZHVsZXNCeUFsaWFzO1xuICAgICAgICB9ICAgICAgICBcblxuICAgICAgICBpZiAodGhpcy5odHRwU2VydmVyKSB7XG4gICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5odHRwU2VydmVyLmNsb3NlKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikgcmV0dXJuIHJlamVjdChlcnIpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7ICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmh0dHBTZXJ2ZXI7XG4gICAgICAgICAgICB0aGlzLmxvZygnaW5mbycsIGBUaGUgaHR0cCBzZXJ2aWNlIGlzIHN0b3BwZWQuYCk7IFxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN1cGVyLnN0b3BfKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTW91bnQgYW4gYXBwIGF0IHNwZWNpZmllZCByb3V0ZS5cbiAgICAgKiBAcGFyYW0ge1dlYk1vZHVsZX0gYXBwIFxuICAgICAqL1xuICAgIG1vdW50QXBwKGFwcCkge1xuICAgICAgICBpZiAoIXRoaXMuYXBwTW9kdWxlcykge1xuICAgICAgICAgICAgdGhpcy5hcHBNb2R1bGVzID0ge307XG4gICAgICAgICAgICB0aGlzLmFwcE1vZHVsZXNCeUFsaWFzID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBhc3NlcnQ6ICF0aGlzLmFwcE1vZHVsZXMuaGFzT3duUHJvcGVydHkoYXBwLnJvdXRlKTtcblxuICAgICAgICB0aGlzLnJvdXRlci51c2UobW91bnQoYXBwLnJvdXRlLCBhcHAucm91dGVyKSk7XG4gICAgICAgIHRoaXMuYXBwTW9kdWxlc1thcHAucm91dGVdID0gYXBwO1xuXG4gICAgICAgIGlmIChhcHAubmFtZSBpbiB0aGlzLmFwcE1vZHVsZXNCeUFsaWFzKSB7XG4gICAgICAgICAgICBsZXQgZXhpc3RpbmdBcHAgPSB0aGlzLmFwcE1vZHVsZXNCeUFsaWFzW2FwcC5uYW1lXTtcbiAgICAgICAgICAgIC8vbW92ZSBidWNrZXRcbiAgICAgICAgICAgIHRoaXMuYXBwTW9kdWxlc0J5QWxpYXNbYCR7ZXhpc3RpbmdBcHAubmFtZX1bQCR7ZXhpc3RpbmdBcHAucm91dGV9XWBdID0gZXhpc3RpbmdBcHA7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5hcHBNb2R1bGVzQnlBbGlhc1thcHAubmFtZV07XG5cbiAgICAgICAgICAgIHRoaXMuYXBwTW9kdWxlc0J5QWxpYXNbYCR7YXBwLm5hbWV9W0Ake2FwcC5yb3V0ZX1dYF0gPSBhcHA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFwcE1vZHVsZXNCeUFsaWFzW2FwcC5uYW1lXSA9IGFwcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubG9nKCd2ZXJib3NlJywgYEFsbCByb3V0ZXMgZnJvbSBhcHAgWyR7YXBwLm5hbWV9XSBhcmUgbW91bnRlZCB1bmRlciBcIiR7YXBwLnJvdXRlfVwiLmApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgYXBwIG1vZHVsZSBvYmplY3QgYnkgYmFzZSByb3V0ZVxuICAgICAqIEBwYXJhbSB7Kn0gcCAtIEFwcCBtb2R1bGUgYmFzZSByb3V0ZSBzdGFydGVkIHdpdGggXCIvXCJcbiAgICAgKi9cbiAgICBnZXRBcHBCeVJvdXRlKHApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwTW9kdWxlc1twXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGFwcCBtb2R1bGUgb2JqZWN0IGJ5IGFwcCBhbGlhcywgdXN1YWxseSB0aGUgYXBwIG5hbWUgaWYgbm8gZHVwbGljYXRlIGVudHJ5XG4gICAgICogQHBhcmFtIHsqfSBhIC0gQXBwIG1vZHVsZSBhbGlhc1xuICAgICAqL1xuICAgIGdldEFwcEJ5QWxpYXMoYSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBNb2R1bGVzQnlBbGlhc1thXTtcbiAgICB9XG5cbiAgICBnZXRTZXJ2aWNlKG5hbWUpIHtcbiAgICAgICAgbGV0IHBvcyA9IG5hbWUuaW5kZXhPZignOicpO1xuICAgICAgICBpZiAocG9zID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLmdldFNlcnZpY2UobmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbW9kQWxpYXMgPSBuYW1lLnN1YnN0cigwLCBwb3MpO1xuICAgICAgICBuYW1lID0gbmFtZS5zdWJzdHIocG9zKzEpO1xuXG4gICAgICAgIGxldCBhcHAgPSB0aGlzLmdldEFwcEJ5QWxpYXMobW9kQWxpYXMpO1xuICAgICAgICByZXR1cm4gYXBwICYmIGFwcC5nZXRTZXJ2aWNlKG5hbWUsIHRydWUpO1xuICAgIH1cblxuICAgIF9nZXRGZWF0dXJlRmFsbGJhY2tQYXRoKCkge1xuICAgICAgICBsZXQgcGF0aEFycmF5ID0gc3VwZXIuX2dldEZlYXR1cmVGYWxsYmFja1BhdGgoKTtcbiAgICAgICAgcGF0aEFycmF5LnNwbGljZSgxLCAwLCBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBMaXRlcmFsLkZFQVRVUkVTX1BBVEgpLCBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBMaXRlcmFsLlNFUlZFUl9GRUFUVVJFU19QQVRIKSk7XG4gICAgICAgIHJldHVybiBwYXRoQXJyYXk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYlNlcnZlcjsiXX0=