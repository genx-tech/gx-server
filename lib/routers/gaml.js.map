{"version":3,"sources":["../../src/routers/gaml.js"],"names":["path","require","glob","_","naming","text","Literal","Router","hasMethod","appendId","baseEndpoint","idName","module","exports","app","baseRoute","options","resourcePath","resolve","backendPath","resourcesPath","RESOURCES_PATH","router","prefix","dropIfEndsWith","useMiddleware","getMiddlewareFactory","errorOptions","middlewares","useMiddlewares","join","files","sync","nodir","each","file","entityName","basename","Controller","remaps","ensureStartsWith","kebabCase","camelCase","endpointWithId","addRoute","ctx","controller","find","post","findById","params","updateById","deleteById","addRouter"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst path = require(\"path\");\nconst { glob } = require(\"@genx/sys\");\nconst { _, naming, text } = require(\"@genx/july\");\nconst Literal = require(\"../enum/Literal\");\nconst Router = require(\"@koa/router\");\nconst { hasMethod } = require(\"../utils/Helpers\");\n\n/**\n * Gaml router.\n * @module Router_Gaml\n */\n\nconst appendId = (baseEndpoint, idName) => (idName ? `${baseEndpoint}/:${idName}` : baseEndpoint);\n\n/**\n * Create a gaml router.\n * @param {*} app\n * @param {string} baseRoute\n * @param {objects} options\n * @property {string} [options.resourcesPath]\n * @property {object|array} [options.middlewares]\n * @example\n *  '<base path>': {\n *      gaml: {\n *          resourcesPath:\n *          middlewares:\n *      }\n *  }\n *\n *  route                          http method    function of ctrl\n *  /:resource                     get            find\n *  /:resource                     post           post\n *  /:resource/:id                 get            findById\n *  /:resource/:id                 put            updateById\n *  /:resource/:id                 del            deleteById\n */\nmodule.exports = (app, baseRoute, options) => {\n    let resourcePath = path.resolve(app.backendPath, options.resourcesPath || Literal.RESOURCES_PATH);\n\n    let router = baseRoute === \"/\" ? new Router() : new Router({ prefix: text.dropIfEndsWith(baseRoute, '/') });\n\n    app.useMiddleware(router, app.getMiddlewareFactory(\"jsonError\")(options.errorOptions, app), \"jsonError\");\n\n    if (options.middlewares) {\n        app.useMiddlewares(router, options.middlewares);\n    }\n\n    let resourcesPath = path.join(resourcePath, \"*.js\");\n    let files = glob.sync(resourcesPath, { nodir: true });\n\n    _.each(files, (file) => {\n        let entityName = path.basename(file, \".js\");\n        let Controller = require(file);\n\n\n\n        let baseEndpoint;\n\n        if (options.remaps && entityName in options.remaps) {\n            baseEndpoint = text.ensureStartsWith(text.dropIfEndsWith(options.remaps[entityName], \"/\"), \"/\");\n        } else {\n            baseEndpoint = text.ensureStartsWith(naming.kebabCase(entityName), \"/\");\n        }\n\n        let idName = naming.camelCase(entityName) + \"Id\";\n        let endpointWithId = appendId(baseEndpoint, idName);\n\n       \n        if (typeof Controller === \"function\") {\n            app.addRoute(router, \"get\", baseEndpoint, (ctx) => {\n                const controller = new Controller(ctx)\n                if (hasMethod(controller, \"find\")) {\n                    return controller.find();\n                }\n            });\n\n            // if (hasMethod(controller, \"post\")) {\n            //     app.addRoute(router, \"post\", baseEndpoint, (ctx) => controller.post(ctx));\n            // }\n\n            app.addRoute(router, \"post\", baseEndpoint, (ctx) => {\n                const controller = new Controller(ctx)\n                if (hasMethod(controller, \"post\")) {\n                    return controller.post();\n                }\n            });\n\n\n            app.addRoute(router, \"get\", endpointWithId, (ctx) => {\n                const controller = new Controller(ctx)\n                if (hasMethod(controller, \"findById\")) {\n                    return controller.findById(ctx.params[idName]);\n                }\n            });\n        \n            app.addRoute(router, \"put\", endpointWithId, (ctx) => {\n                const controller = new Controller(ctx)\n                if (hasMethod(controller, \"updateById\")) {\n                    return controller.updateById(ctx.params[idName]);\n                }\n            });\n\n            app.addRoute(router, \"del\", endpointWithId, (ctx) => {\n                const controller = new Controller(ctx)\n                if (hasMethod(controller, \"deleteById\")) {\n                    return controller.deleteById(ctx.params[idName]);\n                }\n            });\n\n            // if (hasMethod(Controller, \"findById\")) {\n            //     app.addRoute(router, \"get\", endpointWithId, (ctx) => new Controller(ctx).findById(ctx.params[idName]));\n            // }\n\n            // if (hasMethod(Controller, \"updateById\")) {\n            //     app.addRoute(router, \"put\", endpointWithId, (ctx) => new Controller(ctx).updateById(ctx.params[idName]));\n            // }\n\n            // if (hasMethod(Controller, \"deleteById\")) {\n            //     app.addRoute(router, \"del\", endpointWithId, (ctx) => new Controller(ctx).deleteById(ctx.params[idName]));\n            // }\n        }\n    });\n\n    app.addRouter(router);\n};\n"],"file":"gaml.js"}