"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  text
} = require('@genx/july');

const {
  ServiceContainer
} = require('@genx/app');

const ModuleBase = require('./ModuleBase');

const Routable = require('./Routable');

const Literal = require('./enum/Literal');

class WebModule extends ModuleBase(Routable(ServiceContainer)) {
  constructor(server, name, route, appPath, options) {
    super(server, name, appPath, options);
    this.ß = void 0;
    this.route = text.ensureStartsWith(text.dropIfEndsWith(route, '/'), '/');
  }

  requireFromApp(appName, relativePath) {
    return this.server.requireFromApp(appßName, relativePath);
  }

  _getFeatureFallbackPath() {
    let pathArray = super._getFeatureFallbackPath();

    pathArray.splice(2, 0, path.resolve(__dirname, Literal.APP_FEATURES_PATH));
    return pathArray;
  }

}

module.exports = WebModule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9XZWJNb2R1bGUuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJfIiwidGV4dCIsIlNlcnZpY2VDb250YWluZXIiLCJNb2R1bGVCYXNlIiwiUm91dGFibGUiLCJMaXRlcmFsIiwiV2ViTW9kdWxlIiwiY29uc3RydWN0b3IiLCJzZXJ2ZXIiLCJuYW1lIiwicm91dGUiLCJhcHBQYXRoIiwib3B0aW9ucyIsIsOfIiwiZW5zdXJlU3RhcnRzV2l0aCIsImRyb3BJZkVuZHNXaXRoIiwicmVxdWlyZUZyb21BcHAiLCJhcHBOYW1lIiwicmVsYXRpdmVQYXRoIiwiYXBww59OYW1lIiwiX2dldEZlYXR1cmVGYWxsYmFja1BhdGgiLCJwYXRoQXJyYXkiLCJzcGxpY2UiLCJyZXNvbHZlIiwiX19kaXJuYW1lIiwiQVBQX0ZFQVRVUkVTX1BBVEgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBO0FBQUwsSUFBY0YsT0FBTyxDQUFDLFlBQUQsQ0FBM0I7O0FBQ0EsTUFBTTtBQUFFRyxFQUFBQTtBQUFGLElBQXVCSCxPQUFPLENBQUMsV0FBRCxDQUFwQzs7QUFDQSxNQUFNSSxVQUFVLEdBQUdKLE9BQU8sQ0FBQyxjQUFELENBQTFCOztBQUNBLE1BQU1LLFFBQVEsR0FBR0wsT0FBTyxDQUFDLFlBQUQsQ0FBeEI7O0FBQ0EsTUFBTU0sT0FBTyxHQUFHTixPQUFPLENBQUMsZ0JBQUQsQ0FBdkI7O0FBT0EsTUFBTU8sU0FBTixTQUF3QkgsVUFBVSxDQUFDQyxRQUFRLENBQUNGLGdCQUFELENBQVQsQ0FBbEMsQ0FBK0Q7QUFTM0RLLEVBQUFBLFdBQVcsQ0FBQ0MsTUFBRCxFQUFTQyxJQUFULEVBQWVDLEtBQWYsRUFBc0JDLE9BQXRCLEVBQStCQyxPQUEvQixFQUF3QztBQUMvQyxVQUFNSixNQUFOLEVBQWNDLElBQWQsRUFBb0JFLE9BQXBCLEVBQTZCQyxPQUE3QjtBQUQrQyxTQWFoREMsQ0FiZ0Q7QUFPL0MsU0FBS0gsS0FBTCxHQUFhVCxJQUFJLENBQUNhLGdCQUFMLENBQXNCYixJQUFJLENBQUNjLGNBQUwsQ0FBb0JMLEtBQXBCLEVBQTJCLEdBQTNCLENBQXRCLEVBQXVELEdBQXZELENBQWI7QUFDSDs7QUFNRE0sRUFBQUEsY0FBYyxDQUFDQyxPQUFELEVBQVVDLFlBQVYsRUFBd0I7QUFDbEMsV0FBTyxLQUFLVixNQUFMLENBQVlRLGNBQVosQ0FBMkJHLFFBQTNCLEVBQXFDRCxZQUFyQyxDQUFQO0FBQ0g7O0FBRURFLEVBQUFBLHVCQUF1QixHQUFHO0FBQ3RCLFFBQUlDLFNBQVMsR0FBRyxNQUFNRCx1QkFBTixFQUFoQjs7QUFDQUMsSUFBQUEsU0FBUyxDQUFDQyxNQUFWLENBQWlCLENBQWpCLEVBQW9CLENBQXBCLEVBQXVCeEIsSUFBSSxDQUFDeUIsT0FBTCxDQUFhQyxTQUFiLEVBQXdCbkIsT0FBTyxDQUFDb0IsaUJBQWhDLENBQXZCO0FBQ0EsV0FBT0osU0FBUDtBQUNIOztBQS9CMEQ7O0FBa0MvREssTUFBTSxDQUFDQyxPQUFQLEdBQWlCckIsU0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHsgXywgdGV4dCB9ID0gcmVxdWlyZSgnQGdlbngvanVseScpO1xuY29uc3QgeyBTZXJ2aWNlQ29udGFpbmVyIH0gPSByZXF1aXJlKCdAZ2VueC9hcHAnKTtcbmNvbnN0IE1vZHVsZUJhc2UgPSByZXF1aXJlKCcuL01vZHVsZUJhc2UnKTtcbmNvbnN0IFJvdXRhYmxlID0gcmVxdWlyZSgnLi9Sb3V0YWJsZScpO1xuY29uc3QgTGl0ZXJhbCA9IHJlcXVpcmUoJy4vZW51bS9MaXRlcmFsJyk7XG5cbi8qKlxuICogV2ViIGFwcGxpY2F0aW9uIG1vZHVsZSBjbGFzcy5cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgUm91dGFibGUoTGliTW9kdWxlKVxuICovXG5jbGFzcyBXZWJNb2R1bGUgZXh0ZW5kcyBNb2R1bGVCYXNlKFJvdXRhYmxlKFNlcnZpY2VDb250YWluZXIpKSB7XG4gICAgLyoqICAgICBcbiAgICAgKiBAcGFyYW0ge1dlYlNlcnZlcn0gc2VydmVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgYXBwIG1vZHVsZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcm91dGUgLSBUaGUgYmFzZSByb3V0ZSBvZiB0aGUgYXBwIG1vZHVsZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYXBwUGF0aCAtIFRoZSBwYXRoIHRvIGxvYWQgdGhlIGFwcCdzIG1vZHVsZSBmaWxlc1xuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gLSBUaGUgYXBwIG1vZHVsZSdzIGV4dHJhIG9wdGlvbnMgZGVmaW5lZCBpbiBpdHMgcGFyZW50J3MgY29uZmlndXJhdGlvbi4gICAgICAgICAgXG4gICAgICogQHByb3BlcnR5IHtib29sfSBbb3B0aW9ucy5sb2dXaXRoQXBwTmFtZT1mYWxzZV0gLSBGbGFnIHRvIGluY2x1ZGUgYXBwIG5hbWUgaW4gbG9nIG1lc3NhZ2UuXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc2VydmVyLCBuYW1lLCByb3V0ZSwgYXBwUGF0aCwgb3B0aW9ucykgeyAgICBcbiAgICAgICAgc3VwZXIoc2VydmVyLCBuYW1lLCBhcHBQYXRoLCBvcHRpb25zKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTW91bnRpbmcgcm91dGUuXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ31cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucm91dGUgPSB0ZXh0LmVuc3VyZVN0YXJ0c1dpdGgodGV4dC5kcm9wSWZFbmRzV2l0aChyb3V0ZSwgJy8nKSwgJy8nKTsgICAgICAgICAgICAgICBcbiAgICB9ICBcblxuICAgIC8qKlxuICAgICAqIFJlcXVpcmUgYSBtb2R1bGUgZnJvbSB0aGUgc291cmNlIHBhdGggb2YgYW4gYXBwIG1vZHVsZVxuICAgICAqIEBwYXJhbSB7Kn0gcmVsYXRpdmVQYXRoIFxuICAgICAqL8OfXG4gICAgcmVxdWlyZUZyb21BcHAoYXBwTmFtZSwgcmVsYXRpdmVQYXRoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlcnZlci5yZXF1aXJlRnJvbUFwcChhcHDDn05hbWUsIHJlbGF0aXZlUGF0aCk7XG4gICAgfVxuXG4gICAgX2dldEZlYXR1cmVGYWxsYmFja1BhdGgoKSB7XG4gICAgICAgIGxldCBwYXRoQXJyYXkgPSBzdXBlci5fZ2V0RmVhdHVyZUZhbGxiYWNrUGF0aCgpO1xuICAgICAgICBwYXRoQXJyYXkuc3BsaWNlKDIsIDAsIHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsIExpdGVyYWwuQVBQX0ZFQVRVUkVTX1BBVEgpKTtcbiAgICAgICAgcmV0dXJuIHBhdGhBcnJheTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gV2ViTW9kdWxlOyJdfQ==