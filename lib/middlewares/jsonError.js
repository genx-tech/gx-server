"use strict";

require("source-map-support/register");

const http = require('http');

module.exports = (opt, app) => {
  let handler;

  if (opt && opt.customHandler) {
    handler = app.getBackendAction(opt.customHandler);
  }

  return async (ctx, next) => {
    try {
      await next();

      if (ctx.status >= 400) {
        if (ctx.type === 'text/plain') {
          ctx.throw(ctx.status, ctx.body);
        } else {
          ctx.throw(ctx.status);
        }
      }
    } catch (err) {
      ctx.status = typeof err.status === 'number' ? err.status : 500;
      ctx.type = 'application/json';

      if (handler) {
        try {
          ctx.body = await handler(ctx, err);
          ctx.app.emit('error', err, ctx);
          return;
        } catch (error) {
          error.innerError = err;
          err = error;
        }
      }

      ctx.body = {
        error: err.expose && err.message ? err.message : http.STATUS_CODES[ctx.status]
      };
      ctx.app.emit('error', err, ctx);
    }
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlcy9qc29uRXJyb3IuanMiXSwibmFtZXMiOlsiaHR0cCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwib3B0IiwiYXBwIiwiaGFuZGxlciIsImN1c3RvbUhhbmRsZXIiLCJnZXRCYWNrZW5kQWN0aW9uIiwiY3R4IiwibmV4dCIsInN0YXR1cyIsInR5cGUiLCJ0aHJvdyIsImJvZHkiLCJlcnIiLCJlbWl0IiwiZXJyb3IiLCJpbm5lckVycm9yIiwiZXhwb3NlIiwibWVzc2FnZSIsIlNUQVRVU19DT0RFUyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFPQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDM0IsTUFBSUMsT0FBSjs7QUFFQSxNQUFJRixHQUFHLElBQUlBLEdBQUcsQ0FBQ0csYUFBZixFQUE4QjtBQUMxQkQsSUFBQUEsT0FBTyxHQUFHRCxHQUFHLENBQUNHLGdCQUFKLENBQXFCSixHQUFHLENBQUNHLGFBQXpCLENBQVY7QUFDSDs7QUFFRCxTQUFPLE9BQU9FLEdBQVAsRUFBWUMsSUFBWixLQUFxQjtBQUN4QixRQUFJO0FBQ0EsWUFBTUEsSUFBSSxFQUFWOztBQUVBLFVBQUlELEdBQUcsQ0FBQ0UsTUFBSixJQUFjLEdBQWxCLEVBQXVCO0FBQ25CLFlBQUlGLEdBQUcsQ0FBQ0csSUFBSixLQUFhLFlBQWpCLEVBQStCO0FBQzNCSCxVQUFBQSxHQUFHLENBQUNJLEtBQUosQ0FBVUosR0FBRyxDQUFDRSxNQUFkLEVBQXNCRixHQUFHLENBQUNLLElBQTFCO0FBQ0gsU0FGRCxNQUVPO0FBQ0hMLFVBQUFBLEdBQUcsQ0FBQ0ksS0FBSixDQUFVSixHQUFHLENBQUNFLE1BQWQ7QUFDSDtBQUNKO0FBQ0osS0FWRCxDQVVFLE9BQU9JLEdBQVAsRUFBWTtBQUNWTixNQUFBQSxHQUFHLENBQUNFLE1BQUosR0FBYSxPQUFPSSxHQUFHLENBQUNKLE1BQVgsS0FBc0IsUUFBdEIsR0FBaUNJLEdBQUcsQ0FBQ0osTUFBckMsR0FBOEMsR0FBM0Q7QUFDQUYsTUFBQUEsR0FBRyxDQUFDRyxJQUFKLEdBQVcsa0JBQVg7O0FBR0EsVUFBSU4sT0FBSixFQUFhO0FBQ1QsWUFBSTtBQUNBRyxVQUFBQSxHQUFHLENBQUNLLElBQUosR0FBVyxNQUFNUixPQUFPLENBQUNHLEdBQUQsRUFBTU0sR0FBTixDQUF4QjtBQUNBTixVQUFBQSxHQUFHLENBQUNKLEdBQUosQ0FBUVcsSUFBUixDQUFhLE9BQWIsRUFBc0JELEdBQXRCLEVBQTJCTixHQUEzQjtBQUNBO0FBQ0gsU0FKRCxDQUlFLE9BQU9RLEtBQVAsRUFBYztBQUNaQSxVQUFBQSxLQUFLLENBQUNDLFVBQU4sR0FBbUJILEdBQW5CO0FBQ0FBLFVBQUFBLEdBQUcsR0FBR0UsS0FBTjtBQUNIO0FBQ0o7O0FBRURSLE1BQUFBLEdBQUcsQ0FBQ0ssSUFBSixHQUFXO0FBQUVHLFFBQUFBLEtBQUssRUFBR0YsR0FBRyxDQUFDSSxNQUFKLElBQWNKLEdBQUcsQ0FBQ0ssT0FBbkIsR0FBOEJMLEdBQUcsQ0FBQ0ssT0FBbEMsR0FBNENwQixJQUFJLENBQUNxQixZQUFMLENBQWtCWixHQUFHLENBQUNFLE1BQXRCO0FBQXJELE9BQVg7QUFDQUYsTUFBQUEsR0FBRyxDQUFDSixHQUFKLENBQVFXLElBQVIsQ0FBYSxPQUFiLEVBQXNCRCxHQUF0QixFQUEyQk4sR0FBM0I7QUFDSDtBQUNKLEdBOUJEO0FBK0JILENBdENEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogRXJyb3IgcmVzcG9uc2UgbWlkZGxld2FyZSB3aXRoIGpzb25cbiAqIEBtb2R1bGUgTWlkZGxld2FyZV9Kc29uRXJyb3JcbiAqL1xuXG5jb25zdCBodHRwID0gcmVxdWlyZSgnaHR0cCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChvcHQsIGFwcCkgPT4geyBcbiAgICBsZXQgaGFuZGxlcjtcblxuICAgIGlmIChvcHQgJiYgb3B0LmN1c3RvbUhhbmRsZXIpIHtcbiAgICAgICAgaGFuZGxlciA9IGFwcC5nZXRCYWNrZW5kQWN0aW9uKG9wdC5jdXN0b21IYW5kbGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXN5bmMgKGN0eCwgbmV4dCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgbmV4dCgpO1xuXG4gICAgICAgICAgICBpZiAoY3R4LnN0YXR1cyA+PSA0MDApIHtcbiAgICAgICAgICAgICAgICBpZiAoY3R4LnR5cGUgPT09ICd0ZXh0L3BsYWluJykge1xuICAgICAgICAgICAgICAgICAgICBjdHgudGhyb3coY3R4LnN0YXR1cywgY3R4LmJvZHkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC50aHJvdyhjdHguc3RhdHVzKTtcbiAgICAgICAgICAgICAgICB9ICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7ICAgICAgICBcbiAgICAgICAgICAgIGN0eC5zdGF0dXMgPSB0eXBlb2YgZXJyLnN0YXR1cyA9PT0gJ251bWJlcicgPyBlcnIuc3RhdHVzIDogNTAwOyAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY3R4LnR5cGUgPSAnYXBwbGljYXRpb24vanNvbic7XG5cbiAgICAgICAgICAgIC8vIGFjY2VwdGVkIHR5cGVzXG4gICAgICAgICAgICBpZiAoaGFuZGxlcikgeyAgICAgIFxuICAgICAgICAgICAgICAgIHRyeSB7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgY3R4LmJvZHkgPSBhd2FpdCBoYW5kbGVyKGN0eCwgZXJyKTsgICAgIFxuICAgICAgICAgICAgICAgICAgICBjdHguYXBwLmVtaXQoJ2Vycm9yJywgZXJyLCBjdHgpOyAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBlcnJvci5pbm5lckVycm9yID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICBlcnIgPSBlcnJvcjtcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSAgICAgICAgICAgICBcblxuICAgICAgICAgICAgY3R4LmJvZHkgPSB7IGVycm9yOiAoZXJyLmV4cG9zZSAmJiBlcnIubWVzc2FnZSkgPyBlcnIubWVzc2FnZSA6IGh0dHAuU1RBVFVTX0NPREVTW2N0eC5zdGF0dXNdIH07XG4gICAgICAgICAgICBjdHguYXBwLmVtaXQoJ2Vycm9yJywgZXJyLCBjdHgpO1xuICAgICAgICB9ICAgICAgICBcbiAgICB9IFxufTsgICAgICAgIl19