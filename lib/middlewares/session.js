"use strict";const session=require("koa-session");const{InvalidConfiguration}=require("@genx/error");const{tryRequire}=require("@genx/app/lib/utils/Helpers");const DEFAULT_OPTS={key:"k-server.sid",prefix:"k-server:sess:"};module.exports=(options,app)=>{let store=options.store||{type:"memory"};if(!store.type){throw new InvalidConfiguration("Missing session store type.",app,"middlewares.session.store")}let storeObject;let opt=store.options||{};if(store.dataSource){let dsService=app.getService(store.dataSource);Object.assign(opt,{url:dsService.connectionString})}switch(store.type){case"redis":storeObject=tryRequire("koa-redis")(opt);break;case"mysql":storeObject=tryRequire("koa-mysql-session")(opt);break;case"mongodb":const MongoStore=tryRequire("koa-generic-session-mongo");storeObject=new MongoStore(opt);break;case"pgsql":storeObject=tryRequire("koa-pg-session")(opt);break;case"sqlite3":storeObject=tryRequire("koa-sqlite3-session")(opt);break;case"memory":const MemoryStore=tryRequire("koa-session-memory");storeObject=new MemoryStore;break;default:throw new Mowa.Error.InvalidConfiguration("Unsupported session store type: "+store.type,app,"middlewares.session.store.type");}let sessionOptions=Object.assign({},DEFAULT_OPTS,options,{store:storeObject});return session(sessionOptions,app.server.koa)};