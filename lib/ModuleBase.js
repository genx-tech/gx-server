"use strict";

require("source-map-support/register");

const path = require('path');

const Literal = require('./enum/Literal');

const {
  defaultBackendPath
} = require('./utils/Helpers');

const ModuleBase = Base => class extends Base {
  constructor(server, name, appPath, options) {
    super(name, Object.assign({
      workingPath: appPath,
      configPath: path.join(appPath, Literal.DEFAULT_CONFIG_PATH)
    }, options));
    this.server = server;
    this.isServer = false;
    this.backendPath = this.toAbsolutePath(this.options.backendPath || defaultBackendPath);
  }

  getService(name, currentModuleOnly) {
    return super.getService(name) || !currentModuleOnly && this.server.getService(name);
  }

  require(relativePath) {
    let modPath = path.join(this.backendPath, relativePath);
    return require(modPath);
  }

  requireFromLib(libName, relativePath) {
    return this.server.requireFromLib(libName, relativePath);
  }

  log(level, message, ...rest) {
    if (this.options.logWithAppName) {
      message = '[' + this.name + '] ' + message;
    }

    if (this.logger) {
      this.logger.log(level, message, ...rest);
    } else {
      this.server.log(level, message, ...rest);
    }

    return this;
  }

  _getFeatureFallbackPath() {
    let pathArray = super._getFeatureFallbackPath();

    pathArray.splice(1, 0, path.resolve(__dirname, Literal.FEATURES_PATH));
    return pathArray;
  }

};

module.exports = ModuleBase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Nb2R1bGVCYXNlLmpzIl0sIm5hbWVzIjpbInBhdGgiLCJyZXF1aXJlIiwiTGl0ZXJhbCIsImRlZmF1bHRCYWNrZW5kUGF0aCIsIk1vZHVsZUJhc2UiLCJCYXNlIiwiY29uc3RydWN0b3IiLCJzZXJ2ZXIiLCJuYW1lIiwiYXBwUGF0aCIsIm9wdGlvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJ3b3JraW5nUGF0aCIsImNvbmZpZ1BhdGgiLCJqb2luIiwiREVGQVVMVF9DT05GSUdfUEFUSCIsImlzU2VydmVyIiwiYmFja2VuZFBhdGgiLCJ0b0Fic29sdXRlUGF0aCIsImdldFNlcnZpY2UiLCJjdXJyZW50TW9kdWxlT25seSIsInJlbGF0aXZlUGF0aCIsIm1vZFBhdGgiLCJyZXF1aXJlRnJvbUxpYiIsImxpYk5hbWUiLCJsb2ciLCJsZXZlbCIsIm1lc3NhZ2UiLCJyZXN0IiwibG9nV2l0aEFwcE5hbWUiLCJsb2dnZXIiLCJfZ2V0RmVhdHVyZUZhbGxiYWNrUGF0aCIsInBhdGhBcnJheSIsInNwbGljZSIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJGRUFUVVJFU19QQVRIIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU1DLE9BQU8sR0FBR0QsT0FBTyxDQUFDLGdCQUFELENBQXZCOztBQUNBLE1BQU07QUFBRUUsRUFBQUE7QUFBRixJQUF5QkYsT0FBTyxDQUFDLGlCQUFELENBQXRDOztBQUVBLE1BQU1HLFVBQVUsR0FBR0MsSUFBSSxJQUFJLGNBQWNBLElBQWQsQ0FBbUI7QUFTMUNDLEVBQUFBLFdBQVcsQ0FBQ0MsTUFBRCxFQUFTQyxJQUFULEVBQWVDLE9BQWYsRUFBd0JDLE9BQXhCLEVBQWlDO0FBQ3hDLFVBQU1GLElBQU4sRUFBWUcsTUFBTSxDQUFDQyxNQUFQLENBQWM7QUFDdEJDLE1BQUFBLFdBQVcsRUFBRUosT0FEUztBQUV0QkssTUFBQUEsVUFBVSxFQUFFZCxJQUFJLENBQUNlLElBQUwsQ0FBVU4sT0FBVixFQUFtQlAsT0FBTyxDQUFDYyxtQkFBM0I7QUFGVSxLQUFkLEVBR1ROLE9BSFMsQ0FBWjtBQVNBLFNBQUtILE1BQUwsR0FBY0EsTUFBZDtBQU1BLFNBQUtVLFFBQUwsR0FBZ0IsS0FBaEI7QUFNQSxTQUFLQyxXQUFMLEdBQW1CLEtBQUtDLGNBQUwsQ0FBb0IsS0FBS1QsT0FBTCxDQUFhUSxXQUFiLElBQTRCZixrQkFBaEQsQ0FBbkI7QUFDSDs7QUFPRGlCLEVBQUFBLFVBQVUsQ0FBQ1osSUFBRCxFQUFPYSxpQkFBUCxFQUEwQjtBQUNoQyxXQUFPLE1BQU1ELFVBQU4sQ0FBaUJaLElBQWpCLEtBQTJCLENBQUNhLGlCQUFELElBQXNCLEtBQUtkLE1BQUwsQ0FBWWEsVUFBWixDQUF1QlosSUFBdkIsQ0FBeEQ7QUFDSDs7QUFNRFAsRUFBQUEsT0FBTyxDQUFDcUIsWUFBRCxFQUFlO0FBQ2xCLFFBQUlDLE9BQU8sR0FBR3ZCLElBQUksQ0FBQ2UsSUFBTCxDQUFVLEtBQUtHLFdBQWYsRUFBNEJJLFlBQTVCLENBQWQ7QUFDQSxXQUFPckIsT0FBTyxDQUFDc0IsT0FBRCxDQUFkO0FBQ0g7O0FBTURDLEVBQUFBLGNBQWMsQ0FBQ0MsT0FBRCxFQUFVSCxZQUFWLEVBQXdCO0FBQ2xDLFdBQU8sS0FBS2YsTUFBTCxDQUFZaUIsY0FBWixDQUEyQkMsT0FBM0IsRUFBb0NILFlBQXBDLENBQVA7QUFDSDs7QUFTREksRUFBQUEsR0FBRyxDQUFDQyxLQUFELEVBQVFDLE9BQVIsRUFBaUIsR0FBR0MsSUFBcEIsRUFBMEI7QUFDekIsUUFBSSxLQUFLbkIsT0FBTCxDQUFhb0IsY0FBakIsRUFBaUM7QUFDN0JGLE1BQUFBLE9BQU8sR0FBRyxNQUFNLEtBQUtwQixJQUFYLEdBQWtCLElBQWxCLEdBQXlCb0IsT0FBbkM7QUFDSDs7QUFFRCxRQUFJLEtBQUtHLE1BQVQsRUFBaUI7QUFDYixXQUFLQSxNQUFMLENBQVlMLEdBQVosQ0FBZ0JDLEtBQWhCLEVBQXVCQyxPQUF2QixFQUFnQyxHQUFHQyxJQUFuQztBQUNILEtBRkQsTUFFTztBQUNILFdBQUt0QixNQUFMLENBQVltQixHQUFaLENBQWdCQyxLQUFoQixFQUF1QkMsT0FBdkIsRUFBZ0MsR0FBR0MsSUFBbkM7QUFDSDs7QUFFRCxXQUFPLElBQVA7QUFDSDs7QUFFREcsRUFBQUEsdUJBQXVCLEdBQUc7QUFDdEIsUUFBSUMsU0FBUyxHQUFHLE1BQU1ELHVCQUFOLEVBQWhCOztBQUNBQyxJQUFBQSxTQUFTLENBQUNDLE1BQVYsQ0FBaUIsQ0FBakIsRUFBb0IsQ0FBcEIsRUFBdUJsQyxJQUFJLENBQUNtQyxPQUFMLENBQWFDLFNBQWIsRUFBd0JsQyxPQUFPLENBQUNtQyxhQUFoQyxDQUF2QjtBQUNBLFdBQU9KLFNBQVA7QUFDSDs7QUFyRnlDLENBQTlDOztBQXdGQUssTUFBTSxDQUFDQyxPQUFQLEdBQWlCbkMsVUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IExpdGVyYWwgPSByZXF1aXJlKCcuL2VudW0vTGl0ZXJhbCcpO1xuY29uc3QgeyBkZWZhdWx0QmFja2VuZFBhdGggfSA9IHJlcXVpcmUoJy4vdXRpbHMvSGVscGVycycpO1xuXG5jb25zdCBNb2R1bGVCYXNlID0gQmFzZSA9PiBjbGFzcyBleHRlbmRzIEJhc2Uge1xuICAgIC8qKiAgICAgXG4gICAgICogQHBhcmFtIHtXZWJTZXJ2ZXJ9IHNlcnZlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGFwcCBtb2R1bGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJvdXRlIC0gVGhlIGJhc2Ugcm91dGUgb2YgdGhlIGFwcCBtb2R1bGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGFwcFBhdGggLSBUaGUgcGF0aCB0byBsb2FkIHRoZSBhcHAncyBtb2R1bGUgZmlsZXNcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIC0gVGhlIGFwcCBtb2R1bGUncyBleHRyYSBvcHRpb25zIGRlZmluZWQgaW4gaXRzIHBhcmVudCdzIGNvbmZpZ3VyYXRpb24uICAgICAgICAgIFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbH0gW29wdGlvbnMubG9nV2l0aEFwcE5hbWU9ZmFsc2VdIC0gRmxhZyB0byBpbmNsdWRlIGFwcCBuYW1lIGluIGxvZyBtZXNzYWdlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNlcnZlciwgbmFtZSwgYXBwUGF0aCwgb3B0aW9ucykgeyAgICBcbiAgICAgICAgc3VwZXIobmFtZSwgT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICB3b3JraW5nUGF0aDogYXBwUGF0aCwgXG4gICAgICAgICAgICBjb25maWdQYXRoOiBwYXRoLmpvaW4oYXBwUGF0aCwgTGl0ZXJhbC5ERUZBVUxUX0NPTkZJR19QQVRIKVxuICAgICAgICB9LCBvcHRpb25zKSk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhvc3Rpbmcgc2VydmVyLlxuICAgICAgICAgKiBAbWVtYmVyIHtXZWJTZXJ2ZXJ9XG4gICAgICAgICAqKi9cbiAgICAgICAgdGhpcy5zZXJ2ZXIgPSBzZXJ2ZXI7ICAgICAgICBcblxuICAgICAgICAvKipcbiAgICAgICAgICogV2hldGhlciBpdCBpcyBhIHNlcnZlci5cbiAgICAgICAgICogQG1lbWJlciB7Ym9vbGVhbn1cbiAgICAgICAgICoqL1xuICAgICAgICB0aGlzLmlzU2VydmVyID0gZmFsc2U7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEJhY2tlbmQgZmlsZXMgcGF0aC5cbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSAgICAgICAgIFxuICAgICAgICAgKiovXG4gICAgICAgIHRoaXMuYmFja2VuZFBhdGggPSB0aGlzLnRvQWJzb2x1dGVQYXRoKHRoaXMub3B0aW9ucy5iYWNrZW5kUGF0aCB8fCBkZWZhdWx0QmFja2VuZFBhdGgpOyBcbiAgICB9ICBcblxuICAgIC8qKlxuICAgICAqIEdldCBhIHNlcnZpY2UgZnJvbSBtb2R1bGUgaGllcmFyY2h5ICAgICBcbiAgICAgKiBAcGFyYW0gbmFtZVxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAgICovXG4gICAgZ2V0U2VydmljZShuYW1lLCBjdXJyZW50TW9kdWxlT25seSkge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0U2VydmljZShuYW1lKSB8fCAoIWN1cnJlbnRNb2R1bGVPbmx5ICYmIHRoaXMuc2VydmVyLmdldFNlcnZpY2UobmFtZSkpO1xuICAgIH0gICAgXG5cbiAgICAvKipcbiAgICAgKiBSZXF1aXJlIGEganMgbW9kdWxlIGZyb20gYmFja2VuZCBwYXRoXG4gICAgICogQHBhcmFtIHsqfSByZWxhdGl2ZVBhdGggXG4gICAgICovXG4gICAgcmVxdWlyZShyZWxhdGl2ZVBhdGgpIHtcbiAgICAgICAgbGV0IG1vZFBhdGggPSBwYXRoLmpvaW4odGhpcy5iYWNrZW5kUGF0aCwgcmVsYXRpdmVQYXRoKTtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmUobW9kUGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVxdWlyZSBhIG1vZHVsZSBmcm9tIHRoZSBzb3VyY2UgcGF0aCBvZiBhIGxpYnJhcnkgbW9kdWxlXG4gICAgICogQHBhcmFtIHsqfSByZWxhdGl2ZVBhdGggXG4gICAgICovXG4gICAgcmVxdWlyZUZyb21MaWIobGliTmFtZSwgcmVsYXRpdmVQYXRoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlcnZlci5yZXF1aXJlRnJvbUxpYihsaWJOYW1lLCByZWxhdGl2ZVBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgbG9nIG1ldGhvZCwgbWF5IGJlIG92ZXJyaWRlIGJ5IGxvZ2dlcnMgZmVhdHVyZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsZXZlbCAtIExvZyBsZXZlbFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gTG9nIG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0gey4uLm9iamVjdH0gcmVzdCAtIEV4dHJhIG1ldGEgZGF0YVxuICAgICAqIEByZXR1cm5zIHtSb3V0YWJsZX1cbiAgICAgKi9cbiAgICBsb2cobGV2ZWwsIG1lc3NhZ2UsIC4uLnJlc3QpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5sb2dXaXRoQXBwTmFtZSkge1xuICAgICAgICAgICAgbWVzc2FnZSA9ICdbJyArIHRoaXMubmFtZSArICddICcgKyBtZXNzYWdlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubG9nZ2VyKSB7XG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5sb2cobGV2ZWwsIG1lc3NhZ2UsIC4uLnJlc3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXJ2ZXIubG9nKGxldmVsLCBtZXNzYWdlLCAuLi5yZXN0KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgX2dldEZlYXR1cmVGYWxsYmFja1BhdGgoKSB7XG4gICAgICAgIGxldCBwYXRoQXJyYXkgPSBzdXBlci5fZ2V0RmVhdHVyZUZhbGxiYWNrUGF0aCgpO1xuICAgICAgICBwYXRoQXJyYXkuc3BsaWNlKDEsIDAsIHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsIExpdGVyYWwuRkVBVFVSRVNfUEFUSCkpO1xuICAgICAgICByZXR1cm4gcGF0aEFycmF5O1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNb2R1bGVCYXNlOyJdfQ==