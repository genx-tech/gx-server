"use strict";

require("source-map-support/register");

const session = require('koa-session');

const {
  InvalidConfiguration
} = require('@genx/error');

const {
  tryRequire
} = require('@genx/app/lib/utils/Helpers');

const DEFAULT_OPTS = {
  key: 'k-server.sid',
  prefix: 'k-server:sess:'
};

module.exports = (options, app) => {
  let store = options.store || {
    type: 'memory'
  };

  if (!store.type) {
    throw new InvalidConfiguration('Missing session store type.', app, 'middlewares.session.store');
  }

  let storeObject;
  let opt = store.options || {};

  if (store.dataSource) {
    let dsService = app.getService(store.dataSource);
    Object.assign(opt, {
      url: dsService.connectionString
    });
  }

  switch (store.type) {
    case 'redis':
      storeObject = tryRequire('koa-redis')(opt);
      break;

    case 'mysql':
      storeObject = tryRequire('koa-mysql-session')(opt);
      break;

    case 'mongodb':
      const MongoStore = tryRequire('koa-generic-session-mongo');
      storeObject = new MongoStore(opt);
      break;

    case 'pgsql':
      storeObject = tryRequire('koa-pg-session')(opt);
      break;

    case 'sqlite3':
      storeObject = tryRequire('koa-sqlite3-session')(opt);
      break;

    case 'memory':
      const MemoryStore = tryRequire('koa-session-memory');
      storeObject = new MemoryStore();
      break;

    default:
      throw new Mowa.Error.InvalidConfiguration('Unsupported session store type: ' + store.type, app, 'middlewares.session.store.type');
  }

  let sessionOptions = Object.assign({}, DEFAULT_OPTS, options, {
    store: storeObject
  });
  return session(sessionOptions, app.server.koa);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlcy9zZXNzaW9uLmpzIl0sIm5hbWVzIjpbInNlc3Npb24iLCJyZXF1aXJlIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJ0cnlSZXF1aXJlIiwiREVGQVVMVF9PUFRTIiwia2V5IiwicHJlZml4IiwibW9kdWxlIiwiZXhwb3J0cyIsIm9wdGlvbnMiLCJhcHAiLCJzdG9yZSIsInR5cGUiLCJzdG9yZU9iamVjdCIsIm9wdCIsImRhdGFTb3VyY2UiLCJkc1NlcnZpY2UiLCJnZXRTZXJ2aWNlIiwiT2JqZWN0IiwiYXNzaWduIiwidXJsIiwiY29ubmVjdGlvblN0cmluZyIsIk1vbmdvU3RvcmUiLCJNZW1vcnlTdG9yZSIsIk1vd2EiLCJFcnJvciIsInNlc3Npb25PcHRpb25zIiwic2VydmVyIiwia29hIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQU9BLE1BQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFDLGFBQUQsQ0FBdkI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQTJCRCxPQUFPLENBQUMsYUFBRCxDQUF4Qzs7QUFDQSxNQUFNO0FBQUVFLEVBQUFBO0FBQUYsSUFBaUJGLE9BQU8sQ0FBQyw2QkFBRCxDQUE5Qjs7QUFFQSxNQUFNRyxZQUFZLEdBQUc7QUFDakJDLEVBQUFBLEdBQUcsRUFBRSxjQURZO0FBRWpCQyxFQUFBQSxNQUFNLEVBQUU7QUFGUyxDQUFyQjs7QUF1QkFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixDQUFDQyxPQUFELEVBQVVDLEdBQVYsS0FBa0I7QUFFL0IsTUFBSUMsS0FBSyxHQUFHRixPQUFPLENBQUNFLEtBQVIsSUFBaUI7QUFBRUMsSUFBQUEsSUFBSSxFQUFFO0FBQVIsR0FBN0I7O0FBRUEsTUFBSSxDQUFDRCxLQUFLLENBQUNDLElBQVgsRUFBaUI7QUFDYixVQUFNLElBQUlWLG9CQUFKLENBQ0YsNkJBREUsRUFFRlEsR0FGRSxFQUdGLDJCQUhFLENBQU47QUFLSDs7QUFFRCxNQUFJRyxXQUFKO0FBRUEsTUFBSUMsR0FBRyxHQUFHSCxLQUFLLENBQUNGLE9BQU4sSUFBaUIsRUFBM0I7O0FBRUEsTUFBSUUsS0FBSyxDQUFDSSxVQUFWLEVBQXNCO0FBQ2xCLFFBQUlDLFNBQVMsR0FBR04sR0FBRyxDQUFDTyxVQUFKLENBQWVOLEtBQUssQ0FBQ0ksVUFBckIsQ0FBaEI7QUFDQUcsSUFBQUEsTUFBTSxDQUFDQyxNQUFQLENBQWNMLEdBQWQsRUFBbUI7QUFBRU0sTUFBQUEsR0FBRyxFQUFFSixTQUFTLENBQUNLO0FBQWpCLEtBQW5CO0FBQ0g7O0FBRUQsVUFBUVYsS0FBSyxDQUFDQyxJQUFkO0FBQ0ksU0FBSyxPQUFMO0FBQ0lDLE1BQUFBLFdBQVcsR0FBR1YsVUFBVSxDQUFDLFdBQUQsQ0FBVixDQUF3QlcsR0FBeEIsQ0FBZDtBQUNBOztBQUNKLFNBQUssT0FBTDtBQUNJRCxNQUFBQSxXQUFXLEdBQUdWLFVBQVUsQ0FBQyxtQkFBRCxDQUFWLENBQWdDVyxHQUFoQyxDQUFkO0FBQ0E7O0FBQ0osU0FBSyxTQUFMO0FBQ0ksWUFBTVEsVUFBVSxHQUFHbkIsVUFBVSxDQUFDLDJCQUFELENBQTdCO0FBQ0FVLE1BQUFBLFdBQVcsR0FBRyxJQUFJUyxVQUFKLENBQWVSLEdBQWYsQ0FBZDtBQUNBOztBQUNKLFNBQUssT0FBTDtBQUNJRCxNQUFBQSxXQUFXLEdBQUdWLFVBQVUsQ0FBQyxnQkFBRCxDQUFWLENBQTZCVyxHQUE3QixDQUFkO0FBQ0E7O0FBQ0osU0FBSyxTQUFMO0FBQ0lELE1BQUFBLFdBQVcsR0FBR1YsVUFBVSxDQUFDLHFCQUFELENBQVYsQ0FBa0NXLEdBQWxDLENBQWQ7QUFDQTs7QUFDSixTQUFLLFFBQUw7QUFDSSxZQUFNUyxXQUFXLEdBQUdwQixVQUFVLENBQUMsb0JBQUQsQ0FBOUI7QUFDQVUsTUFBQUEsV0FBVyxHQUFHLElBQUlVLFdBQUosRUFBZDtBQUNBOztBQUNKO0FBQ0ksWUFBTSxJQUFJQyxJQUFJLENBQUNDLEtBQUwsQ0FBV3ZCLG9CQUFmLENBQ0YscUNBQXFDUyxLQUFLLENBQUNDLElBRHpDLEVBRUZGLEdBRkUsRUFHRixnQ0FIRSxDQUFOO0FBdEJSOztBQTZCQSxNQUFJZ0IsY0FBYyxHQUFHUixNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCZixZQUFsQixFQUFnQ0ssT0FBaEMsRUFBeUM7QUFBQ0UsSUFBQUEsS0FBSyxFQUFFRTtBQUFSLEdBQXpDLENBQXJCO0FBRUEsU0FBT2IsT0FBTyxDQUFDMEIsY0FBRCxFQUFpQmhCLEdBQUcsQ0FBQ2lCLE1BQUosQ0FBV0MsR0FBNUIsQ0FBZDtBQUNILENBckREIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogU2Vzc2lvbiBtaWRkbGV3YXJlXG4gKiBAbW9kdWxlIE1pZGRsZXdhcmVfU2Vzc2lvblxuICovXG5cbmNvbnN0IHNlc3Npb24gPSByZXF1aXJlKCdrb2Etc2Vzc2lvbicpO1xuY29uc3QgeyBJbnZhbGlkQ29uZmlndXJhdGlvbiB9ID0gcmVxdWlyZSgnQGdlbngvZXJyb3InKTtcbmNvbnN0IHsgdHJ5UmVxdWlyZSB9ID0gcmVxdWlyZSgnQGdlbngvYXBwL2xpYi91dGlscy9IZWxwZXJzJyk7XG5cbmNvbnN0IERFRkFVTFRfT1BUUyA9IHtcbiAgICBrZXk6ICdrLXNlcnZlci5zaWQnLFxuICAgIHByZWZpeDogJ2stc2VydmVyOnNlc3M6J1xufTtcblxuLyoqXG4gKiBJbml0aWFsaXplIHNlc3Npb24gbWlkZGxld2FyZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBTZXNzaW9uIG9wdGlvbnMgXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW29wdGlvbnMua2V5PSdtb3dhOnNpZCddIC0gQ29va2llIG5hbWUgZGVmYXVsdGluZyB0byBtb3dhLnNpZCBcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbb3B0aW9ucy5wcmVmaXg9J21vd2E6c2VzczonXSAtIFNlc3Npb24gcHJlZml4IGZvciBzdG9yZSwgZGVmYXVsdGluZyB0byBtb3dhOnNlc3M6XG4gKiBAcHJvcGVydHkge251bWJlcn0gW29wdGlvbnMubWF4QWdlXSAtIFNlc3Npb25TdG9yZSdzIGV4cGlyYXRpb24gdGltZSAobXMpLCBkZWZhdWx0aW5nIHRvIDg2NDAwMDAwICgxIGRheSlcbiAqIEBwcm9wZXJ0eSB7Ym9vbH0gW29wdGlvbnMuYXV0b0NvbW1pdD10cnVlXSAtIEF1dG9tYXRpY2FsbHkgY29tbWl0IGhlYWRlcnMgKGRlZmF1bHQgdHJ1ZSlcbiAqIEBwcm9wZXJ0eSB7Ym9vbH0gW29wdGlvbnMub3ZlcndyaXRlPXRydWVdIC0gQ2FuIG92ZXJ3cml0ZSBvciBub3QgKGRlZmF1bHQgdHJ1ZSkgXG4gKiBAcHJvcGVydHkge2Jvb2x9IFtvcHRpb25zLmh0dHBPbmx5PXRydWVdIC0gSHR0cE9ubHkgb3Igbm90IChkZWZhdWx0IHRydWUpXG4gKiBAcHJvcGVydHkge2Jvb2x9IFtvcHRpb25zLnNpZ25lZD10cnVlXSAtIFNpZ25lZCBvciBub3RcbiAqIEBwcm9wZXJ0eSB7Ym9vbH0gW29wdGlvbnMucm9sbGluZz1mYWxzZV0gLSBGb3JjZSBhIHNlc3Npb24gaWRlbnRpZmllciBjb29raWUgdG8gYmUgc2V0IG9uIGV2ZXJ5IHJlc3BvbnNlLiBUaGUgZXhwaXJhdGlvbiBpcyByZXNldCB0byB0aGUgb3JpZ2luYWwgbWF4QWdlLCByZXNldHRpbmcgdGhlIGV4cGlyYXRpb24gY291bnRkb3duLiAoZGVmYXVsdCBpcyBmYWxzZSkgXG4gKiBAcHJvcGVydHkge2Jvb2x9IFtvcHRpb25zLnJlbmV3PWZhbHNlXSAtIFJlbmV3IHNlc3Npb24gd2hlbiBzZXNzaW9uIGlzIG5lYXJseSBleHBpcmVkLCBzbyB3ZSBjYW4gYWx3YXlzIGtlZXAgdXNlciBsb2dnZWQgaW4uIChkZWZhdWx0IGlzIGZhbHNlKVxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gW29wdGlvbnMuZ2VuU2lkXSAtIFRoZSB3YXkgb2YgZ2VuZXJhdGluZyBleHRlcm5hbCBzZXNzaW9uIGlkIGlzIGNvbnRyb2xsZWQgYnkgdGhlIG9wdGlvbnMuZ2VuaWQsIHdoaWNoIGRlZmF1bHRzIHRvIERhdGUubm93KCkgKyAnLScgKyB1aWQuc3luYygyNClcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFtvcHRpb25zLnZhbGlkXSAtIHZhbGlkKGN0eCwgc2Vzc2lvbiksIHZhbGlkIHNlc3Npb24gdmFsdWUgYmVmb3JlIHVzZSBpdFxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gW29wdGlvbnMuYmVmb3JlU2F2ZV0gLSBiZWZvcmVTYXZlKGN0eCwgc2Vzc2lvbiksIGhvb2sgYmVmb3JlIHNhdmUgc2Vzc2lvblxuICogQHByb3BlcnR5IHtvYmplY3R9IFtvcHRpb25zLnN0b3JlXSAtIFNlc3Npb24gc3RvcmUgaW5zdGFuY2UuIEl0IGNhbiBiZSBhbnkgT2JqZWN0IHRoYXQgaGFzIHRoZSBtZXRob2RzIHNldCwgZ2V0LCBkZXN0cm95IGxpa2UgTWVtb3J5U3RvcmUuXG4gKiBAcGFyYW0ge1JvdXRhYmxlfSBhcHAgXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gKG9wdGlvbnMsIGFwcCkgPT4ge1xuXG4gICAgbGV0IHN0b3JlID0gb3B0aW9ucy5zdG9yZSB8fCB7IHR5cGU6ICdtZW1vcnknIH07XG5cbiAgICBpZiAoIXN0b3JlLnR5cGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgJ01pc3Npbmcgc2Vzc2lvbiBzdG9yZSB0eXBlLicsXG4gICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICAnbWlkZGxld2FyZXMuc2Vzc2lvbi5zdG9yZSdcbiAgICAgICAgKTsgICAgICAgIFxuICAgIH1cblxuICAgIGxldCBzdG9yZU9iamVjdDtcblxuICAgIGxldCBvcHQgPSBzdG9yZS5vcHRpb25zIHx8IHt9O1xuXG4gICAgaWYgKHN0b3JlLmRhdGFTb3VyY2UpIHtcbiAgICAgICAgbGV0IGRzU2VydmljZSA9IGFwcC5nZXRTZXJ2aWNlKHN0b3JlLmRhdGFTb3VyY2UpO1xuICAgICAgICBPYmplY3QuYXNzaWduKG9wdCwgeyB1cmw6IGRzU2VydmljZS5jb25uZWN0aW9uU3RyaW5nIH0pO1xuICAgIH1cblxuICAgIHN3aXRjaCAoc3RvcmUudHlwZSkge1xuICAgICAgICBjYXNlICdyZWRpcyc6XG4gICAgICAgICAgICBzdG9yZU9iamVjdCA9IHRyeVJlcXVpcmUoJ2tvYS1yZWRpcycpKG9wdCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbXlzcWwnOlxuICAgICAgICAgICAgc3RvcmVPYmplY3QgPSB0cnlSZXF1aXJlKCdrb2EtbXlzcWwtc2Vzc2lvbicpKG9wdCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbW9uZ29kYic6XG4gICAgICAgICAgICBjb25zdCBNb25nb1N0b3JlID0gdHJ5UmVxdWlyZSgna29hLWdlbmVyaWMtc2Vzc2lvbi1tb25nbycpO1xuICAgICAgICAgICAgc3RvcmVPYmplY3QgPSBuZXcgTW9uZ29TdG9yZShvcHQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3Bnc3FsJzpcbiAgICAgICAgICAgIHN0b3JlT2JqZWN0ID0gdHJ5UmVxdWlyZSgna29hLXBnLXNlc3Npb24nKShvcHQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3NxbGl0ZTMnOlxuICAgICAgICAgICAgc3RvcmVPYmplY3QgPSB0cnlSZXF1aXJlKCdrb2Etc3FsaXRlMy1zZXNzaW9uJykob3B0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdtZW1vcnknOlxuICAgICAgICAgICAgY29uc3QgTWVtb3J5U3RvcmUgPSB0cnlSZXF1aXJlKCdrb2Etc2Vzc2lvbi1tZW1vcnknKTtcbiAgICAgICAgICAgIHN0b3JlT2JqZWN0ID0gbmV3IE1lbW9yeVN0b3JlKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBNb3dhLkVycm9yLkludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgICAgICdVbnN1cHBvcnRlZCBzZXNzaW9uIHN0b3JlIHR5cGU6ICcgKyBzdG9yZS50eXBlLFxuICAgICAgICAgICAgICAgIGFwcCxcbiAgICAgICAgICAgICAgICAnbWlkZGxld2FyZXMuc2Vzc2lvbi5zdG9yZS50eXBlJ1xuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICBsZXQgc2Vzc2lvbk9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX09QVFMsIG9wdGlvbnMsIHtzdG9yZTogc3RvcmVPYmplY3R9KTtcblxuICAgIHJldHVybiBzZXNzaW9uKHNlc3Npb25PcHRpb25zLCBhcHAuc2VydmVyLmtvYSk7XG59OyJdfQ==