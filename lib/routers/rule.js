"use strict";

require("source-map-support/register");

const path = require('path');

const Util = require('rk-utils');

const _ = Util._;
const Promise = Util.Promise;

const Router = require('@koa/router');

const {
  InvalidConfiguration
} = require('@genx/error');

const Literal = require('../enum/Literal');

function load_(app, baseRoute, options) {
  let router = baseRoute === '/' ? new Router() : new Router({
    prefix: baseRoute
  });

  if (options.middlewares) {
    app.useMiddlewares(router, options.middlewares);
  }

  _.forOwn(options.rules || {}, (methods, subRoute) => {
    let pos = subRoute.indexOf(':/');

    if (pos !== -1) {
      if (pos === 0) {
        throw new InvalidConfiguration('Invalid route rule syntax: ' + subRoute, app, `routing[${baseRoute}].rule.rules`);
      }

      let embeddedMethod = subRoute.substr(0, pos).toLocaleLowerCase();
      subRoute = subRoute.substr(pos + 2);
      methods = {
        [embeddedMethod]: methods
      };
    }

    subRoute = Util.ensureLeftSlash(subRoute);

    if (typeof methods === 'string' || Array.isArray(methods)) {
      methods = {
        get: methods
      };
    }

    _.forOwn(methods, (middlewares, method) => {
      if (!Literal.ALLOWED_HTTP_METHODS.has(method) && method !== 'all') {
        throw new InvalidConfiguration('Unsupported http method: ' + method, app, `routing[${baseRoute}].rule.rules[${subRoute}]`);
      }

      app.addRoute(router, method, subRoute, middlewares);
    });
  });

  app.addRouter(router);
}

;
module.exports = load_;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXJzL3J1bGUuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJVdGlsIiwiXyIsIlByb21pc2UiLCJSb3V0ZXIiLCJJbnZhbGlkQ29uZmlndXJhdGlvbiIsIkxpdGVyYWwiLCJsb2FkXyIsImFwcCIsImJhc2VSb3V0ZSIsIm9wdGlvbnMiLCJyb3V0ZXIiLCJwcmVmaXgiLCJtaWRkbGV3YXJlcyIsInVzZU1pZGRsZXdhcmVzIiwiZm9yT3duIiwicnVsZXMiLCJtZXRob2RzIiwic3ViUm91dGUiLCJwb3MiLCJpbmRleE9mIiwiZW1iZWRkZWRNZXRob2QiLCJzdWJzdHIiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsImVuc3VyZUxlZnRTbGFzaCIsIkFycmF5IiwiaXNBcnJheSIsImdldCIsIm1ldGhvZCIsIkFMTE9XRURfSFRUUF9NRVRIT0RTIiwiaGFzIiwiYWRkUm91dGUiLCJhZGRSb3V0ZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsVUFBRCxDQUFwQjs7QUFDQSxNQUFNRSxDQUFDLEdBQUdELElBQUksQ0FBQ0MsQ0FBZjtBQUNBLE1BQU1DLE9BQU8sR0FBR0YsSUFBSSxDQUFDRSxPQUFyQjs7QUFDQSxNQUFNQyxNQUFNLEdBQUdKLE9BQU8sQ0FBQyxhQUFELENBQXRCOztBQUNBLE1BQU07QUFBRUssRUFBQUE7QUFBRixJQUEyQkwsT0FBTyxDQUFDLGFBQUQsQ0FBeEM7O0FBQ0EsTUFBTU0sT0FBTyxHQUFHTixPQUFPLENBQUMsaUJBQUQsQ0FBdkI7O0FBMkNBLFNBQVNPLEtBQVQsQ0FBZUMsR0FBZixFQUFvQkMsU0FBcEIsRUFBK0JDLE9BQS9CLEVBQXdDO0FBQ3BDLE1BQUlDLE1BQU0sR0FBR0YsU0FBUyxLQUFLLEdBQWQsR0FBb0IsSUFBSUwsTUFBSixFQUFwQixHQUFtQyxJQUFJQSxNQUFKLENBQVc7QUFBQ1EsSUFBQUEsTUFBTSxFQUFFSDtBQUFULEdBQVgsQ0FBaEQ7O0FBRUEsTUFBSUMsT0FBTyxDQUFDRyxXQUFaLEVBQXlCO0FBQ3JCTCxJQUFBQSxHQUFHLENBQUNNLGNBQUosQ0FBbUJILE1BQW5CLEVBQTJCRCxPQUFPLENBQUNHLFdBQW5DO0FBQ0g7O0FBRURYLEVBQUFBLENBQUMsQ0FBQ2EsTUFBRixDQUFTTCxPQUFPLENBQUNNLEtBQVIsSUFBaUIsRUFBMUIsRUFBOEIsQ0FBQ0MsT0FBRCxFQUFVQyxRQUFWLEtBQXVCO0FBQ2pELFFBQUlDLEdBQUcsR0FBR0QsUUFBUSxDQUFDRSxPQUFULENBQWlCLElBQWpCLENBQVY7O0FBRUEsUUFBSUQsR0FBRyxLQUFLLENBQUMsQ0FBYixFQUFnQjtBQUNaLFVBQUlBLEdBQUcsS0FBSyxDQUFaLEVBQWU7QUFDWCxjQUFNLElBQUlkLG9CQUFKLENBQ0YsZ0NBQWdDYSxRQUQ5QixFQUVGVixHQUZFLEVBR0QsV0FBVUMsU0FBVSxjQUhuQixDQUFOO0FBSUg7O0FBSUQsVUFBSVksY0FBYyxHQUFHSCxRQUFRLENBQUNJLE1BQVQsQ0FBZ0IsQ0FBaEIsRUFBbUJILEdBQW5CLEVBQXdCSSxpQkFBeEIsRUFBckI7QUFDQUwsTUFBQUEsUUFBUSxHQUFHQSxRQUFRLENBQUNJLE1BQVQsQ0FBZ0JILEdBQUcsR0FBRyxDQUF0QixDQUFYO0FBRUFGLE1BQUFBLE9BQU8sR0FBRztBQUFDLFNBQUNJLGNBQUQsR0FBa0JKO0FBQW5CLE9BQVY7QUFDSDs7QUFFREMsSUFBQUEsUUFBUSxHQUFHakIsSUFBSSxDQUFDdUIsZUFBTCxDQUFxQk4sUUFBckIsQ0FBWDs7QUFFQSxRQUFJLE9BQU9ELE9BQVAsS0FBbUIsUUFBbkIsSUFBK0JRLEtBQUssQ0FBQ0MsT0FBTixDQUFjVCxPQUFkLENBQW5DLEVBQTJEO0FBQ3ZEQSxNQUFBQSxPQUFPLEdBQUc7QUFBRVUsUUFBQUEsR0FBRyxFQUFFVjtBQUFQLE9BQVY7QUFDSDs7QUFFRGYsSUFBQUEsQ0FBQyxDQUFDYSxNQUFGLENBQVNFLE9BQVQsRUFBa0IsQ0FBQ0osV0FBRCxFQUFjZSxNQUFkLEtBQXlCO0FBQ3ZDLFVBQUksQ0FBQ3RCLE9BQU8sQ0FBQ3VCLG9CQUFSLENBQTZCQyxHQUE3QixDQUFpQ0YsTUFBakMsQ0FBRCxJQUE2Q0EsTUFBTSxLQUFLLEtBQTVELEVBQW1FO0FBQy9ELGNBQU0sSUFBSXZCLG9CQUFKLENBQ0YsOEJBQThCdUIsTUFENUIsRUFFRnBCLEdBRkUsRUFHRCxXQUFVQyxTQUFVLGdCQUFlUyxRQUFTLEdBSDNDLENBQU47QUFJSDs7QUFFRFYsTUFBQUEsR0FBRyxDQUFDdUIsUUFBSixDQUFhcEIsTUFBYixFQUFxQmlCLE1BQXJCLEVBQTZCVixRQUE3QixFQUF1Q0wsV0FBdkM7QUFDSCxLQVREO0FBVUgsR0FuQ0Q7O0FBcUNBTCxFQUFBQSxHQUFHLENBQUN3QixTQUFKLENBQWNyQixNQUFkO0FBQ0g7O0FBQUE7QUFFRHNCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjNCLEtBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBVdGlsID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IF8gPSBVdGlsLl87XG5jb25zdCBQcm9taXNlID0gVXRpbC5Qcm9taXNlO1xuY29uc3QgUm91dGVyID0gcmVxdWlyZSgnQGtvYS9yb3V0ZXInKTtcbmNvbnN0IHsgSW52YWxpZENvbmZpZ3VyYXRpb24gfSA9IHJlcXVpcmUoJ0BnZW54L2Vycm9yJyk7XG5jb25zdCBMaXRlcmFsID0gcmVxdWlyZSgnLi4vZW51bS9MaXRlcmFsJyk7XG5cbi8qKlxuICogUnVsZSBiYXNlZCByb3V0ZXIuXG4gKiBAbW9kdWxlIFJvdXRlcl9SdWxlIFxuICovXG5cbi8qKiBcbiAqIENyZWF0ZSBhIHJ1bGUtYmFzZWQgcm91dGVyLlxuICogQHBhcmFtIHtXZWJNb2R1bGV9IGFwcCBcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlUm91dGUgXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBcbiAqIEBleGFtcGxlXG4gKiAnPGJhc2UgcGF0aD4nOiB7XG4gKiAgICAgcnVsZToge1xuICogICAgICAgICBtaWRkbGV3YXJlczpcbiAqICAgICAgICAgcnVsZXM6IHtcbiAqICAgICAgICAgICAgIC8vIHR5cGUgMSwgZGVmYXVsdCBpcyBcImdldFwiLCBtZXRob2RzIG1hcHBlZCB0byBvbmUgYWN0aW9uXG4gKiAgICAgICAgICAgICAnPHN1YiByb3V0ZT4nOiAnPGNvbnRyb2xsZXIgd2l0aCByZWxhdGl2ZSBwYXRoPi48YWN0aW9uPicsXG4gKiBcbiAqICAgICAgICAgICAgIC8vIHR5cGUgMiwgZGlmZmVyZW50IG1ldGhvZHMgbWFwcGVkIHRvIGRpZmZlcmVudCBtZXRob2RcbiAqICAgICAgICAgICAgICc8c3ViIHJvdXRlPic6IHtcbiAqICAgICAgICAgICAgICAgICc8bWV0aG9kPic6ICc8Y29udHJvbGxlciB3aXRoIHJlbGF0aXZlIHBhdGg+LjxhY3Rpb24+J1xuICogICAgICAgICAgICAgfSxcbiAqIFxuICogICAgICAgICAgICAgLy8gdHlwZSAzLCB3aXRoIG1pZGRsZXdhcmVcbiAqICAgICAgICAgICAgICc8c3ViIHJvdXRlPic6IHtcbiAqICAgICAgICAgICAgICAgICAnPG1ldGhvZD4nOiB7XG4gKiAgICAgICAgICAgICAgICAgICAgJzxtaWRkbGV3YXJlIG5hbWU+JzogeyAvL21pZGRsZXdhcmUgb3B0aW9ucyB9XG4gKiAgICAgICAgICAgICAgICAgfVxuICogICAgICAgICAgICAgfSxcbiAqIFxuICogICAgICAgICAgICAgLy8gdHlwZSA0LCBhbGwgbWV0aG9kcyBtYXBwZWQgdG8gb25lIGFjdGlvblxuICogICAgICAgICAgICAgJzxtZXRob2Q+Oi88c3ViIHJvdXRlPic6ICc8Y29udHJvbGxlciB3aXRoIHJlbGF0aXZlIHBhdGg+LjxhY3Rpb24+J1xuICogXG4gKiAgICAgICAgICAgICAvLyB0eXBlIDUsIGFsbCBtZXRob2RzIG1hcHBlZCB0byBvbmUgYWN0aW9uXG4gKiAgICAgICAgICAgICAnPG1ldGhvZD46LzxzdWIgcm91dGU+Jzoge1xuICogICAgICAgICAgICAgICAgICc8bWlkZGxld2FyZSBuYW1lPic6IHsgLy9taWRkbGV3YXJlIG9wdGlvbnMgfVxuICogICAgICAgICAgICAgfVxuICogICAgICAgICB9XG4gKiAgICAgfVxuICogfVxuICovXG5mdW5jdGlvbiBsb2FkXyhhcHAsIGJhc2VSb3V0ZSwgb3B0aW9ucykge1xuICAgIGxldCByb3V0ZXIgPSBiYXNlUm91dGUgPT09ICcvJyA/IG5ldyBSb3V0ZXIoKSA6IG5ldyBSb3V0ZXIoe3ByZWZpeDogYmFzZVJvdXRlfSk7XG5cbiAgICBpZiAob3B0aW9ucy5taWRkbGV3YXJlcykge1xuICAgICAgICBhcHAudXNlTWlkZGxld2FyZXMocm91dGVyLCBvcHRpb25zLm1pZGRsZXdhcmVzKTtcbiAgICB9XG5cbiAgICBfLmZvck93bihvcHRpb25zLnJ1bGVzIHx8IHt9LCAobWV0aG9kcywgc3ViUm91dGUpID0+IHtcbiAgICAgICAgbGV0IHBvcyA9IHN1YlJvdXRlLmluZGV4T2YoJzovJyk7XG5cbiAgICAgICAgaWYgKHBvcyAhPT0gLTEpIHtcbiAgICAgICAgICAgIGlmIChwb3MgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgICAgICAgICdJbnZhbGlkIHJvdXRlIHJ1bGUgc3ludGF4OiAnICsgc3ViUm91dGUsIFxuICAgICAgICAgICAgICAgICAgICBhcHAsIFxuICAgICAgICAgICAgICAgICAgICBgcm91dGluZ1ske2Jhc2VSb3V0ZX1dLnJ1bGUucnVsZXNgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gbGlrZSBnZXQ6Lywgb3IgcG9zdDovXG5cbiAgICAgICAgICAgIGxldCBlbWJlZGRlZE1ldGhvZCA9IHN1YlJvdXRlLnN1YnN0cigwLCBwb3MpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBzdWJSb3V0ZSA9IHN1YlJvdXRlLnN1YnN0cihwb3MgKyAyKTtcblxuICAgICAgICAgICAgbWV0aG9kcyA9IHtbZW1iZWRkZWRNZXRob2RdOiBtZXRob2RzfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YlJvdXRlID0gVXRpbC5lbnN1cmVMZWZ0U2xhc2goc3ViUm91dGUpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgbWV0aG9kcyA9PT0gJ3N0cmluZycgfHwgQXJyYXkuaXNBcnJheShtZXRob2RzKSkge1xuICAgICAgICAgICAgbWV0aG9kcyA9IHsgZ2V0OiBtZXRob2RzIH07XG4gICAgICAgIH1cblxuICAgICAgICBfLmZvck93bihtZXRob2RzLCAobWlkZGxld2FyZXMsIG1ldGhvZCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFMaXRlcmFsLkFMTE9XRURfSFRUUF9NRVRIT0RTLmhhcyhtZXRob2QpICYmIG1ldGhvZCAhPT0gJ2FsbCcpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZENvbmZpZ3VyYXRpb24oXG4gICAgICAgICAgICAgICAgICAgICdVbnN1cHBvcnRlZCBodHRwIG1ldGhvZDogJyArIG1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgICAgICAgICBgcm91dGluZ1ske2Jhc2VSb3V0ZX1dLnJ1bGUucnVsZXNbJHtzdWJSb3V0ZX1dYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFwcC5hZGRSb3V0ZShyb3V0ZXIsIG1ldGhvZCwgc3ViUm91dGUsIG1pZGRsZXdhcmVzKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBhcHAuYWRkUm91dGVyKHJvdXRlcik7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvYWRfOyJdfQ==