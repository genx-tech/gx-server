"use strict";

require("source-map-support/register");

const {
  Feature
} = require('..').enum;

const {
  _,
  eachAsync_
} = require('rk-utils');

module.exports = {
  type: Feature.READY,
  load_: (app, routes) => eachAsync_(routes, async (routersConfig, route) => {
    if (_.isPlainObject(routersConfig)) {
      return eachAsync_(routersConfig, async (options, type) => {
        let loader_ = require('../routers/' + type);

        app.log('verbose', `A "${type}" router is created at "${route}" in app [${app.name}].`);
        return loader_(app, route, options);
      });
    } else {
      let mainRoute = '/',
          baseRoute = route;
      let pos = route.indexOf(':/');

      if (pos !== -1) {
        mainRoute = route.substring(0, pos + 2);
        baseRoute = route.substring(pos + 1);
      } else if (Array.isArray(routersConfig)) {
        mainRoute = 'all:/';
      }

      let rules = {
        [mainRoute]: routersConfig
      };

      let loader_ = require('../routers/rule');

      app.log('verbose', `A "rule" router is created at "${baseRoute}" in app [${app.name}].`);
      return loader_(app, baseRoute, {
        rules: rules
      });
    }
  })
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcHBGZWF0dXJlcy9yb3V0aW5nLmpzIl0sIm5hbWVzIjpbIkZlYXR1cmUiLCJyZXF1aXJlIiwiZW51bSIsIl8iLCJlYWNoQXN5bmNfIiwibW9kdWxlIiwiZXhwb3J0cyIsInR5cGUiLCJSRUFEWSIsImxvYWRfIiwiYXBwIiwicm91dGVzIiwicm91dGVyc0NvbmZpZyIsInJvdXRlIiwiaXNQbGFpbk9iamVjdCIsIm9wdGlvbnMiLCJsb2FkZXJfIiwibG9nIiwibmFtZSIsIm1haW5Sb3V0ZSIsImJhc2VSb3V0ZSIsInBvcyIsImluZGV4T2YiLCJzdWJzdHJpbmciLCJBcnJheSIsImlzQXJyYXkiLCJydWxlcyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFPQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBY0MsT0FBTyxDQUFDLElBQUQsQ0FBUCxDQUFjQyxJQUFsQzs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLENBQUY7QUFBS0MsRUFBQUE7QUFBTCxJQUFvQkgsT0FBTyxDQUFDLFVBQUQsQ0FBakM7O0FBRUFJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQU1iQyxFQUFBQSxJQUFJLEVBQUVQLE9BQU8sQ0FBQ1EsS0FORDtBQWNiQyxFQUFBQSxLQUFLLEVBQUUsQ0FBQ0MsR0FBRCxFQUFNQyxNQUFOLEtBQWlCUCxVQUFVLENBQUNPLE1BQUQsRUFBUyxPQUFPQyxhQUFQLEVBQXNCQyxLQUF0QixLQUFnQztBQUN2RSxRQUFJVixDQUFDLENBQUNXLGFBQUYsQ0FBZ0JGLGFBQWhCLENBQUosRUFBb0M7QUFDaEMsYUFBT1IsVUFBVSxDQUFDUSxhQUFELEVBQWdCLE9BQU9HLE9BQVAsRUFBZ0JSLElBQWhCLEtBQXlCO0FBQ3RELFlBQUlTLE9BQU8sR0FBR2YsT0FBTyxDQUFDLGdCQUFnQk0sSUFBakIsQ0FBckI7O0FBRUFHLFFBQUFBLEdBQUcsQ0FBQ08sR0FBSixDQUFRLFNBQVIsRUFBb0IsTUFBS1YsSUFBSywyQkFBMEJNLEtBQU0sYUFBWUgsR0FBRyxDQUFDUSxJQUFLLElBQW5GO0FBRUEsZUFBT0YsT0FBTyxDQUFDTixHQUFELEVBQU1HLEtBQU4sRUFBYUUsT0FBYixDQUFkO0FBQ0gsT0FOZ0IsQ0FBakI7QUFPSCxLQVJELE1BUU87QUFFSCxVQUFJSSxTQUFTLEdBQUcsR0FBaEI7QUFBQSxVQUFxQkMsU0FBUyxHQUFHUCxLQUFqQztBQUNBLFVBQUlRLEdBQUcsR0FBR1IsS0FBSyxDQUFDUyxPQUFOLENBQWMsSUFBZCxDQUFWOztBQUVBLFVBQUlELEdBQUcsS0FBSyxDQUFDLENBQWIsRUFBZ0I7QUFDWkYsUUFBQUEsU0FBUyxHQUFHTixLQUFLLENBQUNVLFNBQU4sQ0FBZ0IsQ0FBaEIsRUFBbUJGLEdBQUcsR0FBRyxDQUF6QixDQUFaO0FBQ0FELFFBQUFBLFNBQVMsR0FBR1AsS0FBSyxDQUFDVSxTQUFOLENBQWdCRixHQUFHLEdBQUcsQ0FBdEIsQ0FBWjtBQUNILE9BSEQsTUFHTyxJQUFJRyxLQUFLLENBQUNDLE9BQU4sQ0FBY2IsYUFBZCxDQUFKLEVBQWtDO0FBRXJDTyxRQUFBQSxTQUFTLEdBQUcsT0FBWjtBQUNIOztBQUVELFVBQUlPLEtBQUssR0FBRztBQUNSLFNBQUNQLFNBQUQsR0FBYVA7QUFETCxPQUFaOztBQUlBLFVBQUlJLE9BQU8sR0FBR2YsT0FBTyxDQUFDLGlCQUFELENBQXJCOztBQUNBUyxNQUFBQSxHQUFHLENBQUNPLEdBQUosQ0FBUSxTQUFSLEVBQW9CLGtDQUFpQ0csU0FBVSxhQUFZVixHQUFHLENBQUNRLElBQUssSUFBcEY7QUFFQSxhQUFPRixPQUFPLENBQUNOLEdBQUQsRUFBTVUsU0FBTixFQUFpQjtBQUFFTSxRQUFBQSxLQUFLLEVBQUVBO0FBQVQsT0FBakIsQ0FBZDtBQUNIO0FBQ0osR0EvQmlDO0FBZHJCLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogRW5hYmxlIHdlYiByZXF1ZXN0IHJvdXRpbmcuXG4gKiBAbW9kdWxlIEZlYXR1cmVfUm91dGluZ1xuICovXG5cbmNvbnN0IHsgRmVhdHVyZSB9ID0gcmVxdWlyZSgnLi4nKS5lbnVtO1xuY29uc3QgeyBfLCBlYWNoQXN5bmNfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZmVhdHVyZSBpcyBsb2FkZWQgYXQgcmVhZHkgKGZpbmFsKSBzdGFnZS5cbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICovXG4gICAgdHlwZTogRmVhdHVyZS5SRUFEWSxcblxuICAgIC8qKlxuICAgICAqIExvYWQgdGhlIGZlYXR1cmUuXG4gICAgICogQHBhcmFtIHtSb3V0YWJsZX0gYXBwIC0gVGhlIGFwcCBtb2R1bGUgb2JqZWN0XG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJvdXRlcyAtIFJvdXRlcyBhbmQgY29uZmlndXJhdGlvblxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlLjwqPn1cbiAgICAgKi9cbiAgICBsb2FkXzogKGFwcCwgcm91dGVzKSA9PiBlYWNoQXN5bmNfKHJvdXRlcywgYXN5bmMgKHJvdXRlcnNDb25maWcsIHJvdXRlKSA9PiB7XG4gICAgICAgIGlmIChfLmlzUGxhaW5PYmplY3Qocm91dGVyc0NvbmZpZykpIHtcbiAgICAgICAgICAgIHJldHVybiBlYWNoQXN5bmNfKHJvdXRlcnNDb25maWcsIGFzeW5jIChvcHRpb25zLCB0eXBlKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGxvYWRlcl8gPSByZXF1aXJlKCcuLi9yb3V0ZXJzLycgKyB0eXBlKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBhcHAubG9nKCd2ZXJib3NlJywgYEEgXCIke3R5cGV9XCIgcm91dGVyIGlzIGNyZWF0ZWQgYXQgXCIke3JvdXRlfVwiIGluIGFwcCBbJHthcHAubmFtZX1dLmApO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvYWRlcl8oYXBwLCByb3V0ZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vICdyb3V0ZSc6ICdtZXRob2Q6L3BhdGgnICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXQgbWFpblJvdXRlID0gJy8nLCBiYXNlUm91dGUgPSByb3V0ZTtcbiAgICAgICAgICAgIGxldCBwb3MgPSByb3V0ZS5pbmRleE9mKCc6LycpO1xuXG4gICAgICAgICAgICBpZiAocG9zICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIG1haW5Sb3V0ZSA9IHJvdXRlLnN1YnN0cmluZygwLCBwb3MgKyAyKTtcbiAgICAgICAgICAgICAgICBiYXNlUm91dGUgPSByb3V0ZS5zdWJzdHJpbmcocG9zICsgMSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocm91dGVyc0NvbmZpZykpIHtcbiAgICAgICAgICAgICAgICAvL2FsbCBoYW5kbGVkIGJ5IG1pZGRsZXdhcmUgY2hhaW5zXG4gICAgICAgICAgICAgICAgbWFpblJvdXRlID0gJ2FsbDovJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHJ1bGVzID0ge1xuICAgICAgICAgICAgICAgIFttYWluUm91dGVdOiByb3V0ZXJzQ29uZmlnXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBsZXQgbG9hZGVyXyA9IHJlcXVpcmUoJy4uL3JvdXRlcnMvcnVsZScpO1xuICAgICAgICAgICAgYXBwLmxvZygndmVyYm9zZScsIGBBIFwicnVsZVwiIHJvdXRlciBpcyBjcmVhdGVkIGF0IFwiJHtiYXNlUm91dGV9XCIgaW4gYXBwIFske2FwcC5uYW1lfV0uYCk7XG5cbiAgICAgICAgICAgIHJldHVybiBsb2FkZXJfKGFwcCwgYmFzZVJvdXRlLCB7IHJ1bGVzOiBydWxlcyB9KTtcbiAgICAgICAgfVxuICAgIH0pXG59OyJdfQ==