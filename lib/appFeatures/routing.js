"use strict";

require("source-map-support/register");

const {
  Feature
} = require("..").Enums;

const {
  _,
  eachAsync_
} = require("rk-utils");

module.exports = {
  type: Feature.PLUGIN,
  load_: (app, routes) => {
    app.on("after:" + Feature.PLUGIN, waitFor => {
      waitFor.push(eachAsync_(routes, async (routersConfig, route) => {
        if (_.isPlainObject(routersConfig)) {
          return eachAsync_(routersConfig, async (options, type) => {
            let loader_ = require("../routers/" + type);

            app.log("verbose", `A "${type}" router is created at "${route}" in app [${app.name}].`);
            return loader_(app, route, options);
          });
        } else {
          let mainRoute = "/",
              baseRoute = route;
          let pos = route.indexOf(":/");

          if (pos !== -1) {
            mainRoute = route.substring(0, pos + 2);
            baseRoute = route.substring(pos + 1);
          } else if (Array.isArray(routersConfig)) {
            mainRoute = "all:/";
          }

          let rules = {
            [mainRoute]: routersConfig
          };

          let loader_ = require("../routers/rule");

          app.log("verbose", `A "rule" router is created at "${baseRoute}" in app [${app.name}].`);
          return loader_(app, baseRoute, {
            rules: rules
          });
        }
      }));
    });
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcHBGZWF0dXJlcy9yb3V0aW5nLmpzIl0sIm5hbWVzIjpbIkZlYXR1cmUiLCJyZXF1aXJlIiwiRW51bXMiLCJfIiwiZWFjaEFzeW5jXyIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0eXBlIiwiUExVR0lOIiwibG9hZF8iLCJhcHAiLCJyb3V0ZXMiLCJvbiIsIndhaXRGb3IiLCJwdXNoIiwicm91dGVyc0NvbmZpZyIsInJvdXRlIiwiaXNQbGFpbk9iamVjdCIsIm9wdGlvbnMiLCJsb2FkZXJfIiwibG9nIiwibmFtZSIsIm1haW5Sb3V0ZSIsImJhc2VSb3V0ZSIsInBvcyIsImluZGV4T2YiLCJzdWJzdHJpbmciLCJBcnJheSIsImlzQXJyYXkiLCJydWxlcyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFPQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBY0MsT0FBTyxDQUFDLElBQUQsQ0FBUCxDQUFjQyxLQUFsQzs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLENBQUY7QUFBS0MsRUFBQUE7QUFBTCxJQUFvQkgsT0FBTyxDQUFDLFVBQUQsQ0FBakM7O0FBRUFJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUtiQyxFQUFBQSxJQUFJLEVBQUVQLE9BQU8sQ0FBQ1EsTUFMRDtBQWFiQyxFQUFBQSxLQUFLLEVBQUUsQ0FBQ0MsR0FBRCxFQUFNQyxNQUFOLEtBQWlCO0FBQ3BCRCxJQUFBQSxHQUFHLENBQUNFLEVBQUosQ0FBTyxXQUFXWixPQUFPLENBQUNRLE1BQTFCLEVBQW1DSyxPQUFELElBQWE7QUFDM0NBLE1BQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUNJVixVQUFVLENBQUNPLE1BQUQsRUFBUyxPQUFPSSxhQUFQLEVBQXNCQyxLQUF0QixLQUFnQztBQUMvQyxZQUFJYixDQUFDLENBQUNjLGFBQUYsQ0FBZ0JGLGFBQWhCLENBQUosRUFBb0M7QUFDaEMsaUJBQU9YLFVBQVUsQ0FBQ1csYUFBRCxFQUFnQixPQUFPRyxPQUFQLEVBQWdCWCxJQUFoQixLQUF5QjtBQUN0RCxnQkFBSVksT0FBTyxHQUFHbEIsT0FBTyxDQUFDLGdCQUFnQk0sSUFBakIsQ0FBckI7O0FBRUFHLFlBQUFBLEdBQUcsQ0FBQ1UsR0FBSixDQUFRLFNBQVIsRUFBb0IsTUFBS2IsSUFBSywyQkFBMEJTLEtBQU0sYUFBWU4sR0FBRyxDQUFDVyxJQUFLLElBQW5GO0FBRUEsbUJBQU9GLE9BQU8sQ0FBQ1QsR0FBRCxFQUFNTSxLQUFOLEVBQWFFLE9BQWIsQ0FBZDtBQUNILFdBTmdCLENBQWpCO0FBT0gsU0FSRCxNQVFPO0FBRUgsY0FBSUksU0FBUyxHQUFHLEdBQWhCO0FBQUEsY0FDSUMsU0FBUyxHQUFHUCxLQURoQjtBQUVBLGNBQUlRLEdBQUcsR0FBR1IsS0FBSyxDQUFDUyxPQUFOLENBQWMsSUFBZCxDQUFWOztBQUVBLGNBQUlELEdBQUcsS0FBSyxDQUFDLENBQWIsRUFBZ0I7QUFDWkYsWUFBQUEsU0FBUyxHQUFHTixLQUFLLENBQUNVLFNBQU4sQ0FBZ0IsQ0FBaEIsRUFBbUJGLEdBQUcsR0FBRyxDQUF6QixDQUFaO0FBQ0FELFlBQUFBLFNBQVMsR0FBR1AsS0FBSyxDQUFDVSxTQUFOLENBQWdCRixHQUFHLEdBQUcsQ0FBdEIsQ0FBWjtBQUNILFdBSEQsTUFHTyxJQUFJRyxLQUFLLENBQUNDLE9BQU4sQ0FBY2IsYUFBZCxDQUFKLEVBQWtDO0FBRXJDTyxZQUFBQSxTQUFTLEdBQUcsT0FBWjtBQUNIOztBQUVELGNBQUlPLEtBQUssR0FBRztBQUNSLGFBQUNQLFNBQUQsR0FBYVA7QUFETCxXQUFaOztBQUlBLGNBQUlJLE9BQU8sR0FBR2xCLE9BQU8sQ0FBQyxpQkFBRCxDQUFyQjs7QUFDQVMsVUFBQUEsR0FBRyxDQUFDVSxHQUFKLENBQVEsU0FBUixFQUFvQixrQ0FBaUNHLFNBQVUsYUFBWWIsR0FBRyxDQUFDVyxJQUFLLElBQXBGO0FBRUEsaUJBQU9GLE9BQU8sQ0FBQ1QsR0FBRCxFQUFNYSxTQUFOLEVBQWlCO0FBQUVNLFlBQUFBLEtBQUssRUFBRUE7QUFBVCxXQUFqQixDQUFkO0FBQ0g7QUFDSixPQWhDUyxDQURkO0FBbUNILEtBcENEO0FBcUNIO0FBbkRZLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogRW5hYmxlIHdlYiByZXF1ZXN0IHJvdXRpbmcuXG4gKiBAbW9kdWxlIEZlYXR1cmVfUm91dGluZ1xuICovXG5cbmNvbnN0IHsgRmVhdHVyZSB9ID0gcmVxdWlyZShcIi4uXCIpLkVudW1zO1xuY29uc3QgeyBfLCBlYWNoQXN5bmNfIH0gPSByZXF1aXJlKFwicmstdXRpbHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIC8qKlxuICAgICAqIFRoaXMgZmVhdHVyZSBpcyBsb2FkZWQgYXQgcmVhZHkgKGZpbmFsKSBzdGFnZS5cbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICovXG4gICAgdHlwZTogRmVhdHVyZS5QTFVHSU4sXG5cbiAgICAvKipcbiAgICAgKiBMb2FkIHRoZSBmZWF0dXJlLlxuICAgICAqIEBwYXJhbSB7Um91dGFibGV9IGFwcCAtIFRoZSBhcHAgbW9kdWxlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSByb3V0ZXMgLSBSb3V0ZXMgYW5kIGNvbmZpZ3VyYXRpb25cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZS48Kj59XG4gICAgICovXG4gICAgbG9hZF86IChhcHAsIHJvdXRlcykgPT4ge1xuICAgICAgICBhcHAub24oXCJhZnRlcjpcIiArIEZlYXR1cmUuUExVR0lOLCAod2FpdEZvcikgPT4ge1xuICAgICAgICAgICAgd2FpdEZvci5wdXNoKFxuICAgICAgICAgICAgICAgIGVhY2hBc3luY18ocm91dGVzLCBhc3luYyAocm91dGVyc0NvbmZpZywgcm91dGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8uaXNQbGFpbk9iamVjdChyb3V0ZXJzQ29uZmlnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVhY2hBc3luY18ocm91dGVyc0NvbmZpZywgYXN5bmMgKG9wdGlvbnMsIHR5cGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbG9hZGVyXyA9IHJlcXVpcmUoXCIuLi9yb3V0ZXJzL1wiICsgdHlwZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHAubG9nKFwidmVyYm9zZVwiLCBgQSBcIiR7dHlwZX1cIiByb3V0ZXIgaXMgY3JlYXRlZCBhdCBcIiR7cm91dGV9XCIgaW4gYXBwIFske2FwcC5uYW1lfV0uYCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9hZGVyXyhhcHAsIHJvdXRlLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJ3JvdXRlJzogJ21ldGhvZDovcGF0aCdcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtYWluUm91dGUgPSBcIi9cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlUm91dGUgPSByb3V0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwb3MgPSByb3V0ZS5pbmRleE9mKFwiOi9cIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3MgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFpblJvdXRlID0gcm91dGUuc3Vic3RyaW5nKDAsIHBvcyArIDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VSb3V0ZSA9IHJvdXRlLnN1YnN0cmluZyhwb3MgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyb3V0ZXJzQ29uZmlnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxsIGhhbmRsZWQgYnkgbWlkZGxld2FyZSBjaGFpbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWluUm91dGUgPSBcImFsbDovXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBydWxlcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbbWFpblJvdXRlXTogcm91dGVyc0NvbmZpZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsb2FkZXJfID0gcmVxdWlyZShcIi4uL3JvdXRlcnMvcnVsZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcC5sb2coXCJ2ZXJib3NlXCIsIGBBIFwicnVsZVwiIHJvdXRlciBpcyBjcmVhdGVkIGF0IFwiJHtiYXNlUm91dGV9XCIgaW4gYXBwIFske2FwcC5uYW1lfV0uYCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2FkZXJfKGFwcCwgYmFzZVJvdXRlLCB7IHJ1bGVzOiBydWxlcyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9LFxufTtcbiJdfQ==