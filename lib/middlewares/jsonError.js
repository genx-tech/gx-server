"use strict";

require("source-map-support/register");

const http = require('http');

const {
  _
} = require('rk-utils');

module.exports = (opt, app) => {
  let handler;

  if (opt && opt.customHandler) {
    handler = app.getBackendAction(opt.customHandler);
  }

  return async (ctx, next) => {
    try {
      await next();
      if (ctx.response.status === 404 && !ctx.response.body) ctx.throw(404);
    } catch (err) {
      ctx.status = typeof err.status === 'number' ? err.status : 500;
      ctx.type = 'application/json';

      if (handler) {
        ctx.body = await handler(ctx, err);
      } else {
        let errorObject = {
          error: err.expose ? err.message : http.STATUS_CODES[ctx.status],
          ..._.pick(err, ['code', 'errorCode', 'payload'])
        };

        if (ctx.appModule.env === 'development') {
          errorObject.stack = err.stack;
          errorObject.appModule = ctx.appModule.name;
        }

        ctx.body = errorObject;
      }

      ctx.app.emit('error', err, ctx);
    }
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlcy9qc29uRXJyb3IuanMiXSwibmFtZXMiOlsiaHR0cCIsInJlcXVpcmUiLCJfIiwibW9kdWxlIiwiZXhwb3J0cyIsIm9wdCIsImFwcCIsImhhbmRsZXIiLCJjdXN0b21IYW5kbGVyIiwiZ2V0QmFja2VuZEFjdGlvbiIsImN0eCIsIm5leHQiLCJyZXNwb25zZSIsInN0YXR1cyIsImJvZHkiLCJ0aHJvdyIsImVyciIsInR5cGUiLCJlcnJvck9iamVjdCIsImVycm9yIiwiZXhwb3NlIiwibWVzc2FnZSIsIlNUQVRVU19DT0RFUyIsInBpY2siLCJhcHBNb2R1bGUiLCJlbnYiLCJzdGFjayIsIm5hbWUiLCJlbWl0Il0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQU9BLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQVFELE9BQU8sQ0FBQyxVQUFELENBQXJCOztBQUVBRSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDM0IsTUFBSUMsT0FBSjs7QUFFQSxNQUFJRixHQUFHLElBQUlBLEdBQUcsQ0FBQ0csYUFBZixFQUE4QjtBQUMxQkQsSUFBQUEsT0FBTyxHQUFHRCxHQUFHLENBQUNHLGdCQUFKLENBQXFCSixHQUFHLENBQUNHLGFBQXpCLENBQVY7QUFDSDs7QUFFRCxTQUFPLE9BQU9FLEdBQVAsRUFBWUMsSUFBWixLQUFxQjtBQUN4QixRQUFJO0FBQ0EsWUFBTUEsSUFBSSxFQUFWO0FBQ0EsVUFBSUQsR0FBRyxDQUFDRSxRQUFKLENBQWFDLE1BQWIsS0FBd0IsR0FBeEIsSUFBK0IsQ0FBQ0gsR0FBRyxDQUFDRSxRQUFKLENBQWFFLElBQWpELEVBQXVESixHQUFHLENBQUNLLEtBQUosQ0FBVSxHQUFWO0FBQzFELEtBSEQsQ0FHRSxPQUFPQyxHQUFQLEVBQVk7QUFDVk4sTUFBQUEsR0FBRyxDQUFDRyxNQUFKLEdBQWEsT0FBT0csR0FBRyxDQUFDSCxNQUFYLEtBQXNCLFFBQXRCLEdBQWlDRyxHQUFHLENBQUNILE1BQXJDLEdBQThDLEdBQTNEO0FBR0FILE1BQUFBLEdBQUcsQ0FBQ08sSUFBSixHQUFXLGtCQUFYOztBQUVBLFVBQUlWLE9BQUosRUFBYTtBQUNURyxRQUFBQSxHQUFHLENBQUNJLElBQUosR0FBVyxNQUFNUCxPQUFPLENBQUNHLEdBQUQsRUFBTU0sR0FBTixDQUF4QjtBQUNILE9BRkQsTUFFTztBQUNILFlBQUlFLFdBQVcsR0FBRztBQUNkQyxVQUFBQSxLQUFLLEVBQUVILEdBQUcsQ0FBQ0ksTUFBSixHQUFhSixHQUFHLENBQUNLLE9BQWpCLEdBQTJCckIsSUFBSSxDQUFDc0IsWUFBTCxDQUFrQlosR0FBRyxDQUFDRyxNQUF0QixDQURwQjtBQUVkLGFBQUdYLENBQUMsQ0FBQ3FCLElBQUYsQ0FBT1AsR0FBUCxFQUFZLENBQUMsTUFBRCxFQUFTLFdBQVQsRUFBc0IsU0FBdEIsQ0FBWjtBQUZXLFNBQWxCOztBQUtBLFlBQUlOLEdBQUcsQ0FBQ2MsU0FBSixDQUFjQyxHQUFkLEtBQXNCLGFBQTFCLEVBQXlDO0FBQ3JDUCxVQUFBQSxXQUFXLENBQUNRLEtBQVosR0FBb0JWLEdBQUcsQ0FBQ1UsS0FBeEI7QUFDQVIsVUFBQUEsV0FBVyxDQUFDTSxTQUFaLEdBQXdCZCxHQUFHLENBQUNjLFNBQUosQ0FBY0csSUFBdEM7QUFDSDs7QUFFRGpCLFFBQUFBLEdBQUcsQ0FBQ0ksSUFBSixHQUFXSSxXQUFYO0FBQ0g7O0FBR0RSLE1BQUFBLEdBQUcsQ0FBQ0osR0FBSixDQUFRc0IsSUFBUixDQUFhLE9BQWIsRUFBc0JaLEdBQXRCLEVBQTJCTixHQUEzQjtBQUNIO0FBQ0osR0E3QkQ7QUE4QkgsQ0FyQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBFcnJvciByZXNwb25zZSBtaWRkbGV3YXJlIHdpdGgganNvblxuICogQG1vZHVsZSBNaWRkbGV3YXJlX0pzb25FcnJvclxuICovXG5cbmNvbnN0IGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG5jb25zdCB7IF8gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKG9wdCwgYXBwKSA9PiB7IFxuICAgIGxldCBoYW5kbGVyO1xuXG4gICAgaWYgKG9wdCAmJiBvcHQuY3VzdG9tSGFuZGxlcikge1xuICAgICAgICBoYW5kbGVyID0gYXBwLmdldEJhY2tlbmRBY3Rpb24ob3B0LmN1c3RvbUhhbmRsZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBhc3luYyAoY3R4LCBuZXh0KSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBuZXh0KCk7XG4gICAgICAgICAgICBpZiAoY3R4LnJlc3BvbnNlLnN0YXR1cyA9PT0gNDA0ICYmICFjdHgucmVzcG9uc2UuYm9keSkgY3R4LnRocm93KDQwNCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY3R4LnN0YXR1cyA9IHR5cGVvZiBlcnIuc3RhdHVzID09PSAnbnVtYmVyJyA/IGVyci5zdGF0dXMgOiA1MDA7ICAgICAgICBcbiAgICAgICAgXG4gICAgICAgICAgICAvLyBhY2NlcHRlZCB0eXBlc1xuICAgICAgICAgICAgY3R4LnR5cGUgPSAnYXBwbGljYXRpb24vanNvbic7XG5cbiAgICAgICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgY3R4LmJvZHkgPSBhd2FpdCBoYW5kbGVyKGN0eCwgZXJyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGVycm9yT2JqZWN0ID0geyBcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVyci5leHBvc2UgPyBlcnIubWVzc2FnZSA6IGh0dHAuU1RBVFVTX0NPREVTW2N0eC5zdGF0dXNdLFxuICAgICAgICAgICAgICAgICAgICAuLi5fLnBpY2soZXJyLCBbJ2NvZGUnLCAnZXJyb3JDb2RlJywgJ3BheWxvYWQnXSkgXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGlmIChjdHguYXBwTW9kdWxlLmVudiA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICAgICAgICAgICAgICBlcnJvck9iamVjdC5zdGFjayA9IGVyci5zdGFjaztcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JPYmplY3QuYXBwTW9kdWxlID0gY3R4LmFwcE1vZHVsZS5uYW1lO1xuICAgICAgICAgICAgICAgIH0gICAgICAgIFxuXG4gICAgICAgICAgICAgICAgY3R4LmJvZHkgPSBlcnJvck9iamVjdDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYXBwbGljYXRpb25cbiAgICAgICAgICAgIGN0eC5hcHAuZW1pdCgnZXJyb3InLCBlcnIsIGN0eCk7XG4gICAgICAgIH0gICAgICAgIFxuICAgIH0gXG59OyAgICAgICAiXX0=