"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  eachAsync_
} = require('rk-utils');

const {
  Runable,
  ServiceContainer
} = require('@genx/app');

const Routable = require('./Routable');

const Literal = require('./enum/Literal');

const {
  defaultBackendPath
} = require('./utils/Helpers');

const mount = require('koa-mount');

class WebServer extends Routable(Runable(ServiceContainer)) {
  constructor(name, options) {
    if (typeof options === 'undefined' && _.isPlainObject(name)) {
      options = name;
      name = undefined;
    }

    super(name || 'server', Object.assign({
      configName: Literal.SERVER_CFG_NAME
    }, options));
    this.server = this;
    this.isServer = true;
    this.backendPath = this.toAbsolutePath(this.options.backendPath || defaultBackendPath);
    this.appModulesPath = this.toAbsolutePath(this.options.appModulesPath || Literal.APP_MODULES_PATH);
    this.route = "/";
    this.on('configLoaded', () => {
      this.loadMiddlewaresFrom(path.resolve(__dirname, Literal.MIDDLEWARES_PATH));
    });
  }

  async stop_() {
    if (this.started) {
      if (this.appModules) {
        await eachAsync_(this.appModules, app => app.stop_());
        delete this.appModules;
        delete this.appModulesByAlias;
      }

      if (this.libModules) {
        await eachAsync_(this.libModules, lib => lib.stop_());
        delete this.libModules;
      }
    }

    if (this.httpServer) {
      await new Promise((resolve, reject) => {
        this.httpServer.close(err => {
          if (err) return reject(err);
          resolve();
        });
      });
      delete this.httpServer;
      this.log('info', `The http service is stopped.`);
    }

    return super.stop_();
  }

  mountApp(app) {
    if (!this.appModules) {
      this.appModules = {};
      this.appModulesByAlias = {};
    }

    if (!!this.appModules.hasOwnProperty(app.route)) {
      throw new Error("Assertion failed: !this.appModules.hasOwnProperty(app.route)");
    }

    this.router.use(mount(app.route, app.router));
    this.appModules[app.route] = app;

    if (app.name in this.appModulesByAlias) {
      let existingApp = this.appModulesByAlias[app.name];
      this.appModulesByAlias[`${existingApp.name}[@${existingApp.route}]`] = existingApp;
      delete this.appModulesByAlias[app.name];
      this.appModulesByAlias[`${app.name}[@${app.route}]`] = app;
    } else {
      this.appModulesByAlias[app.name] = app;
    }

    this.log('verbose', `All routes from app [${app.name}] are mounted under "${app.route}".`);
  }

  registerLib(lib) {
    if (!this.libModules) {
      this.libModules = {};
    }

    this.libModules[lib.name] = lib;
  }

  getAppByRoute(p) {
    return this.appModules[p];
  }

  getAppByAlias(a) {
    return this.appModulesByAlias[a];
  }

  getLib(libName) {
    if (!this.libModules) {
      throw new Error('"libModules" feature is required to access lib among modules.');
    }

    let libModule = this.libModules[libName];

    if (!libModule) {
      throw new Error(`Lib module [${libName}] not found.`);
    }

    return libModule;
  }

  requireFromLib(libName, relativePath) {
    let libModule = this.getLib(libName);
    return libModule.require(relativePath);
  }

  getService(name) {
    let pos = name.indexOf(':');

    if (pos === -1) {
      return super.getService(name);
    }

    let modAlias = name.substr(0, pos);
    name = name.substr(pos + 1);
    let app = this.getAppByAlias(modAlias);
    return app && app.getService(name, true);
  }

  _getFeatureFallbackPath() {
    let pathArray = super._getFeatureFallbackPath();

    pathArray.splice(1, 0, path.resolve(__dirname, Literal.FEATURES_PATH), path.resolve(__dirname, Literal.APP_FEATURES_PATH), path.resolve(__dirname, Literal.SERVER_FEATURES_PATH));
    return pathArray;
  }

}

module.exports = WebServer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,