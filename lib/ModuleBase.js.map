{"version":3,"sources":["../src/ModuleBase.js"],"names":["path","require","Literal","defaultBackendPath","ModuleBase","Base","constructor","server","name","appPath","options","Object","assign","workingPath","configPath","join","DEFAULT_CONFIG_PATH","isServer","backendPath","toAbsolutePath","getService","currentModuleOnly","relativePath","modPath","requireFromLib","libName","log","level","message","rest","logWithAppName","logger","_getFeatureFallbackPath","pathArray","splice","resolve","__dirname","FEATURES_PATH","module","exports"],"mappings":"AAAA;;;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,gBAAD,CAAvB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAyBF,OAAO,CAAC,iBAAD,CAAtC;;AAEA,MAAMG,UAAU,GAAGC,IAAI,IAAI,cAAcA,IAAd,CAAmB;AAS1CC,EAAAA,WAAW,CAACC,MAAD,EAASC,IAAT,EAAeC,OAAf,EAAwBC,OAAxB,EAAiC;AACxC,UAAMF,IAAN,EAAYG,MAAM,CAACC,MAAP,CAAc;AACtBC,MAAAA,WAAW,EAAEJ,OADS;AAEtBK,MAAAA,UAAU,EAAEd,IAAI,CAACe,IAAL,CAAUN,OAAV,EAAmBP,OAAO,CAACc,mBAA3B;AAFU,KAAd,EAGTN,OAHS,CAAZ;AASA,SAAKH,MAAL,GAAcA,MAAd;AAMA,SAAKU,QAAL,GAAgB,KAAhB;AAMA,SAAKC,WAAL,GAAmB,KAAKC,cAAL,CAAoB,KAAKT,OAAL,CAAaQ,WAAb,IAA4Bf,kBAAhD,CAAnB;AACH;;AAODiB,EAAAA,UAAU,CAACZ,IAAD,EAAOa,iBAAP,EAA0B;AAChC,WAAO,MAAMD,UAAN,CAAiBZ,IAAjB,KAA2B,CAACa,iBAAD,IAAsB,KAAKd,MAAL,CAAYa,UAAZ,CAAuBZ,IAAvB,CAAxD;AACH;;AAMDP,EAAAA,OAAO,CAACqB,YAAD,EAAe;AAClB,QAAIC,OAAO,GAAGvB,IAAI,CAACe,IAAL,CAAU,KAAKG,WAAf,EAA4BI,YAA5B,CAAd;AACA,WAAOrB,OAAO,CAACsB,OAAD,CAAd;AACH;;AAMDC,EAAAA,cAAc,CAACC,OAAD,EAAUH,YAAV,EAAwB;AAClC,WAAO,KAAKf,MAAL,CAAYiB,cAAZ,CAA2BC,OAA3B,EAAoCH,YAApC,CAAP;AACH;;AASDI,EAAAA,GAAG,CAACC,KAAD,EAAQC,OAAR,EAAiB,GAAGC,IAApB,EAA0B;AACzB,QAAI,KAAKnB,OAAL,CAAaoB,cAAjB,EAAiC;AAC7BF,MAAAA,OAAO,GAAG,MAAM,KAAKpB,IAAX,GAAkB,IAAlB,GAAyBoB,OAAnC;AACH;;AAED,QAAI,KAAKG,MAAT,EAAiB;AACb,WAAKA,MAAL,CAAYL,GAAZ,CAAgBC,KAAhB,EAAuBC,OAAvB,EAAgC,GAAGC,IAAnC;AACH,KAFD,MAEO;AACH,WAAKtB,MAAL,CAAYmB,GAAZ,CAAgBC,KAAhB,EAAuBC,OAAvB,EAAgC,GAAGC,IAAnC;AACH;;AAED,WAAO,IAAP;AACH;;AAEDG,EAAAA,uBAAuB,GAAG;AACtB,QAAIC,SAAS,GAAG,MAAMD,uBAAN,EAAhB;;AACAC,IAAAA,SAAS,CAACC,MAAV,CAAiB,CAAjB,EAAoB,CAApB,EAAuBlC,IAAI,CAACmC,OAAL,CAAaC,SAAb,EAAwBlC,OAAO,CAACmC,aAAhC,CAAvB;AACA,WAAOJ,SAAP;AACH;;AArFyC,CAA9C;;AAwFAK,MAAM,CAACC,OAAP,GAAiBnC,UAAjB","sourcesContent":["\"use strict\";\n\nconst path = require('path');\nconst Literal = require('./enum/Literal');\nconst { defaultBackendPath } = require('./utils/Helpers');\n\nconst ModuleBase = Base => class extends Base {\n    /**     \n     * @param {WebServer} server\n     * @param {string} name - The name of the app module.\n     * @param {string} route - The base route of the app module.\n     * @param {string} appPath - The path to load the app's module files\n     * @param {object} [options] - The app module's extra options defined in its parent's configuration.          \n     * @property {bool} [options.logWithAppName=false] - Flag to include app name in log message.\n     */\n    constructor(server, name, appPath, options) {    \n        super(name, Object.assign({\n            workingPath: appPath, \n            configPath: path.join(appPath, Literal.DEFAULT_CONFIG_PATH)\n        }, options));\n\n        /**\n         * Hosting server.\n         * @member {WebServer}\n         **/\n        this.server = server;        \n\n        /**\n         * Whether it is a server.\n         * @member {boolean}\n         **/\n        this.isServer = false;\n\n        /**\n         * Backend files path.\n         * @member {string}         \n         **/\n        this.backendPath = this.toAbsolutePath(this.options.backendPath || defaultBackendPath); \n    }  \n\n    /**\n     * Get a service from module hierarchy     \n     * @param name\n     * @returns {object}\n     */\n    getService(name, currentModuleOnly) {\n        return super.getService(name) || (!currentModuleOnly && this.server.getService(name));\n    }    \n\n    /**\n     * Require a js module from backend path\n     * @param {*} relativePath \n     */\n    require(relativePath) {\n        let modPath = path.join(this.backendPath, relativePath);\n        return require(modPath);\n    }\n\n    /**\n     * Require a module from the source path of a library module\n     * @param {*} relativePath \n     */\n    requireFromLib(libName, relativePath) {\n        return this.server.requireFromLib(libName, relativePath);\n    }\n\n    /**\n     * Default log method, may be override by loggers feature\n     * @param {string} level - Log level\n     * @param {string} message - Log message\n     * @param {...object} rest - Extra meta data\n     * @returns {Routable}\n     */\n    log(level, message, ...rest) {\n        if (this.options.logWithAppName) {\n            message = '[' + this.name + '] ' + message;\n        }\n\n        if (this.logger) {\n            this.logger.log(level, message, ...rest);\n        } else {\n            this.server.log(level, message, ...rest);\n        }\n        \n        return this;\n    }\n\n    _getFeatureFallbackPath() {\n        let pathArray = super._getFeatureFallbackPath();\n        pathArray.splice(1, 0, path.resolve(__dirname, Literal.FEATURES_PATH));\n        return pathArray;\n    }\n}\n\nmodule.exports = ModuleBase;"],"file":"ModuleBase.js"}