"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const _ = Util._;

function httpMethod(method, middlewares) {
  if (arguments.length === 3) {
    return httpMethod('get')(...Array.prototype.slice.call(arguments));
  }

  return function (target, name, descriptor) {
    let targetFunction,
        isHof = false;

    if (arguments.length === 1 && typeof target === 'function') {
      targetFunction = target;
      isHof = true;
    } else if (descriptor && descriptor.value) {
      targetFunction = descriptor.value;
      descriptor.enumerable = true;
    } else {
      throw new Error('Unsupported scenario.');
    }

    if (targetFunction) {
      if (typeof method === 'string') {
        let pos = method.indexOf(':/');

        if (pos !== -1) {
          if (pos === 0) {
            throw new Error('Invalid httpMethod decorator param: ' + method);
          }

          targetFunction.__metaRoute = method.substr(pos + 1);
          method = method.substr(0, pos).toLocaleLowerCase();
        }
      } else {
        method = 'get';
      }

      targetFunction.__metaHttpMethod = method;

      if (middlewares) {
        if (_.isPlainObject(middlewares)) {
          targetFunction.__metaMiddlewares = _.map(middlewares, (options, name) => ({
            name,
            options
          }));
        } else {
          targetFunction.__metaMiddlewares = _.castArray(middlewares);
        }
      }
    }

    return isHof ? targetFunction : descriptor;
  };
}

module.exports = httpMethod;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kZWNvcmF0b3JzL2h0dHBNZXRob2QuanMiXSwibmFtZXMiOlsiVXRpbCIsInJlcXVpcmUiLCJfIiwiaHR0cE1ldGhvZCIsIm1ldGhvZCIsIm1pZGRsZXdhcmVzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJ0YXJnZXQiLCJuYW1lIiwiZGVzY3JpcHRvciIsInRhcmdldEZ1bmN0aW9uIiwiaXNIb2YiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJFcnJvciIsInBvcyIsImluZGV4T2YiLCJfX21ldGFSb3V0ZSIsInN1YnN0ciIsInRvTG9jYWxlTG93ZXJDYXNlIiwiX19tZXRhSHR0cE1ldGhvZCIsImlzUGxhaW5PYmplY3QiLCJfX21ldGFNaWRkbGV3YXJlcyIsIm1hcCIsIm9wdGlvbnMiLCJjYXN0QXJyYXkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBcEI7O0FBQ0EsTUFBTUMsQ0FBQyxHQUFHRixJQUFJLENBQUNFLENBQWY7O0FBRUEsU0FBU0MsVUFBVCxDQUFvQkMsTUFBcEIsRUFBNEJDLFdBQTVCLEVBQXlDO0FBQ3JDLE1BQUlDLFNBQVMsQ0FBQ0MsTUFBVixLQUFxQixDQUF6QixFQUE0QjtBQUN4QixXQUFPSixVQUFVLENBQUMsS0FBRCxDQUFWLENBQWtCLEdBQUdLLEtBQUssQ0FBQ0MsU0FBTixDQUFnQkMsS0FBaEIsQ0FBc0JDLElBQXRCLENBQTJCTCxTQUEzQixDQUFyQixDQUFQO0FBQ0g7O0FBRUQsU0FBTyxVQUFVTSxNQUFWLEVBQWtCQyxJQUFsQixFQUF3QkMsVUFBeEIsRUFBb0M7QUFDdkMsUUFBSUMsY0FBSjtBQUFBLFFBQW9CQyxLQUFLLEdBQUcsS0FBNUI7O0FBRUEsUUFBSVYsU0FBUyxDQUFDQyxNQUFWLEtBQXFCLENBQXJCLElBQTBCLE9BQU9LLE1BQVAsS0FBa0IsVUFBaEQsRUFBNEQ7QUFDeERHLE1BQUFBLGNBQWMsR0FBR0gsTUFBakI7QUFDQUksTUFBQUEsS0FBSyxHQUFHLElBQVI7QUFDSCxLQUhELE1BR08sSUFBSUYsVUFBVSxJQUFJQSxVQUFVLENBQUNHLEtBQTdCLEVBQW9DO0FBQ3ZDRixNQUFBQSxjQUFjLEdBQUdELFVBQVUsQ0FBQ0csS0FBNUI7QUFDQUgsTUFBQUEsVUFBVSxDQUFDSSxVQUFYLEdBQXdCLElBQXhCO0FBQ0gsS0FITSxNQUdBO0FBQ0gsWUFBTSxJQUFJQyxLQUFKLENBQVUsdUJBQVYsQ0FBTjtBQUNIOztBQUVELFFBQUlKLGNBQUosRUFBb0I7QUFFaEIsVUFBSSxPQUFPWCxNQUFQLEtBQWtCLFFBQXRCLEVBQWdDO0FBQzVCLFlBQUlnQixHQUFHLEdBQUdoQixNQUFNLENBQUNpQixPQUFQLENBQWUsSUFBZixDQUFWOztBQUVBLFlBQUlELEdBQUcsS0FBSyxDQUFDLENBQWIsRUFBZ0I7QUFDWixjQUFJQSxHQUFHLEtBQUssQ0FBWixFQUFlO0FBQ1gsa0JBQU0sSUFBSUQsS0FBSixDQUFVLHlDQUF5Q2YsTUFBbkQsQ0FBTjtBQUNIOztBQUtEVyxVQUFBQSxjQUFjLENBQUNPLFdBQWYsR0FBNkJsQixNQUFNLENBQUNtQixNQUFQLENBQWNILEdBQUcsR0FBRyxDQUFwQixDQUE3QjtBQUNBaEIsVUFBQUEsTUFBTSxHQUFHQSxNQUFNLENBQUNtQixNQUFQLENBQWMsQ0FBZCxFQUFpQkgsR0FBakIsRUFBc0JJLGlCQUF0QixFQUFUO0FBQ0g7QUFDSixPQWRELE1BY087QUFDSHBCLFFBQUFBLE1BQU0sR0FBRyxLQUFUO0FBQ0g7O0FBRURXLE1BQUFBLGNBQWMsQ0FBQ1UsZ0JBQWYsR0FBa0NyQixNQUFsQzs7QUFFQSxVQUFJQyxXQUFKLEVBQWlCO0FBQ2IsWUFBSUgsQ0FBQyxDQUFDd0IsYUFBRixDQUFnQnJCLFdBQWhCLENBQUosRUFBa0M7QUFDOUJVLFVBQUFBLGNBQWMsQ0FBQ1ksaUJBQWYsR0FBbUN6QixDQUFDLENBQUMwQixHQUFGLENBQU12QixXQUFOLEVBQW1CLENBQUN3QixPQUFELEVBQVVoQixJQUFWLE1BQW9CO0FBQUVBLFlBQUFBLElBQUY7QUFBUWdCLFlBQUFBO0FBQVIsV0FBcEIsQ0FBbkIsQ0FBbkM7QUFDSCxTQUZELE1BRU87QUFDSGQsVUFBQUEsY0FBYyxDQUFDWSxpQkFBZixHQUFtQ3pCLENBQUMsQ0FBQzRCLFNBQUYsQ0FBWXpCLFdBQVosQ0FBbkM7QUFDSDtBQUNKO0FBQ0o7O0FBRUQsV0FBT1csS0FBSyxHQUFHRCxjQUFILEdBQW9CRCxVQUFoQztBQUNILEdBN0NEO0FBOENIOztBQUVEaUIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCN0IsVUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgVXRpbCA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCBfID0gVXRpbC5fO1xuXG5mdW5jdGlvbiBodHRwTWV0aG9kKG1ldGhvZCwgbWlkZGxld2FyZXMpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykge1xuICAgICAgICByZXR1cm4gaHR0cE1ldGhvZCgnZ2V0JykoLi4uQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIG5hbWUsIGRlc2NyaXB0b3IpIHtcbiAgICAgICAgbGV0IHRhcmdldEZ1bmN0aW9uLCBpc0hvZiA9IGZhbHNlO1xuICAgIFxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0YXJnZXRGdW5jdGlvbiA9IHRhcmdldDtcbiAgICAgICAgICAgIGlzSG9mID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWUpIHtcbiAgICAgICAgICAgIHRhcmdldEZ1bmN0aW9uID0gZGVzY3JpcHRvci52YWx1ZTtcbiAgICAgICAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHNjZW5hcmlvLicpO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIGlmICh0YXJnZXRGdW5jdGlvbikge1xuICAgIFxuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXRob2QgPT09ICdzdHJpbmcnKSB7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxldCBwb3MgPSBtZXRob2QuaW5kZXhPZignOi8nKTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAocG9zICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9zID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaHR0cE1ldGhvZCBkZWNvcmF0b3IgcGFyYW06ICcgKyBtZXRob2QpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIGxpa2UgZ2V0Oi8sIG9yIHBvc3Q6L1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvL292ZXJyaWRlIGFjdGlvbk5hbWUgYXMgcm91dGVcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RnVuY3Rpb24uX19tZXRhUm91dGUgPSBtZXRob2Quc3Vic3RyKHBvcyArIDEpO1xuICAgICAgICAgICAgICAgICAgICBtZXRob2QgPSBtZXRob2Quc3Vic3RyKDAsIHBvcykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1ldGhvZCA9ICdnZXQnO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgdGFyZ2V0RnVuY3Rpb24uX19tZXRhSHR0cE1ldGhvZCA9IG1ldGhvZDsgICAgICAgICAgICBcbiAgICBcbiAgICAgICAgICAgIGlmIChtaWRkbGV3YXJlcykge1xuICAgICAgICAgICAgICAgIGlmIChfLmlzUGxhaW5PYmplY3QobWlkZGxld2FyZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEZ1bmN0aW9uLl9fbWV0YU1pZGRsZXdhcmVzID0gXy5tYXAobWlkZGxld2FyZXMsIChvcHRpb25zLCBuYW1lKSA9PiAoeyBuYW1lLCBvcHRpb25zIH0pKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRGdW5jdGlvbi5fX21ldGFNaWRkbGV3YXJlcyA9IF8uY2FzdEFycmF5KG1pZGRsZXdhcmVzKTtcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXG4gICAgICAgIHJldHVybiBpc0hvZiA/IHRhcmdldEZ1bmN0aW9uIDogZGVzY3JpcHRvcjtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaHR0cE1ldGhvZDsiXX0=