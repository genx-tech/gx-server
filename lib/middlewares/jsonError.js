"use strict";

require("source-map-support/register");

const http = require('http');

module.exports = (opt, app) => {
  let handler;

  if (opt && opt.customHandler) {
    handler = app.getBackendAction(opt.customHandler);
  }

  return async (ctx, next) => {
    try {
      await next();

      if (ctx.status >= 400) {
        if (ctx.type === 'text/plain') {
          ctx.throw(ctx.status, ctx.body);
        } else {
          ctx.throw(ctx.status);
        }
      }
    } catch (err) {
      ctx.status = typeof err.status === 'number' && err.status >= 100 ? err.status : 500;
      ctx.type = 'application/json';
      console.log('jsonError', ctx.appModule.name);

      if (handler) {
        try {
          ctx.body = await handler(ctx, err);
          ctx.app.emit('error', err, ctx);
          return;
        } catch (error) {
          error.innerError = err;
          err = error;
        }
      }

      ctx.body = {
        error: err.expose && err.message ? err.message : http.STATUS_CODES[ctx.status]
      };
      ctx.app.emit('error', err, ctx);
    }
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlcy9qc29uRXJyb3IuanMiXSwibmFtZXMiOlsiaHR0cCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwib3B0IiwiYXBwIiwiaGFuZGxlciIsImN1c3RvbUhhbmRsZXIiLCJnZXRCYWNrZW5kQWN0aW9uIiwiY3R4IiwibmV4dCIsInN0YXR1cyIsInR5cGUiLCJ0aHJvdyIsImJvZHkiLCJlcnIiLCJjb25zb2xlIiwibG9nIiwiYXBwTW9kdWxlIiwibmFtZSIsImVtaXQiLCJlcnJvciIsImlubmVyRXJyb3IiLCJleHBvc2UiLCJtZXNzYWdlIiwiU1RBVFVTX0NPREVTIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQU9BLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixDQUFDQyxHQUFELEVBQU1DLEdBQU4sS0FBYztBQUMzQixNQUFJQyxPQUFKOztBQUVBLE1BQUlGLEdBQUcsSUFBSUEsR0FBRyxDQUFDRyxhQUFmLEVBQThCO0FBQzFCRCxJQUFBQSxPQUFPLEdBQUdELEdBQUcsQ0FBQ0csZ0JBQUosQ0FBcUJKLEdBQUcsQ0FBQ0csYUFBekIsQ0FBVjtBQUNIOztBQUVELFNBQU8sT0FBT0UsR0FBUCxFQUFZQyxJQUFaLEtBQXFCO0FBQ3hCLFFBQUk7QUFDQSxZQUFNQSxJQUFJLEVBQVY7O0FBRUEsVUFBSUQsR0FBRyxDQUFDRSxNQUFKLElBQWMsR0FBbEIsRUFBdUI7QUFDbkIsWUFBSUYsR0FBRyxDQUFDRyxJQUFKLEtBQWEsWUFBakIsRUFBK0I7QUFDM0JILFVBQUFBLEdBQUcsQ0FBQ0ksS0FBSixDQUFVSixHQUFHLENBQUNFLE1BQWQsRUFBc0JGLEdBQUcsQ0FBQ0ssSUFBMUI7QUFDSCxTQUZELE1BRU87QUFDSEwsVUFBQUEsR0FBRyxDQUFDSSxLQUFKLENBQVVKLEdBQUcsQ0FBQ0UsTUFBZDtBQUNIO0FBQ0o7QUFDSixLQVZELENBVUUsT0FBT0ksR0FBUCxFQUFZO0FBQ1ZOLE1BQUFBLEdBQUcsQ0FBQ0UsTUFBSixHQUFhLE9BQU9JLEdBQUcsQ0FBQ0osTUFBWCxLQUFzQixRQUF0QixJQUFrQ0ksR0FBRyxDQUFDSixNQUFKLElBQWMsR0FBaEQsR0FBc0RJLEdBQUcsQ0FBQ0osTUFBMUQsR0FBbUUsR0FBaEY7QUFDQUYsTUFBQUEsR0FBRyxDQUFDRyxJQUFKLEdBQVcsa0JBQVg7QUFFQUksTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksV0FBWixFQUF5QlIsR0FBRyxDQUFDUyxTQUFKLENBQWNDLElBQXZDOztBQUdBLFVBQUliLE9BQUosRUFBYTtBQUNULFlBQUk7QUFDQUcsVUFBQUEsR0FBRyxDQUFDSyxJQUFKLEdBQVcsTUFBTVIsT0FBTyxDQUFDRyxHQUFELEVBQU1NLEdBQU4sQ0FBeEI7QUFDQU4sVUFBQUEsR0FBRyxDQUFDSixHQUFKLENBQVFlLElBQVIsQ0FBYSxPQUFiLEVBQXNCTCxHQUF0QixFQUEyQk4sR0FBM0I7QUFDQTtBQUNILFNBSkQsQ0FJRSxPQUFPWSxLQUFQLEVBQWM7QUFDWkEsVUFBQUEsS0FBSyxDQUFDQyxVQUFOLEdBQW1CUCxHQUFuQjtBQUNBQSxVQUFBQSxHQUFHLEdBQUdNLEtBQU47QUFDSDtBQUNKOztBQUVEWixNQUFBQSxHQUFHLENBQUNLLElBQUosR0FBVztBQUFFTyxRQUFBQSxLQUFLLEVBQUdOLEdBQUcsQ0FBQ1EsTUFBSixJQUFjUixHQUFHLENBQUNTLE9BQW5CLEdBQThCVCxHQUFHLENBQUNTLE9BQWxDLEdBQTRDeEIsSUFBSSxDQUFDeUIsWUFBTCxDQUFrQmhCLEdBQUcsQ0FBQ0UsTUFBdEI7QUFBckQsT0FBWDtBQUNBRixNQUFBQSxHQUFHLENBQUNKLEdBQUosQ0FBUWUsSUFBUixDQUFhLE9BQWIsRUFBc0JMLEdBQXRCLEVBQTJCTixHQUEzQjtBQUNIO0FBQ0osR0FoQ0Q7QUFpQ0gsQ0F4Q0QiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBFcnJvciByZXNwb25zZSBtaWRkbGV3YXJlIHdpdGgganNvblxuICogQG1vZHVsZSBNaWRkbGV3YXJlX0pzb25FcnJvclxuICovXG5cbmNvbnN0IGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKG9wdCwgYXBwKSA9PiB7IFxuICAgIGxldCBoYW5kbGVyO1xuXG4gICAgaWYgKG9wdCAmJiBvcHQuY3VzdG9tSGFuZGxlcikge1xuICAgICAgICBoYW5kbGVyID0gYXBwLmdldEJhY2tlbmRBY3Rpb24ob3B0LmN1c3RvbUhhbmRsZXIpO1xuICAgIH1cblxuICAgIHJldHVybiBhc3luYyAoY3R4LCBuZXh0KSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBuZXh0KCk7XG5cbiAgICAgICAgICAgIGlmIChjdHguc3RhdHVzID49IDQwMCkge1xuICAgICAgICAgICAgICAgIGlmIChjdHgudHlwZSA9PT0gJ3RleHQvcGxhaW4nKSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC50aHJvdyhjdHguc3RhdHVzLCBjdHguYm9keSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnRocm93KGN0eC5zdGF0dXMpO1xuICAgICAgICAgICAgICAgIH0gIFxuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHsgICAgICAgIFxuICAgICAgICAgICAgY3R4LnN0YXR1cyA9IHR5cGVvZiBlcnIuc3RhdHVzID09PSAnbnVtYmVyJyAmJiBlcnIuc3RhdHVzID49IDEwMCA/IGVyci5zdGF0dXMgOiA1MDA7ICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBjdHgudHlwZSA9ICdhcHBsaWNhdGlvbi9qc29uJztcblxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2pzb25FcnJvcicsIGN0eC5hcHBNb2R1bGUubmFtZSk7XG5cbiAgICAgICAgICAgIC8vIGFjY2VwdGVkIHR5cGVzXG4gICAgICAgICAgICBpZiAoaGFuZGxlcikgeyAgICAgIFxuICAgICAgICAgICAgICAgIHRyeSB7ICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgY3R4LmJvZHkgPSBhd2FpdCBoYW5kbGVyKGN0eCwgZXJyKTsgICAgIFxuICAgICAgICAgICAgICAgICAgICBjdHguYXBwLmVtaXQoJ2Vycm9yJywgZXJyLCBjdHgpOyAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBlcnJvci5pbm5lckVycm9yID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICBlcnIgPSBlcnJvcjtcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSAgICAgICAgICAgICBcblxuICAgICAgICAgICAgY3R4LmJvZHkgPSB7IGVycm9yOiAoZXJyLmV4cG9zZSAmJiBlcnIubWVzc2FnZSkgPyBlcnIubWVzc2FnZSA6IGh0dHAuU1RBVFVTX0NPREVTW2N0eC5zdGF0dXNdIH07XG4gICAgICAgICAgICBjdHguYXBwLmVtaXQoJ2Vycm9yJywgZXJyLCBjdHgpO1xuICAgICAgICB9ICAgICAgICBcbiAgICB9IFxufTsgICAgICAgIl19