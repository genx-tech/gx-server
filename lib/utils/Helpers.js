"use strict";

require("source-map-support/register");

const {
  _
} = require('@genx/july');

const {
  InvalidConfiguration
} = require('@genx/error');

const Literal = require('../enum/Literal');

const httpMethod = require('./httpMethod');

exports.requireFeatures = function (features, app, middleware) {
  let hasNotEnabled = _.find(_.castArray(features), feature => !app.enabled(feature));

  if (hasNotEnabled) {
    throw new InvalidConfiguration(`Middleware "${middleware}" requires "${hasNotEnabled}" feature to be enabled.`, app, `middlewares.${middleware}`);
  }
};

exports.httpMethod = httpMethod;

exports.hasMethod = function hasMethod(obj, name) {
  const desc = Object.getOwnPropertyDescriptor(obj, name);
  let has = !!desc && typeof desc.value === 'function';
  if (has) return true;
  let proto = Object.getPrototypeOf(obj);
  if (proto === Object.prototype) return has;
  return hasMethod(proto, name);
};

exports.defaultBackendPath = process.env.NODE_RT && process.env.NODE_RT === 'babel' ? Literal.BACKEND_SRC_PATH : Literal.BACKEND_PATH;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9IZWxwZXJzLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJMaXRlcmFsIiwiaHR0cE1ldGhvZCIsImV4cG9ydHMiLCJyZXF1aXJlRmVhdHVyZXMiLCJmZWF0dXJlcyIsImFwcCIsIm1pZGRsZXdhcmUiLCJoYXNOb3RFbmFibGVkIiwiZmluZCIsImNhc3RBcnJheSIsImZlYXR1cmUiLCJlbmFibGVkIiwiaGFzTWV0aG9kIiwib2JqIiwibmFtZSIsImRlc2MiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJoYXMiLCJ2YWx1ZSIsInByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJkZWZhdWx0QmFja2VuZFBhdGgiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9SVCIsIkJBQ0tFTkRfU1JDX1BBVEgiLCJCQUNLRU5EX1BBVEgiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQVFDLE9BQU8sQ0FBQyxZQUFELENBQXJCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUEyQkQsT0FBTyxDQUFDLGFBQUQsQ0FBeEM7O0FBQ0EsTUFBTUUsT0FBTyxHQUFHRixPQUFPLENBQUMsaUJBQUQsQ0FBdkI7O0FBQ0EsTUFBTUcsVUFBVSxHQUFHSCxPQUFPLENBQUMsY0FBRCxDQUExQjs7QUFFQUksT0FBTyxDQUFDQyxlQUFSLEdBQTBCLFVBQVVDLFFBQVYsRUFBb0JDLEdBQXBCLEVBQXlCQyxVQUF6QixFQUFxQztBQUMzRCxNQUFJQyxhQUFhLEdBQUdWLENBQUMsQ0FBQ1csSUFBRixDQUFPWCxDQUFDLENBQUNZLFNBQUYsQ0FBWUwsUUFBWixDQUFQLEVBQThCTSxPQUFPLElBQUksQ0FBQ0wsR0FBRyxDQUFDTSxPQUFKLENBQVlELE9BQVosQ0FBMUMsQ0FBcEI7O0FBRUEsTUFBSUgsYUFBSixFQUFtQjtBQUNmLFVBQU0sSUFBSVIsb0JBQUosQ0FDRCxlQUFjTyxVQUFXLGVBQWNDLGFBQWMsMEJBRHBELEVBRUZGLEdBRkUsRUFHRCxlQUFjQyxVQUFXLEVBSHhCLENBQU47QUFLSDtBQUNKLENBVkQ7O0FBZUFKLE9BQU8sQ0FBQ0QsVUFBUixHQUFxQkEsVUFBckI7O0FBRUFDLE9BQU8sQ0FBQ1UsU0FBUixHQUFvQixTQUFTQSxTQUFULENBQW1CQyxHQUFuQixFQUF3QkMsSUFBeEIsRUFBOEI7QUFDOUMsUUFBTUMsSUFBSSxHQUFHQyxNQUFNLENBQUNDLHdCQUFQLENBQWdDSixHQUFoQyxFQUFxQ0MsSUFBckMsQ0FBYjtBQUNBLE1BQUlJLEdBQUcsR0FBRyxDQUFDLENBQUNILElBQUYsSUFBVSxPQUFPQSxJQUFJLENBQUNJLEtBQVosS0FBc0IsVUFBMUM7QUFDQSxNQUFJRCxHQUFKLEVBQVMsT0FBTyxJQUFQO0FBRVQsTUFBSUUsS0FBSyxHQUFHSixNQUFNLENBQUNLLGNBQVAsQ0FBc0JSLEdBQXRCLENBQVo7QUFDQSxNQUFJTyxLQUFLLEtBQUtKLE1BQU0sQ0FBQ00sU0FBckIsRUFBZ0MsT0FBT0osR0FBUDtBQUVoQyxTQUFPTixTQUFTLENBQUNRLEtBQUQsRUFBUU4sSUFBUixDQUFoQjtBQUNILENBVEQ7O0FBY0FaLE9BQU8sQ0FBQ3FCLGtCQUFSLEdBQThCQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsT0FBWixJQUF1QkYsT0FBTyxDQUFDQyxHQUFSLENBQVlDLE9BQVosS0FBd0IsT0FBaEQsR0FBMkQxQixPQUFPLENBQUMyQixnQkFBbkUsR0FBc0YzQixPQUFPLENBQUM0QixZQUEzSCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCB7IF8gfSA9IHJlcXVpcmUoJ0BnZW54L2p1bHknKTtcbmNvbnN0IHsgSW52YWxpZENvbmZpZ3VyYXRpb24gfSA9IHJlcXVpcmUoJ0BnZW54L2Vycm9yJyk7XG5jb25zdCBMaXRlcmFsID0gcmVxdWlyZSgnLi4vZW51bS9MaXRlcmFsJyk7XG5jb25zdCBodHRwTWV0aG9kID0gcmVxdWlyZSgnLi9odHRwTWV0aG9kJyk7XG5cbmV4cG9ydHMucmVxdWlyZUZlYXR1cmVzID0gZnVuY3Rpb24gKGZlYXR1cmVzLCBhcHAsIG1pZGRsZXdhcmUpIHtcbiAgICBsZXQgaGFzTm90RW5hYmxlZCA9IF8uZmluZChfLmNhc3RBcnJheShmZWF0dXJlcyksIGZlYXR1cmUgPT4gIWFwcC5lbmFibGVkKGZlYXR1cmUpKTtcblxuICAgIGlmIChoYXNOb3RFbmFibGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgIGBNaWRkbGV3YXJlIFwiJHttaWRkbGV3YXJlfVwiIHJlcXVpcmVzIFwiJHtoYXNOb3RFbmFibGVkfVwiIGZlYXR1cmUgdG8gYmUgZW5hYmxlZC5gLFxuICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgYG1pZGRsZXdhcmVzLiR7bWlkZGxld2FyZX1gXG4gICAgICAgICk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBIdHRwIG1ldGhvZCBkZWNvcmF0b3IgZm9yIG1vZHVsZSBjb250cm9sbGVyXG4gKi9cbmV4cG9ydHMuaHR0cE1ldGhvZCA9IGh0dHBNZXRob2Q7XG5cbmV4cG9ydHMuaGFzTWV0aG9kID0gZnVuY3Rpb24gaGFzTWV0aG9kKG9iaiwgbmFtZSkge1xuICAgIGNvbnN0IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgbmFtZSk7ICAgIFxuICAgIGxldCBoYXMgPSAhIWRlc2MgJiYgdHlwZW9mIGRlc2MudmFsdWUgPT09ICdmdW5jdGlvbic7XG4gICAgaWYgKGhhcykgcmV0dXJuIHRydWU7XG5cbiAgICBsZXQgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKTtcbiAgICBpZiAocHJvdG8gPT09IE9iamVjdC5wcm90b3R5cGUpIHJldHVybiBoYXM7XG5cbiAgICByZXR1cm4gaGFzTWV0aG9kKHByb3RvLCBuYW1lKTtcbn07XG5cbi8qKlxuICogd2hlbiBydW5uaW5nIHdpdGggW05PREVfUlQ9YmFiZWxdLCBkaXJlY3RseSB1c2Ugc291cmNlIGZpbGVzXG4gKi9cbmV4cG9ydHMuZGVmYXVsdEJhY2tlbmRQYXRoID0gKHByb2Nlc3MuZW52Lk5PREVfUlQgJiYgcHJvY2Vzcy5lbnYuTk9ERV9SVCA9PT0gJ2JhYmVsJykgPyBMaXRlcmFsLkJBQ0tFTkRfU1JDX1BBVEggOiBMaXRlcmFsLkJBQ0tFTkRfUEFUSDsiXX0=