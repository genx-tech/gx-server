"use strict";

require("source-map-support/register");

const {
  Errors: {
    GeneralError,
    InvalidArgument,
    InvalidConfiguration,
    ExposableError
  }
} = require('@genx/app');

const HttpCode = require('http-status-codes');

class BadRequest extends ExposableError {
  constructor(message, info) {
    super(message, info, HttpCode.BAD_REQUEST, 'E_BAD_REQUEST');
  }

}

class NotFound extends ExposableError {
  constructor(message, info) {
    super(message, info, HttpCode.NOT_FOUND, 'E_NOT_FOUND');
  }

}

class Unauthorized extends ExposableError {
  constructor(message, info) {
    super(message, info, HttpCode.UNAUTHORIZED, 'E_UNAUTHENTICATED');
  }

}

class Forbidden extends ExposableError {
  constructor(message, info) {
    super(message, info, HttpCode.FORBIDDEN, 'E_FORBIDDEN');
  }

}

class ServiceUnavailable extends GeneralError {
  constructor(message, info) {
    super(message, info, HttpCode.SERVICE_UNAVAILABLE, 'E_UNAVAILABLE');
  }

}

class ServerError extends GeneralError {
  constructor(message, info) {
    super(message, info, HttpCode.INTERNAL_SERVER_ERROR, 'E_SERVER');
  }

}

class ExternalServiceError extends GeneralError {
  constructor(message, info) {
    super(message, info, HttpCode.INTERNAL_SERVER_ERROR, 'E_EXTERNAL');
  }

}

exports.InvalidArgument = InvalidArgument;
exports.InvalidConfiguration = InvalidConfiguration;
exports.BadRequest = BadRequest;
exports.NotFound = NotFound;
exports.Unauthorized = Unauthorized;
exports.Unauthenticated = Unauthorized;
exports.Forbidden = Forbidden;
exports.ServerError = ServerError;
exports.ExternalServiceError = ExternalServiceError;
exports.ServiceUnavailable = ServiceUnavailable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9FcnJvcnMuanMiXSwibmFtZXMiOlsiRXJyb3JzIiwiR2VuZXJhbEVycm9yIiwiSW52YWxpZEFyZ3VtZW50IiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJFeHBvc2FibGVFcnJvciIsInJlcXVpcmUiLCJIdHRwQ29kZSIsIkJhZFJlcXVlc3QiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJpbmZvIiwiQkFEX1JFUVVFU1QiLCJOb3RGb3VuZCIsIk5PVF9GT1VORCIsIlVuYXV0aG9yaXplZCIsIlVOQVVUSE9SSVpFRCIsIkZvcmJpZGRlbiIsIkZPUkJJRERFTiIsIlNlcnZpY2VVbmF2YWlsYWJsZSIsIlNFUlZJQ0VfVU5BVkFJTEFCTEUiLCJTZXJ2ZXJFcnJvciIsIklOVEVSTkFMX1NFUlZFUl9FUlJPUiIsIkV4dGVybmFsU2VydmljZUVycm9yIiwiZXhwb3J0cyIsIlVuYXV0aGVudGljYXRlZCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFPQSxNQUFNO0FBQ0ZBLEVBQUFBLE1BQU0sRUFBRTtBQUFFQyxJQUFBQSxZQUFGO0FBQWdCQyxJQUFBQSxlQUFoQjtBQUFpQ0MsSUFBQUEsb0JBQWpDO0FBQXVEQyxJQUFBQTtBQUF2RDtBQUROLElBRUZDLE9BQU8sQ0FBQyxXQUFELENBRlg7O0FBSUEsTUFBTUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsbUJBQUQsQ0FBeEI7O0FBT0EsTUFBTUUsVUFBTixTQUF5QkgsY0FBekIsQ0FBd0M7QUFDcENJLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVQyxJQUFWLEVBQWdCO0FBQ3ZCLFVBQU1ELE9BQU4sRUFBZUMsSUFBZixFQUFxQkosUUFBUSxDQUFDSyxXQUE5QixFQUEyQyxlQUEzQztBQUNIOztBQUhtQzs7QUFXeEMsTUFBTUMsUUFBTixTQUF1QlIsY0FBdkIsQ0FBc0M7QUFDbENJLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVQyxJQUFWLEVBQWdCO0FBQ3ZCLFVBQU1ELE9BQU4sRUFBZUMsSUFBZixFQUFxQkosUUFBUSxDQUFDTyxTQUE5QixFQUF5QyxhQUF6QztBQUNIOztBQUhpQzs7QUFnQnRDLE1BQU1DLFlBQU4sU0FBMkJWLGNBQTNCLENBQTBDO0FBQ3RDSSxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVUMsSUFBVixFQUFnQjtBQUN2QixVQUFNRCxPQUFOLEVBQWVDLElBQWYsRUFBcUJKLFFBQVEsQ0FBQ1MsWUFBOUIsRUFBNEMsbUJBQTVDO0FBQ0g7O0FBSHFDOztBQWUxQyxNQUFNQyxTQUFOLFNBQXdCWixjQUF4QixDQUF1QztBQUNuQ0ksRUFBQUEsV0FBVyxDQUFDQyxPQUFELEVBQVVDLElBQVYsRUFBZ0I7QUFDdkIsVUFBTUQsT0FBTixFQUFlQyxJQUFmLEVBQXFCSixRQUFRLENBQUNXLFNBQTlCLEVBQXlDLGFBQXpDO0FBQ0g7O0FBSGtDOztBQVd2QyxNQUFNQyxrQkFBTixTQUFpQ2pCLFlBQWpDLENBQThDO0FBQzFDTyxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVUMsSUFBVixFQUFnQjtBQUN2QixVQUFNRCxPQUFOLEVBQWVDLElBQWYsRUFBcUJKLFFBQVEsQ0FBQ2EsbUJBQTlCLEVBQW1ELGVBQW5EO0FBQ0g7O0FBSHlDOztBQVM5QyxNQUFNQyxXQUFOLFNBQTBCbkIsWUFBMUIsQ0FBdUM7QUFDbkNPLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVQyxJQUFWLEVBQWdCO0FBQ3ZCLFVBQU1ELE9BQU4sRUFBZUMsSUFBZixFQUFxQkosUUFBUSxDQUFDZSxxQkFBOUIsRUFBcUQsVUFBckQ7QUFDSDs7QUFIa0M7O0FBUXZDLE1BQU1DLG9CQUFOLFNBQW1DckIsWUFBbkMsQ0FBZ0Q7QUFDNUNPLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVQyxJQUFWLEVBQWdCO0FBQ3ZCLFVBQU1ELE9BQU4sRUFBZUMsSUFBZixFQUFxQkosUUFBUSxDQUFDZSxxQkFBOUIsRUFBcUQsWUFBckQ7QUFDSDs7QUFIMkM7O0FBTWhERSxPQUFPLENBQUNyQixlQUFSLEdBQTBCQSxlQUExQjtBQUNBcUIsT0FBTyxDQUFDcEIsb0JBQVIsR0FBK0JBLG9CQUEvQjtBQUNBb0IsT0FBTyxDQUFDaEIsVUFBUixHQUFxQkEsVUFBckI7QUFDQWdCLE9BQU8sQ0FBQ1gsUUFBUixHQUFtQkEsUUFBbkI7QUFDQVcsT0FBTyxDQUFDVCxZQUFSLEdBQXVCQSxZQUF2QjtBQUNBUyxPQUFPLENBQUNDLGVBQVIsR0FBMEJWLFlBQTFCO0FBQ0FTLE9BQU8sQ0FBQ1AsU0FBUixHQUFvQkEsU0FBcEI7QUFDQU8sT0FBTyxDQUFDSCxXQUFSLEdBQXNCQSxXQUF0QjtBQUNBRyxPQUFPLENBQUNELG9CQUFSLEdBQStCQSxvQkFBL0I7QUFDQUMsT0FBTyxDQUFDTCxrQkFBUixHQUE2QkEsa0JBQTdCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogRXJyb3IgZGVmaW5pdGlvbnMuXG4gKiBAbW9kdWxlIEVycm9yc1xuICovXG5cbmNvbnN0IHsgXG4gICAgRXJyb3JzOiB7IEdlbmVyYWxFcnJvciwgSW52YWxpZEFyZ3VtZW50LCBJbnZhbGlkQ29uZmlndXJhdGlvbiwgRXhwb3NhYmxlRXJyb3IgfVxufSA9IHJlcXVpcmUoJ0BnZW54L2FwcCcpO1xuXG5jb25zdCBIdHRwQ29kZSA9IHJlcXVpcmUoJ2h0dHAtc3RhdHVzLWNvZGVzJyk7XG5cbi8qKlxuICogUmVxdWVzdCBlcnJvcnMuXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEV4cG9zYWJsZUVycm9yICBcbiAqL1xuY2xhc3MgQmFkUmVxdWVzdCBleHRlbmRzIEV4cG9zYWJsZUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBpbmZvKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIGluZm8sIEh0dHBDb2RlLkJBRF9SRVFVRVNULCAnRV9CQURfUkVRVUVTVCcpO1xuICAgIH1cbn0gIFxuICAgXG4vKipcbiAqIEh0dHAgTm90Rm91bmQsIDQwNC5cbiAqIEBjbGFzcyBcbiAqIEBleHRlbmRzIEV4cG9zYWJsZUVycm9yXG4gKi9cbmNsYXNzIE5vdEZvdW5kIGV4dGVuZHMgRXhwb3NhYmxlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGluZm8pIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgaW5mbywgSHR0cENvZGUuTk9UX0ZPVU5ELCAnRV9OT1RfRk9VTkQnKTtcbiAgICB9XG59ICBcblxuLyoqXG4gKiBIdHRwIFVuYXV0aG9yaXplZCwgNDAxLlxuICogQGNsYXNzIFxuICogQGV4dGVuZHMgRXhwb3NhYmxlRXJyb3JcbiAqIFxuICogNDAxIFVOQVVUSE9SSVpFRCB2cyA0MDMgRk9SQklEREVOIChyZWZlciB0byBleHBsYW5hdGlvbiBmcm9tIERhbmllbCBJcnZpbmUpXG4gKiA0MDEgSXTigJlzIGZvciBhdXRoZW50aWNhdGlvbiwgbm90IGF1dGhvcml6YXRpb24uIFxuICogUmVjZWl2aW5nIGEgNDAxIHJlc3BvbnNlIGlzIHRoZSBzZXJ2ZXIgdGVsbGluZyB5b3UsIOKAnHlvdSBhcmVu4oCZdCBhdXRoZW50aWNhdGVk4oCTZWl0aGVyIG5vdCBhdXRoZW50aWNhdGVkIGF0IGFsbCBvciBhdXRoZW50aWNhdGVkIGluY29ycmVjdGx54oCTYnV0IHBsZWFzZSByZWF1dGhlbnRpY2F0ZSBhbmQgdHJ5IGFnYWluLuKAnSBcbiAqIFRvIGhlbHAgeW91IG91dCwgaXQgd2lsbCBhbHdheXMgaW5jbHVkZSBhIFdXVy1BdXRoZW50aWNhdGUgaGVhZGVyIHRoYXQgZGVzY3JpYmVzIGhvdyB0byBhdXRoZW50aWNhdGUuXG4gKi9cbmNsYXNzIFVuYXV0aG9yaXplZCBleHRlbmRzIEV4cG9zYWJsZUVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBpbmZvKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIGluZm8sIEh0dHBDb2RlLlVOQVVUSE9SSVpFRCwgJ0VfVU5BVVRIRU5USUNBVEVEJyk7XG4gICAgfSBcbn0gXG5cbi8qKlxuICogSHR0cCBGb3JiaWRkZW4sIDQwMy5cbiAqIEBjbGFzcyBcbiAqIEBleHRlbmRzIEV4cG9zYWJsZUVycm9yXG4gKiBcbiAqIDQwMSBVTkFVVEhPUklaRUQgdnMgNDAzIEZPUkJJRERFTiAocmVmZXIgdG8gZXhwbGFuYXRpb24gZnJvbSBEYW5pZWwgSXJ2aW5lKVxuICogUmVjZWl2aW5nIGEgNDAzIHJlc3BvbnNlIGlzIHRoZSBzZXJ2ZXIgdGVsbGluZyB5b3UsIOKAnEnigJltIHNvcnJ5LiBJIGtub3cgd2hvIHlvdSBhcmXigJNJIGJlbGlldmUgd2hvIHlvdSBzYXkgeW91IGFyZeKAk2J1dCB5b3UganVzdCBkb27igJl0IGhhdmUgcGVybWlzc2lvbiB0byBhY2Nlc3MgdGhpcyByZXNvdXJjZS4gTWF5YmUgaWYgeW91IGFzayB0aGUgc3lzdGVtIGFkbWluaXN0cmF0b3IgbmljZWx5LCB5b3XigJlsbCBnZXQgcGVybWlzc2lvbi4gQnV0IHBsZWFzZSBkb27igJl0IGJvdGhlciBtZSBhZ2FpbiB1bnRpbCB5b3VyIHByZWRpY2FtZW50IGNoYW5nZXMu4oCdXG4gKiBJbiBzdW1tYXJ5LCBhIDQwMSBVbmF1dGhvcml6ZWQgcmVzcG9uc2Ugc2hvdWxkIGJlIHVzZWQgZm9yIG1pc3Npbmcgb3IgYmFkIGF1dGhlbnRpY2F0aW9uLCBhbmQgYSA0MDMgRm9yYmlkZGVuIHJlc3BvbnNlIHNob3VsZCBiZSB1c2VkIGFmdGVyd2FyZHMsIHdoZW4gdGhlIHVzZXIgaXMgYXV0aGVudGljYXRlZCBidXQgaXNu4oCZdCBhdXRob3JpemVkIHRvIHBlcmZvcm0gdGhlIHJlcXVlc3RlZCBvcGVyYXRpb24gb24gdGhlIGdpdmVuIHJlc291cmNlLlxuICovXG5jbGFzcyBGb3JiaWRkZW4gZXh0ZW5kcyBFeHBvc2FibGVFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgaW5mbykge1xuICAgICAgICBzdXBlcihtZXNzYWdlLCBpbmZvLCBIdHRwQ29kZS5GT1JCSURERU4sICdFX0ZPUkJJRERFTicpO1xuICAgIH0gXG59IFxuXG4vKipcbiAqIFNlcnZpY2UgdW5hdmFpbGFibGUgZXJyb3IsIDUwM1xuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBHZW5lcmFsRXJyb3IgIFxuICovXG5jbGFzcyBTZXJ2aWNlVW5hdmFpbGFibGUgZXh0ZW5kcyBHZW5lcmFsRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGluZm8pIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgaW5mbywgSHR0cENvZGUuU0VSVklDRV9VTkFWQUlMQUJMRSwgJ0VfVU5BVkFJTEFCTEUnKTtcbiAgICB9XG59XG5cbi8qKlxuICogSW50ZXJuYWwgc2VydmVyIGVycm9yLCA1MDBcbiAqL1xuY2xhc3MgU2VydmVyRXJyb3IgZXh0ZW5kcyBHZW5lcmFsRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGluZm8pIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgaW5mbywgSHR0cENvZGUuSU5URVJOQUxfU0VSVkVSX0VSUk9SLCAnRV9TRVJWRVInKTtcbiAgICB9XG59XG4vKipcbiAqIEludGVybmFsIHNlcnZlciBlcnJvciwgNTAwXG4gKi9cbmNsYXNzIEV4dGVybmFsU2VydmljZUVycm9yIGV4dGVuZHMgR2VuZXJhbEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBpbmZvKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIGluZm8sIEh0dHBDb2RlLklOVEVSTkFMX1NFUlZFUl9FUlJPUiwgJ0VfRVhURVJOQUwnKTtcbiAgICB9XG59XG5cbmV4cG9ydHMuSW52YWxpZEFyZ3VtZW50ID0gSW52YWxpZEFyZ3VtZW50O1xuZXhwb3J0cy5JbnZhbGlkQ29uZmlndXJhdGlvbiA9IEludmFsaWRDb25maWd1cmF0aW9uO1xuZXhwb3J0cy5CYWRSZXF1ZXN0ID0gQmFkUmVxdWVzdDtcbmV4cG9ydHMuTm90Rm91bmQgPSBOb3RGb3VuZDtcbmV4cG9ydHMuVW5hdXRob3JpemVkID0gVW5hdXRob3JpemVkOyBcbmV4cG9ydHMuVW5hdXRoZW50aWNhdGVkID0gVW5hdXRob3JpemVkOyAvLyB0cnkgdXNlIFVuYXV0aGVudGljYXRlZCBpbnN0ZWFkIG9mIFVuYXV0aG9yaXplZCBmb3IgYmV0dGVyIGV4cHJlc3NpbmcgdGhlIGVycm9yIGluIGNvZGVcbmV4cG9ydHMuRm9yYmlkZGVuID0gRm9yYmlkZGVuO1xuZXhwb3J0cy5TZXJ2ZXJFcnJvciA9IFNlcnZlckVycm9yO1xuZXhwb3J0cy5FeHRlcm5hbFNlcnZpY2VFcnJvciA9IEV4dGVybmFsU2VydmljZUVycm9yO1xuZXhwb3J0cy5TZXJ2aWNlVW5hdmFpbGFibGUgPSBTZXJ2aWNlVW5hdmFpbGFibGU7Il19