{"version":3,"file":"accessLog.js","names":["require","InvalidConfiguration","requireFeatures","HttpStatus","module","exports","opt","app","logger","getService","ctx","next","startAt","now","info","ip","method","url","originalUrl","httpVersion","req","protocol","toUpperCase","status","size","length","referer","header","userAgent","isoTimestamp","toISO","duration","diff","milliseconds","level","log","getStatusText"],"sources":["../../src/middlewares/accessLog.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Add access log for every http request\n * @module Middleware_AccessLog\n */\n\nconst { InvalidConfiguration } = require('@genx/error');\nconst { requireFeatures } = require('../utils/Helpers');\nconst HttpStatus = require('http-status-codes');\n\nmodule.exports = (opt, app) => {        \n    requireFeatures([ 'timezone', 'loggers' ], app, 'accessLog');    \n\n    if (!opt.logger) {\n        throw new InvalidConfiguration('Missing logger id.', app, 'middlewares.accessLog.logger');\n    }\n\n    let logger = app.getService('logger.' + opt.logger);\n    if (!logger) {\n        throw new InvalidConfiguration('Logger not found. Id: ' + opt.logger, app, 'middlewares.accessLog.logger');\n    }\n\n    return async (ctx, next) => {\n        let startAt = app.now();       \n\n        await next();        \n\n        let info = {\n            ip: ctx.ip, // should use ip middleware to extract the real ip behind lb\n            method: ctx.method,\n            url: ctx.url,\n            originalUrl: ctx.originalUrl,           \n            httpVersion: ctx.req.httpVersion,        \n            protocol: ctx.protocol.toUpperCase(),\n            status: ctx.status,\n            size: ctx.length || '-',\n            referer: ctx.header['referer'] || '-',\n            userAgent: ctx.header['user-agent'] || '-',\n            isoTimestamp: startAt.toISO(),        \n            duration: app.now().diff(startAt).milliseconds\n        };\n\n        let level = 'info';\n\n        if (ctx.status >= 500) {\n            level = 'error';\n        } else if (ctx.status >= 400) {\n            level = 'warn';\n        }\n        \n        logger.log(level, HttpStatus.getStatusText(ctx.status), info);\n    };\n};"],"mappings":"AAAA,YAAY;AAACA,OAAA;AAOb,MAAM;EAAEC;AAAqB,CAAC,GAAGD,OAAO,CAAC,aAAa,CAAC;AACvD,MAAM;EAAEE;AAAgB,CAAC,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AACvD,MAAMG,UAAU,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AAE/CI,MAAM,CAACC,OAAO,GAAG,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC3BL,eAAe,CAAC,CAAE,UAAU,EAAE,SAAS,CAAE,EAAEK,GAAG,EAAE,WAAW,CAAC;EAE5D,IAAI,CAACD,GAAG,CAACE,MAAM,EAAE;IACb,MAAM,IAAIP,oBAAoB,CAAC,oBAAoB,EAAEM,GAAG,EAAE,8BAA8B,CAAC;EAC7F;EAEA,IAAIC,MAAM,GAAGD,GAAG,CAACE,UAAU,CAAC,SAAS,GAAGH,GAAG,CAACE,MAAM,CAAC;EACnD,IAAI,CAACA,MAAM,EAAE;IACT,MAAM,IAAIP,oBAAoB,CAAC,wBAAwB,GAAGK,GAAG,CAACE,MAAM,EAAED,GAAG,EAAE,8BAA8B,CAAC;EAC9G;EAEA,OAAO,OAAOG,GAAG,EAAEC,IAAI,KAAK;IACxB,IAAIC,OAAO,GAAGL,GAAG,CAACM,GAAG,CAAC,CAAC;IAEvB,MAAMF,IAAI,CAAC,CAAC;IAEZ,IAAIG,IAAI,GAAG;MACPC,EAAE,EAAEL,GAAG,CAACK,EAAE;MACVC,MAAM,EAAEN,GAAG,CAACM,MAAM;MAClBC,GAAG,EAAEP,GAAG,CAACO,GAAG;MACZC,WAAW,EAAER,GAAG,CAACQ,WAAW;MAC5BC,WAAW,EAAET,GAAG,CAACU,GAAG,CAACD,WAAW;MAChCE,QAAQ,EAAEX,GAAG,CAACW,QAAQ,CAACC,WAAW,CAAC,CAAC;MACpCC,MAAM,EAAEb,GAAG,CAACa,MAAM;MAClBC,IAAI,EAAEd,GAAG,CAACe,MAAM,IAAI,GAAG;MACvBC,OAAO,EAAEhB,GAAG,CAACiB,MAAM,CAAC,SAAS,CAAC,IAAI,GAAG;MACrCC,SAAS,EAAElB,GAAG,CAACiB,MAAM,CAAC,YAAY,CAAC,IAAI,GAAG;MAC1CE,YAAY,EAAEjB,OAAO,CAACkB,KAAK,CAAC,CAAC;MAC7BC,QAAQ,EAAExB,GAAG,CAACM,GAAG,CAAC,CAAC,CAACmB,IAAI,CAACpB,OAAO,CAAC,CAACqB;IACtC,CAAC;IAED,IAAIC,KAAK,GAAG,MAAM;IAElB,IAAIxB,GAAG,CAACa,MAAM,IAAI,GAAG,EAAE;MACnBW,KAAK,GAAG,OAAO;IACnB,CAAC,MAAM,IAAIxB,GAAG,CAACa,MAAM,IAAI,GAAG,EAAE;MAC1BW,KAAK,GAAG,MAAM;IAClB;IAEA1B,MAAM,CAAC2B,GAAG,CAACD,KAAK,EAAE/B,UAAU,CAACiC,aAAa,CAAC1B,GAAG,CAACa,MAAM,CAAC,EAAET,IAAI,CAAC;EACjE,CAAC;AACL,CAAC"}