"use strict";

require("source-map-support/register");

const {
  _,
  text
} = require("@genx/july");

const Router = require("@koa/router");

const {
  InvalidConfiguration
} = require("@genx/error");

const Literal = require("../enum/Literal");

function load_(app, baseRoute, options) {
  let router = baseRoute === "/" ? new Router() : new Router({
    prefix: text.dropIfEndsWith(baseRoute, "/")
  });

  if (options.middlewares) {
    app.useMiddlewares(router, options.middlewares);
  }

  _.forOwn(options.rules || {}, (methods, subRoute) => {
    let pos = subRoute.indexOf(":/");

    if (pos !== -1) {
      if (pos === 0) {
        throw new InvalidConfiguration("Invalid route rule syntax: " + subRoute, app, `routing[${baseRoute}].rule.rules`);
      }

      let embeddedMethod = subRoute.substr(0, pos).toLocaleLowerCase();
      subRoute = subRoute.substr(pos + 2);
      methods = {
        [embeddedMethod]: methods
      };
    }

    subRoute = text.ensureStartsWith(subRoute, "/");

    if (typeof methods === "string" || Array.isArray(methods)) {
      methods = {
        get: methods
      };
    }

    _.forOwn(methods, (middlewares, method) => {
      if (!Literal.ALLOWED_HTTP_METHODS.has(method) && method !== "all") {
        throw new InvalidConfiguration("Unsupported http method: " + method, app, `routing[${baseRoute}].rule.rules[${subRoute}]`);
      }

      app.addRoute(router, method, subRoute, middlewares);
    });
  });

  app.addRouter(router);
}

module.exports = load_;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yb3V0ZXJzL3J1bGUuanMiXSwibmFtZXMiOlsiXyIsInRleHQiLCJyZXF1aXJlIiwiUm91dGVyIiwiSW52YWxpZENvbmZpZ3VyYXRpb24iLCJMaXRlcmFsIiwibG9hZF8iLCJhcHAiLCJiYXNlUm91dGUiLCJvcHRpb25zIiwicm91dGVyIiwicHJlZml4IiwiZHJvcElmRW5kc1dpdGgiLCJtaWRkbGV3YXJlcyIsInVzZU1pZGRsZXdhcmVzIiwiZm9yT3duIiwicnVsZXMiLCJtZXRob2RzIiwic3ViUm91dGUiLCJwb3MiLCJpbmRleE9mIiwiZW1iZWRkZWRNZXRob2QiLCJzdWJzdHIiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsImVuc3VyZVN0YXJ0c1dpdGgiLCJBcnJheSIsImlzQXJyYXkiLCJnZXQiLCJtZXRob2QiLCJBTExPV0VEX0hUVFBfTUVUSE9EUyIsImhhcyIsImFkZFJvdXRlIiwiYWRkUm91dGVyIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNO0FBQUVBLEVBQUFBLENBQUY7QUFBS0MsRUFBQUE7QUFBTCxJQUFjQyxPQUFPLENBQUMsWUFBRCxDQUEzQjs7QUFDQSxNQUFNQyxNQUFNLEdBQUdELE9BQU8sQ0FBQyxhQUFELENBQXRCOztBQUNBLE1BQU07QUFBRUUsRUFBQUE7QUFBRixJQUEyQkYsT0FBTyxDQUFDLGFBQUQsQ0FBeEM7O0FBQ0EsTUFBTUcsT0FBTyxHQUFHSCxPQUFPLENBQUMsaUJBQUQsQ0FBdkI7O0FBMkNBLFNBQVNJLEtBQVQsQ0FBZUMsR0FBZixFQUFvQkMsU0FBcEIsRUFBK0JDLE9BQS9CLEVBQXdDO0FBQ3BDLE1BQUlDLE1BQU0sR0FBR0YsU0FBUyxLQUFLLEdBQWQsR0FBb0IsSUFBSUwsTUFBSixFQUFwQixHQUFtQyxJQUFJQSxNQUFKLENBQVc7QUFBRVEsSUFBQUEsTUFBTSxFQUFFVixJQUFJLENBQUNXLGNBQUwsQ0FBb0JKLFNBQXBCLEVBQStCLEdBQS9CO0FBQVYsR0FBWCxDQUFoRDs7QUFFQSxNQUFJQyxPQUFPLENBQUNJLFdBQVosRUFBeUI7QUFDckJOLElBQUFBLEdBQUcsQ0FBQ08sY0FBSixDQUFtQkosTUFBbkIsRUFBMkJELE9BQU8sQ0FBQ0ksV0FBbkM7QUFDSDs7QUFFRGIsRUFBQUEsQ0FBQyxDQUFDZSxNQUFGLENBQVNOLE9BQU8sQ0FBQ08sS0FBUixJQUFpQixFQUExQixFQUE4QixDQUFDQyxPQUFELEVBQVVDLFFBQVYsS0FBdUI7QUFDakQsUUFBSUMsR0FBRyxHQUFHRCxRQUFRLENBQUNFLE9BQVQsQ0FBaUIsSUFBakIsQ0FBVjs7QUFFQSxRQUFJRCxHQUFHLEtBQUssQ0FBQyxDQUFiLEVBQWdCO0FBQ1osVUFBSUEsR0FBRyxLQUFLLENBQVosRUFBZTtBQUNYLGNBQU0sSUFBSWYsb0JBQUosQ0FDRixnQ0FBZ0NjLFFBRDlCLEVBRUZYLEdBRkUsRUFHRCxXQUFVQyxTQUFVLGNBSG5CLENBQU47QUFLSDs7QUFJRCxVQUFJYSxjQUFjLEdBQUdILFFBQVEsQ0FBQ0ksTUFBVCxDQUFnQixDQUFoQixFQUFtQkgsR0FBbkIsRUFBd0JJLGlCQUF4QixFQUFyQjtBQUNBTCxNQUFBQSxRQUFRLEdBQUdBLFFBQVEsQ0FBQ0ksTUFBVCxDQUFnQkgsR0FBRyxHQUFHLENBQXRCLENBQVg7QUFFQUYsTUFBQUEsT0FBTyxHQUFHO0FBQUUsU0FBQ0ksY0FBRCxHQUFrQko7QUFBcEIsT0FBVjtBQUNIOztBQUVEQyxJQUFBQSxRQUFRLEdBQUdqQixJQUFJLENBQUN1QixnQkFBTCxDQUFzQk4sUUFBdEIsRUFBZ0MsR0FBaEMsQ0FBWDs7QUFFQSxRQUFJLE9BQU9ELE9BQVAsS0FBbUIsUUFBbkIsSUFBK0JRLEtBQUssQ0FBQ0MsT0FBTixDQUFjVCxPQUFkLENBQW5DLEVBQTJEO0FBQ3ZEQSxNQUFBQSxPQUFPLEdBQUc7QUFBRVUsUUFBQUEsR0FBRyxFQUFFVjtBQUFQLE9BQVY7QUFDSDs7QUFFRGpCLElBQUFBLENBQUMsQ0FBQ2UsTUFBRixDQUFTRSxPQUFULEVBQWtCLENBQUNKLFdBQUQsRUFBY2UsTUFBZCxLQUF5QjtBQUN2QyxVQUFJLENBQUN2QixPQUFPLENBQUN3QixvQkFBUixDQUE2QkMsR0FBN0IsQ0FBaUNGLE1BQWpDLENBQUQsSUFBNkNBLE1BQU0sS0FBSyxLQUE1RCxFQUFtRTtBQUMvRCxjQUFNLElBQUl4QixvQkFBSixDQUNGLDhCQUE4QndCLE1BRDVCLEVBRUZyQixHQUZFLEVBR0QsV0FBVUMsU0FBVSxnQkFBZVUsUUFBUyxHQUgzQyxDQUFOO0FBS0g7O0FBRURYLE1BQUFBLEdBQUcsQ0FBQ3dCLFFBQUosQ0FBYXJCLE1BQWIsRUFBcUJrQixNQUFyQixFQUE2QlYsUUFBN0IsRUFBdUNMLFdBQXZDO0FBQ0gsS0FWRDtBQVdILEdBckNEOztBQXVDQU4sRUFBQUEsR0FBRyxDQUFDeUIsU0FBSixDQUFjdEIsTUFBZDtBQUNIOztBQUVEdUIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCNUIsS0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgeyBfLCB0ZXh0IH0gPSByZXF1aXJlKFwiQGdlbngvanVseVwiKTtcbmNvbnN0IFJvdXRlciA9IHJlcXVpcmUoXCJAa29hL3JvdXRlclwiKTtcbmNvbnN0IHsgSW52YWxpZENvbmZpZ3VyYXRpb24gfSA9IHJlcXVpcmUoXCJAZ2VueC9lcnJvclwiKTtcbmNvbnN0IExpdGVyYWwgPSByZXF1aXJlKFwiLi4vZW51bS9MaXRlcmFsXCIpO1xuXG4vKipcbiAqIFJ1bGUgYmFzZWQgcm91dGVyLlxuICogQG1vZHVsZSBSb3V0ZXJfUnVsZVxuICovXG5cbi8qKlxuICogQ3JlYXRlIGEgcnVsZS1iYXNlZCByb3V0ZXIuXG4gKiBAcGFyYW0ge1dlYk1vZHVsZX0gYXBwXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVJvdXRlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQGV4YW1wbGVcbiAqICc8YmFzZSBwYXRoPic6IHtcbiAqICAgICBydWxlOiB7XG4gKiAgICAgICAgIG1pZGRsZXdhcmVzOlxuICogICAgICAgICBydWxlczoge1xuICogICAgICAgICAgICAgLy8gdHlwZSAxLCBkZWZhdWx0IGlzIFwiZ2V0XCIsIG1ldGhvZHMgbWFwcGVkIHRvIG9uZSBhY3Rpb25cbiAqICAgICAgICAgICAgICc8c3ViIHJvdXRlPic6ICc8Y29udHJvbGxlciB3aXRoIHJlbGF0aXZlIHBhdGg+LjxhY3Rpb24+JyxcbiAqXG4gKiAgICAgICAgICAgICAvLyB0eXBlIDIsIGRpZmZlcmVudCBtZXRob2RzIG1hcHBlZCB0byBkaWZmZXJlbnQgbWV0aG9kXG4gKiAgICAgICAgICAgICAnPHN1YiByb3V0ZT4nOiB7XG4gKiAgICAgICAgICAgICAgICAnPG1ldGhvZD4nOiAnPGNvbnRyb2xsZXIgd2l0aCByZWxhdGl2ZSBwYXRoPi48YWN0aW9uPidcbiAqICAgICAgICAgICAgIH0sXG4gKlxuICogICAgICAgICAgICAgLy8gdHlwZSAzLCB3aXRoIG1pZGRsZXdhcmVcbiAqICAgICAgICAgICAgICc8c3ViIHJvdXRlPic6IHtcbiAqICAgICAgICAgICAgICAgICAnPG1ldGhvZD4nOiB7XG4gKiAgICAgICAgICAgICAgICAgICAgJzxtaWRkbGV3YXJlIG5hbWU+JzogeyAvL21pZGRsZXdhcmUgb3B0aW9ucyB9XG4gKiAgICAgICAgICAgICAgICAgfVxuICogICAgICAgICAgICAgfSxcbiAqXG4gKiAgICAgICAgICAgICAvLyB0eXBlIDQsIGFsbCBtZXRob2RzIG1hcHBlZCB0byBvbmUgYWN0aW9uXG4gKiAgICAgICAgICAgICAnPG1ldGhvZD46LzxzdWIgcm91dGU+JzogJzxjb250cm9sbGVyIHdpdGggcmVsYXRpdmUgcGF0aD4uPGFjdGlvbj4nXG4gKlxuICogICAgICAgICAgICAgLy8gdHlwZSA1LCBhbGwgbWV0aG9kcyBtYXBwZWQgdG8gb25lIGFjdGlvblxuICogICAgICAgICAgICAgJzxtZXRob2Q+Oi88c3ViIHJvdXRlPic6IHtcbiAqICAgICAgICAgICAgICAgICAnPG1pZGRsZXdhcmUgbmFtZT4nOiB7IC8vbWlkZGxld2FyZSBvcHRpb25zIH1cbiAqICAgICAgICAgICAgIH1cbiAqICAgICAgICAgfVxuICogICAgIH1cbiAqIH1cbiAqL1xuZnVuY3Rpb24gbG9hZF8oYXBwLCBiYXNlUm91dGUsIG9wdGlvbnMpIHtcbiAgICBsZXQgcm91dGVyID0gYmFzZVJvdXRlID09PSBcIi9cIiA/IG5ldyBSb3V0ZXIoKSA6IG5ldyBSb3V0ZXIoeyBwcmVmaXg6IHRleHQuZHJvcElmRW5kc1dpdGgoYmFzZVJvdXRlLCBcIi9cIikgfSk7XG5cbiAgICBpZiAob3B0aW9ucy5taWRkbGV3YXJlcykge1xuICAgICAgICBhcHAudXNlTWlkZGxld2FyZXMocm91dGVyLCBvcHRpb25zLm1pZGRsZXdhcmVzKTtcbiAgICB9XG5cbiAgICBfLmZvck93bihvcHRpb25zLnJ1bGVzIHx8IHt9LCAobWV0aG9kcywgc3ViUm91dGUpID0+IHtcbiAgICAgICAgbGV0IHBvcyA9IHN1YlJvdXRlLmluZGV4T2YoXCI6L1wiKTtcblxuICAgICAgICBpZiAocG9zICE9PSAtMSkge1xuICAgICAgICAgICAgaWYgKHBvcyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQ29uZmlndXJhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgXCJJbnZhbGlkIHJvdXRlIHJ1bGUgc3ludGF4OiBcIiArIHN1YlJvdXRlLFxuICAgICAgICAgICAgICAgICAgICBhcHAsXG4gICAgICAgICAgICAgICAgICAgIGByb3V0aW5nWyR7YmFzZVJvdXRlfV0ucnVsZS5ydWxlc2BcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBsaWtlIGdldDovLCBvciBwb3N0Oi9cblxuICAgICAgICAgICAgbGV0IGVtYmVkZGVkTWV0aG9kID0gc3ViUm91dGUuc3Vic3RyKDAsIHBvcykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHN1YlJvdXRlID0gc3ViUm91dGUuc3Vic3RyKHBvcyArIDIpO1xuXG4gICAgICAgICAgICBtZXRob2RzID0geyBbZW1iZWRkZWRNZXRob2RdOiBtZXRob2RzIH07XG4gICAgICAgIH1cblxuICAgICAgICBzdWJSb3V0ZSA9IHRleHQuZW5zdXJlU3RhcnRzV2l0aChzdWJSb3V0ZSwgXCIvXCIpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgbWV0aG9kcyA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KG1ldGhvZHMpKSB7XG4gICAgICAgICAgICBtZXRob2RzID0geyBnZXQ6IG1ldGhvZHMgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uZm9yT3duKG1ldGhvZHMsIChtaWRkbGV3YXJlcywgbWV0aG9kKSA9PiB7XG4gICAgICAgICAgICBpZiAoIUxpdGVyYWwuQUxMT1dFRF9IVFRQX01FVEhPRFMuaGFzKG1ldGhvZCkgJiYgbWV0aG9kICE9PSBcImFsbFwiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRDb25maWd1cmF0aW9uKFxuICAgICAgICAgICAgICAgICAgICBcIlVuc3VwcG9ydGVkIGh0dHAgbWV0aG9kOiBcIiArIG1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgICAgICAgICBgcm91dGluZ1ske2Jhc2VSb3V0ZX1dLnJ1bGUucnVsZXNbJHtzdWJSb3V0ZX1dYFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFwcC5hZGRSb3V0ZShyb3V0ZXIsIG1ldGhvZCwgc3ViUm91dGUsIG1pZGRsZXdhcmVzKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBhcHAuYWRkUm91dGVyKHJvdXRlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbG9hZF87XG4iXX0=