{"version":3,"file":"acl.js","names":["require","_","eachAsync_","Feature","Enums","InvalidConfiguration","module","exports","type","PLUGIN","load_","app","config","Acl","tryRequire","backend","backendType","backendStore","indexOf","memoryBackend","dataSource","mongodb","getService","mongodbBackend","connect_","prefix","Error","acl"],"sources":["../../src/features/acl.js"],"sourcesContent":["\"use strict\";\n\n/**\n * Enable acl feature\n * @module Feature_Acl\n */\n\nconst { _, eachAsync_ } = require('@genx/july');\nconst { Feature } = require('..').Enums;\nconst { InvalidConfiguration } = require('@genx/error');\n\nmodule.exports = {\n\n    /**\n     * This feature is loaded at service stage\n     * @member {string}\n     */\n    type: Feature.PLUGIN,\n\n    /**\n     * Load the feature\n     * @param {Routable} app - The app module object\n     * @param {object} config - Acl settings\n     * @property {string} config.backend - Backend store type of acl, memory, mongodb, redis\n     * @property {string} [config.dataSource] - Store type of acl\n     * @property {object} [config.prefix] - Store options\n     * @returns {Promise.<*>}\n     * \n     * @example\n     * \n     * acl: {\n     *   backend: 'mongodb.dataSourceName'\n     * }\n     */\n    load_: async function (app, config) {\n        const Acl = app.tryRequire('acl');\n        let backend = config.backend || 'memory';\n        let backendType, backendStore;\n\n        if (backend.indexOf('.') > 0) {\n            backendType = '';\n        }\n\n        switch (backend) {\n            case 'memory':\n            backendStore = new Acl.memoryBackend();\n            break;\n\n            case 'mongodb':\n            if (!config.dataSource) {\n                throw new InvalidConfiguration('\"dataSource\" is required for mongodb backend of acl.', app, 'acl.dataSource');\n            }\n\n            let mongodb = app.getService(config.dataSource);\n            if (!mongodb) {\n                throw new InvalidConfiguration(`Data source \"${config.dataSource}\" not found.`, app, 'acl.dataSource');\n            }\n\n            backendStore = new Acl.mongodbBackend(await mongodb.connect_(), config.prefix);\n            break;\n\n            case 'redis':\n            throw new Error('to be implemented');\n            break;\n\n            default:\n            throw new InvalidConfiguration('Unsupported acl backend: ' + backend, app, 'acl.backend');\n        }        \n    \n        app.acl = new Acl(backendStore);       \n    }\n};"],"mappings":"AAAA,YAAY;AAACA,OAAA;AAOb,MAAM;EAAEC,CAAC;EAAEC;AAAW,CAAC,GAAGF,OAAO,CAAC,YAAY,CAAC;AAC/C,MAAM;EAAEG;AAAQ,CAAC,GAAGH,OAAO,CAAC,IAAI,CAAC,CAACI,KAAK;AACvC,MAAM;EAAEC;AAAqB,CAAC,GAAGL,OAAO,CAAC,aAAa,CAAC;AAEvDM,MAAM,CAACC,OAAO,GAAG;EAMbC,IAAI,EAAEL,OAAO,CAACM,MAAM;EAiBpBC,KAAK,EAAE,eAAAA,CAAgBC,GAAG,EAAEC,MAAM,EAAE;IAChC,MAAMC,GAAG,GAAGF,GAAG,CAACG,UAAU,CAAC,KAAK,CAAC;IACjC,IAAIC,OAAO,GAAGH,MAAM,CAACG,OAAO,IAAI,QAAQ;IACxC,IAAIC,WAAW,EAAEC,YAAY;IAE7B,IAAIF,OAAO,CAACG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;MAC1BF,WAAW,GAAG,EAAE;IACpB;IAEA,QAAQD,OAAO;MACX,KAAK,QAAQ;QACbE,YAAY,GAAG,IAAIJ,GAAG,CAACM,aAAa,CAAC,CAAC;QACtC;MAEA,KAAK,SAAS;QACd,IAAI,CAACP,MAAM,CAACQ,UAAU,EAAE;UACpB,MAAM,IAAIf,oBAAoB,CAAC,sDAAsD,EAAEM,GAAG,EAAE,gBAAgB,CAAC;QACjH;QAEA,IAAIU,OAAO,GAAGV,GAAG,CAACW,UAAU,CAACV,MAAM,CAACQ,UAAU,CAAC;QAC/C,IAAI,CAACC,OAAO,EAAE;UACV,MAAM,IAAIhB,oBAAoB,CAAE,gBAAeO,MAAM,CAACQ,UAAW,cAAa,EAAET,GAAG,EAAE,gBAAgB,CAAC;QAC1G;QAEAM,YAAY,GAAG,IAAIJ,GAAG,CAACU,cAAc,CAAC,MAAMF,OAAO,CAACG,QAAQ,CAAC,CAAC,EAAEZ,MAAM,CAACa,MAAM,CAAC;QAC9E;MAEA,KAAK,OAAO;QACZ,MAAM,IAAIC,KAAK,CAAC,mBAAmB,CAAC;QACpC;MAEA;QACA,MAAM,IAAIrB,oBAAoB,CAAC,2BAA2B,GAAGU,OAAO,EAAEJ,GAAG,EAAE,aAAa,CAAC;IAC7F;IAEAA,GAAG,CAACgB,GAAG,GAAG,IAAId,GAAG,CAACI,YAAY,CAAC;EACnC;AACJ,CAAC"}