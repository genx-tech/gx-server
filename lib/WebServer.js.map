{"version":3,"sources":["../src/WebServer.js"],"names":["path","require","_","eachAsync_","Runable","ServiceContainer","Routable","Literal","defaultBackendPath","WebServer","constructor","name","options","isPlainObject","undefined","Object","assign","configName","SERVER_CFG_NAME","server","isServer","backendPath","toAbsolutePath","appModulesPath","APP_MODULES_PATH","route","on","loadMiddlewaresFrom","resolve","__dirname","MIDDLEWARES_PATH","stop_","started","appModules","app","appModulesByAlias","httpServer","Promise","reject","close","err","log","mountApp","assert","hasOwnProperty","mountRouter","router","existingApp","getAppByRoute","p","getAppByAlias","a","requireFromApp","appName","relativePath","getService","pos","indexOf","modAlias","substr","_getFeatureFallbackPath","pathArray","splice","FEATURES_PATH","APP_FEATURES_PATH","SERVER_FEATURES_PATH","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst path = require('path');\nconst { _, eachAsync_ } = require('@genx/july');\nconst { Runable, ServiceContainer } = require('@genx/app');\nconst Routable = require('./Routable');\nconst Literal = require('./enum/Literal');\nconst { defaultBackendPath } = require('./utils/Helpers');\n\n/**\n * Web server class.\n * @class\n * @extends Routable(App)\n */\nclass WebServer extends Routable(Runable(ServiceContainer)) {\n    /**          \n     * @param {string} [name='server'] - The name of the server.     \n     * @param {object} [options] - The app module's extra options defined in its parent's configuration.\n     * @property {object} [options.logger] - Logger options\n     * @property {bool} [options.verbose=false] - Flag to output trivial information for diagnostics\n     * @property {string} [options.env] - Environment, default to process.env.NODE_ENV\n     * @property {string} [options.workingPath] - App's working path, default to process.cwd()\n     * @property {string} [options.configPath] - App's config path, default to \"conf\" under workingPath   \n     * @property {string} [options.configName] - App's config basename, default to \"app\"\n     * @property {string} [options.backendPath='server'] - Relative path of back-end server source files\n     * @property {string} [options.clientPath='client'] - Relative path of front-end client source files     \n     * @property {string} [options.publicPath='public'] - Relative path of front-end static files    \n     * @property {string} [options.appModulesPath=app_modules] - Relative path of child modules                    \n     */\n    constructor(name, options) {\n        if (typeof options === 'undefined' && _.isPlainObject(name)) {\n            options = name;\n            name = undefined;\n        }        \n\n        super(name || 'server', Object.assign({ configName: Literal.SERVER_CFG_NAME }, options));    \n\n        /**\n         * Hosting server.\n         * @member {WebServer}\n         **/\n        this.server = this;\n\n        /**\n         * Whether it is a server.\n         * @member {boolean}\n         **/\n        this.isServer = true;\n\n        /**\n         * Backend files path.\n         * @member {string}         \n         **/\n        this.backendPath = this.toAbsolutePath(this.options.backendPath || defaultBackendPath); \n\n        /**\n         * App modules path.\n         * @member {string}\n         */\n        this.appModulesPath = this.toAbsolutePath(this.options.appModulesPath || Literal.APP_MODULES_PATH);\n\n        /**\n         * Base route.\n         * @member {string}\n         */\n        this.route = \"/\";\n        \n        this.on('configLoaded', () => {\n            // load builtin middlewares\n            this.loadMiddlewaresFrom(path.resolve(__dirname, Literal.MIDDLEWARES_PATH));\n        });        \n    }\n\n    async stop_() {\n        if (this.started) {\n            if (this.appModules) {\n                await eachAsync_(this.appModules, app => app.stop_());\n                delete this.appModules;\n                delete this.appModulesByAlias;\n            }     \n        }\n\n        if (this.httpServer) {\n            await new Promise((resolve, reject) => {\n                this.httpServer.close((err) => {\n                    if (err) return reject(err);                                   \n                    resolve();                    \n                });\n            });            \n\n            delete this.httpServer;\n            this.log('info', `The http service is stopped.`); \n        }\n\n        return super.stop_();\n    }\n\n    /**\n     * Mount an app at specified route.\n     * @param {WebModule} app \n     */\n    mountApp(app) {\n        if (!this.appModules) {\n            this.appModules = {};\n            this.appModulesByAlias = {};\n        }\n\n        assert: !this.appModules.hasOwnProperty(app.route);\n\n        this.mountRouter(app.route, app.router);\n        \n        this.appModules[app.route] = app;\n\n        if (app.name in this.appModulesByAlias) {\n            let existingApp = this.appModulesByAlias[app.name];\n            //move bucket\n            this.appModulesByAlias[`${existingApp.name}[@${existingApp.route}]`] = existingApp;\n            delete this.appModulesByAlias[app.name];\n\n            this.appModulesByAlias[`${app.name}[@${app.route}]`] = app;\n        } else {\n            this.appModulesByAlias[app.name] = app;\n        }\n\n        this.log('verbose', `All routes from app [${app.name}] are mounted under \"${app.route}\".`);\n    }\n\n    /**\n     * Get the app module object by base route\n     * @param {string} p - App module base route started with \"/\"\n     */\n    getAppByRoute(p) {\n        //todo: change to p-tree\n        return this.appModules[p];\n    }\n\n    /**\n     * Get the app module object by app alias, usually the app name if no duplicate entry\n     * @param {string} a - App module alias\n     */\n    getAppByAlias(a) {\n        return this.appModulesByAlias[a];\n    }\n\n    /**\n     * Require a module from the source path of an app module\n     * @param {*} relativePath \n     */\n    requireFromApp(appName, relativePath) {\n        const app = this.getAppByAlias(appName);\n        return app.require(relativePath);\n    }\n\n    /**\n     * Get a registered service\n     * @param {string} name \n     */\n    getService(name) {\n        let pos = name.indexOf(':');\n        if (pos === -1) {\n            return super.getService(name);\n        }\n\n        let modAlias = name.substr(0, pos);\n        name = name.substr(pos+1);\n\n        let app = this.getAppByAlias(modAlias);\n        return app && app.getService(name, true);\n    }\n\n    _getFeatureFallbackPath() {\n        let pathArray = super._getFeatureFallbackPath();\n        pathArray.splice(1, 0, path.resolve(__dirname, Literal.FEATURES_PATH), path.resolve(__dirname, Literal.APP_FEATURES_PATH), path.resolve(__dirname, Literal.SERVER_FEATURES_PATH));\n        return pathArray;\n    }\n}\n\nmodule.exports = WebServer;"],"file":"WebServer.js"}