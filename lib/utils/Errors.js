"use strict";

require("source-map-support/register");

const {
  Errors: {
    GeneralError,
    ApplicationError,
    InvalidArgument,
    InvalidConfiguration,
    ExposableError
  }
} = require('@genx/app');

const HttpCode = require('http-status-codes');

class BadRequest extends ExposableError {
  constructor(message, info) {
    super(message, info, HttpCode.BAD_REQUEST, 'E_BAD_REQ');
  }

}

class NotFound extends ExposableError {
  constructor(message, info) {
    super(message, info, HttpCode.NOT_FOUND, 'E_NOT_FOUND');
  }

}

class Unauthorized extends ExposableError {
  constructor(message, info) {
    super(message, info, HttpCode.UNAUTHORIZED, 'E_UNAUTHORIZED');
  }

}

class ServiceUnavailable extends GeneralError {
  constructor(message, info) {
    super(message, info, HttpCode.SERVICE_UNAVAILABLE, 'E_UNAVAILABLE');
  }

}

exports.InvalidArgument = InvalidArgument;
exports.InvalidConfiguration = InvalidConfiguration;
exports.BadRequest = BadRequest;
exports.NotFound = NotFound;
exports.Unauthorized = Unauthorized;
exports.ServerError = ApplicationError;
exports.ServiceUnavailable = ServiceUnavailable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9FcnJvcnMuanMiXSwibmFtZXMiOlsiRXJyb3JzIiwiR2VuZXJhbEVycm9yIiwiQXBwbGljYXRpb25FcnJvciIsIkludmFsaWRBcmd1bWVudCIsIkludmFsaWRDb25maWd1cmF0aW9uIiwiRXhwb3NhYmxlRXJyb3IiLCJyZXF1aXJlIiwiSHR0cENvZGUiLCJCYWRSZXF1ZXN0IiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwiaW5mbyIsIkJBRF9SRVFVRVNUIiwiTm90Rm91bmQiLCJOT1RfRk9VTkQiLCJVbmF1dGhvcml6ZWQiLCJVTkFVVEhPUklaRUQiLCJTZXJ2aWNlVW5hdmFpbGFibGUiLCJTRVJWSUNFX1VOQVZBSUxBQkxFIiwiZXhwb3J0cyIsIlNlcnZlckVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQU9BLE1BQU07QUFDRkEsRUFBQUEsTUFBTSxFQUFFO0FBQUVDLElBQUFBLFlBQUY7QUFBZ0JDLElBQUFBLGdCQUFoQjtBQUFrQ0MsSUFBQUEsZUFBbEM7QUFBbURDLElBQUFBLG9CQUFuRDtBQUF5RUMsSUFBQUE7QUFBekU7QUFETixJQUVGQyxPQUFPLENBQUMsV0FBRCxDQUZYOztBQUlBLE1BQU1DLFFBQVEsR0FBR0QsT0FBTyxDQUFDLG1CQUFELENBQXhCOztBQU9BLE1BQU1FLFVBQU4sU0FBeUJILGNBQXpCLENBQXdDO0FBQ3BDSSxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVUMsSUFBVixFQUFnQjtBQUN2QixVQUFNRCxPQUFOLEVBQWVDLElBQWYsRUFBcUJKLFFBQVEsQ0FBQ0ssV0FBOUIsRUFBMkMsV0FBM0M7QUFDSDs7QUFIbUM7O0FBV3hDLE1BQU1DLFFBQU4sU0FBdUJSLGNBQXZCLENBQXNDO0FBQ2xDSSxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVUMsSUFBVixFQUFnQjtBQUN2QixVQUFNRCxPQUFOLEVBQWVDLElBQWYsRUFBcUJKLFFBQVEsQ0FBQ08sU0FBOUIsRUFBeUMsYUFBekM7QUFDSDs7QUFIaUM7O0FBV3RDLE1BQU1DLFlBQU4sU0FBMkJWLGNBQTNCLENBQTBDO0FBQ3RDSSxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVUMsSUFBVixFQUFnQjtBQUN2QixVQUFNRCxPQUFOLEVBQWVDLElBQWYsRUFBcUJKLFFBQVEsQ0FBQ1MsWUFBOUIsRUFBNEMsZ0JBQTVDO0FBQ0g7O0FBSHFDOztBQVcxQyxNQUFNQyxrQkFBTixTQUFpQ2hCLFlBQWpDLENBQThDO0FBQzFDUSxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVUMsSUFBVixFQUFnQjtBQUN2QixVQUFNRCxPQUFOLEVBQWVDLElBQWYsRUFBcUJKLFFBQVEsQ0FBQ1csbUJBQTlCLEVBQW1ELGVBQW5EO0FBQ0g7O0FBSHlDOztBQU05Q0MsT0FBTyxDQUFDaEIsZUFBUixHQUEwQkEsZUFBMUI7QUFDQWdCLE9BQU8sQ0FBQ2Ysb0JBQVIsR0FBK0JBLG9CQUEvQjtBQUNBZSxPQUFPLENBQUNYLFVBQVIsR0FBcUJBLFVBQXJCO0FBQ0FXLE9BQU8sQ0FBQ04sUUFBUixHQUFtQkEsUUFBbkI7QUFDQU0sT0FBTyxDQUFDSixZQUFSLEdBQXVCQSxZQUF2QjtBQUNBSSxPQUFPLENBQUNDLFdBQVIsR0FBc0JsQixnQkFBdEI7QUFDQWlCLE9BQU8sQ0FBQ0Ysa0JBQVIsR0FBNkJBLGtCQUE3QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIEVycm9yIGRlZmluaXRpb25zLlxuICogQG1vZHVsZSBFcnJvcnNcbiAqL1xuXG5jb25zdCB7IFxuICAgIEVycm9yczogeyBHZW5lcmFsRXJyb3IsIEFwcGxpY2F0aW9uRXJyb3IsIEludmFsaWRBcmd1bWVudCwgSW52YWxpZENvbmZpZ3VyYXRpb24sIEV4cG9zYWJsZUVycm9yIH1cbn0gPSByZXF1aXJlKCdAZ2VueC9hcHAnKTtcblxuY29uc3QgSHR0cENvZGUgPSByZXF1aXJlKCdodHRwLXN0YXR1cy1jb2RlcycpO1xuXG4vKipcbiAqIFJlcXVlc3QgZXJyb3JzLlxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBFeHBvc2FibGVFcnJvciAgXG4gKi9cbmNsYXNzIEJhZFJlcXVlc3QgZXh0ZW5kcyBFeHBvc2FibGVFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgaW5mbykge1xuICAgICAgICBzdXBlcihtZXNzYWdlLCBpbmZvLCBIdHRwQ29kZS5CQURfUkVRVUVTVCwgJ0VfQkFEX1JFUScpO1xuICAgIH1cbn0gIFxuICAgXG4vKipcbiAqIEh0dHAgTm90Rm91bmQsIDQwNC5cbiAqIEBjbGFzcyBcbiAqIEBleHRlbmRzIEV4cG9zYWJsZUVycm9yXG4gKi9cbmNsYXNzIE5vdEZvdW5kIGV4dGVuZHMgRXhwb3NhYmxlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGluZm8pIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgaW5mbywgSHR0cENvZGUuTk9UX0ZPVU5ELCAnRV9OT1RfRk9VTkQnKTtcbiAgICB9XG59ICBcblxuLyoqXG4gKiBIdHRwIFVuYXV0aG9yaXplZCwgNDAxLlxuICogQGNsYXNzIFxuICogQGV4dGVuZHMgRXhwb3NhYmxlRXJyb3JcbiAqL1xuY2xhc3MgVW5hdXRob3JpemVkIGV4dGVuZHMgRXhwb3NhYmxlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGluZm8pIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgaW5mbywgSHR0cENvZGUuVU5BVVRIT1JJWkVELCAnRV9VTkFVVEhPUklaRUQnKTtcbiAgICB9IFxufSBcblxuLyoqXG4gKiBTZXJ2aWNlIHVuYXZhaWxhYmxlIGVycm9yLCA1MDNcbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgR2VuZXJhbEVycm9yICBcbiAqL1xuY2xhc3MgU2VydmljZVVuYXZhaWxhYmxlIGV4dGVuZHMgR2VuZXJhbEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBpbmZvKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIGluZm8sIEh0dHBDb2RlLlNFUlZJQ0VfVU5BVkFJTEFCTEUsICdFX1VOQVZBSUxBQkxFJyk7XG4gICAgfVxufVxuXG5leHBvcnRzLkludmFsaWRBcmd1bWVudCA9IEludmFsaWRBcmd1bWVudDtcbmV4cG9ydHMuSW52YWxpZENvbmZpZ3VyYXRpb24gPSBJbnZhbGlkQ29uZmlndXJhdGlvbjtcbmV4cG9ydHMuQmFkUmVxdWVzdCA9IEJhZFJlcXVlc3Q7XG5leHBvcnRzLk5vdEZvdW5kID0gTm90Rm91bmQ7XG5leHBvcnRzLlVuYXV0aG9yaXplZCA9IFVuYXV0aG9yaXplZDtcbmV4cG9ydHMuU2VydmVyRXJyb3IgPSBBcHBsaWNhdGlvbkVycm9yO1xuZXhwb3J0cy5TZXJ2aWNlVW5hdmFpbGFibGUgPSBTZXJ2aWNlVW5hdmFpbGFibGU7Il19